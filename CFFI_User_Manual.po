# NuINu <don't@send.my>, 2020.
#
#. extracted from in/CFFI_User_Manual.htm
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-20 11:18+0300\n"
"PO-Revision-Date: 2020-01-28 16:30+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in/CFFI_User_Manual.htm:3
msgid ""
"<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://"
"www.w3.org/TR/html4/loose.dtd\">\n"
"<html><!-- Copyright (C) 2005 James Bielman <jamesjb at jamesjb.com> "
msgstr ""

#: in/CFFI_User_Manual.htm:6
msgid ""
"Copyright (C) 2005-2015 Lui's Oliveira\n"
"  <loliveira at common-lisp.net> "
msgstr ""

#: in/CFFI_User_Manual.htm:8
msgid "Copyright (C) 2005-2006 Dan Knapp <danka at accela.net> "
msgstr ""

#: in/CFFI_User_Manual.htm:10
msgid "Copyright (C) 2005-2006 Emily Backes <lucca at accela.net> "
msgstr ""

#: in/CFFI_User_Manual.htm:12
msgid "Copyright (C) 2006 Stephen Compall <s11 at member.fsf.org>"
msgstr ""

#: in/CFFI_User_Manual.htm:20
msgid ""
"Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"\"Software\"), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:"
msgstr ""

#: in/CFFI_User_Manual.htm:23
msgid ""
"The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software."
msgstr ""

#: in/CFFI_User_Manual.htm:33
msgid ""
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n"
"IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n"
"CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n"
"TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n"
"SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. --><!-- Created by "
"GNU Texinfo 6.5, http://www.gnu.org/software/texinfo/ --><head>\n"
"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n"
"<title>CFFI User Manual</title>"
msgstr ""
"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n"
"IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n"
"CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n"
"TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n"
"SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. --><!-- Created by "
"GNU Texinfo 6.5, http://www.gnu.org/software/texinfo/ --><head>\n"
"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n"
"<title>CFFI Руководство пользователя</title>"

#: in/CFFI_User_Manual.htm:83
msgid ""
"<meta name=\"description\" content=\"CFFI User Manual\">\n"
"<meta name=\"keywords\" content=\"CFFI User Manual\">\n"
"<meta name=\"resource-type\" content=\"document\">\n"
"<meta name=\"distribution\" content=\"global\">\n"
"<meta name=\"Generator\" content=\"makeinfo\">\n"
"<link href=\"#Top\" rel=\"start\" title=\"Top\">\n"
"<link href=\"#Comprehensive-Index\" rel=\"index\" title=\"Comprehensive Index"
"\">\n"
"<link href=\"#SEC_Contents\" rel=\"contents\" title=\"Table of Contents\">\n"
"<link href=\"https://common-lisp.net/project/cffi/manual/dir.html#Top\" rel="
"\"up\" title=\"(dir)\">\n"
"<style type=\"text/css\">\n"
"<!--\n"
"a.summary-letter {text-decoration: none}\n"
"blockquote.indentedblock {margin-right: 0em}\n"
"blockquote.smallindentedblock {margin-right: 0em; font-size: smaller}\n"
"blockquote.smallquotation {font-size: smaller}\n"
"div.display {margin-left: 3.2em}\n"
"div.example {margin-left: 3.2em}\n"
"div.lisp {margin-left: 3.2em}\n"
"div.smalldisplay {margin-left: 3.2em}\n"
"div.smallexample {margin-left: 3.2em}\n"
"div.smalllisp {margin-left: 3.2em}\n"
"kbd {font-style: oblique}\n"
"pre.display {font-family: inherit}\n"
"pre.format {font-family: inherit}\n"
"pre.menu-comment {font-family: serif}\n"
"pre.menu-preformatted {font-family: serif}\n"
"pre.smalldisplay {font-family: inherit; font-size: smaller}\n"
"pre.smallexample {font-size: smaller}\n"
"pre.smallformat {font-family: inherit; font-size: smaller}\n"
"pre.smalllisp {font-size: smaller}\n"
"span.nolinebreak {white-space: nowrap}\n"
"span.roman {font-family: initial; font-weight: normal}\n"
"span.sansserif {font-family: sans-serif; font-weight: normal}\n"
"ul.no-bullet {list-style: none}\n"
"body {font-family: Georgia, serif;\n"
"      line-height: 1.3;\n"
"      padding-left: 5em; padding-right: 1em;\n"
"      padding-bottom: 1em; max-width: 60em;}\n"
"table {border-collapse: collapse}\n"
"span.roman { font-family: century schoolbook, serif; font-weight: normal; }\n"
"h1, h2, h3, h4, h5, h6 {font-family:  Helvetica, sans-serif}\n"
"h4 { margin-top: 2.5em; }\n"
"dfn {font-family: inherit; font-variant: italic; font-weight: bolder }\n"
"kbd {font-family: monospace; text-decoration: underline}\n"
"/*var {font-family: Helvetica, sans-serif; font-variant: slanted}*/\n"
"var {font-variant: slanted;}\n"
"td  {padding-right: 1em; padding-left: 1em}\n"
"sub {font-size: smaller}\n"
".node {padding: 0; margin: 0}"
msgstr ""

#: in/CFFI_User_Manual.htm:87
msgid ""
"pre.lisp { font-family: monospace;\n"
"           background-color: #F4F4F4; border: 1px solid #AAA;\n"
"           padding-top: 0.5em; padding-bottom: 0.5em; }"
msgstr ""

#: in/CFFI_User_Manual.htm:89
msgid "/* coloring */"
msgstr ""

#: in/CFFI_User_Manual.htm:92
msgid ""
".lisp-bg { background-color: #F4F4F4 ; color: black; }\n"
".lisp-bg:hover { background-color: #F4F4F4 ; color: black; }"
msgstr ""

#: in/CFFI_User_Manual.htm:116
msgid ""
".symbol { font-weight: bold; color: #770055; background-color : transparent; "
"border: 0px; margin: 0px;}\n"
"a.symbol:link { font-weight: bold; color : #229955; background-color : "
"transparent; text-decoration: none; border: 0px; margin: 0px; }\n"
"a.symbol:active { font-weight: bold; color : #229955; background-color : "
"transparent; text-decoration: none; border: 0px; margin: 0px; }\n"
"a.symbol:visited { font-weight: bold; color : #229955; background-color : "
"transparent; text-decoration: none; border: 0px; margin: 0px; }\n"
"a.symbol:hover { font-weight: bold; color : #229955; background-color : "
"transparent; text-decoration: none; border: 0px; margin: 0px; }\n"
".special { font-weight: bold; color: #FF5000; background-color: inherit; }\n"
".keyword { font-weight: bold; color: #770000; background-color: inherit; }\n"
".comment { font-weight: normal; color: #007777; background-color: "
"inherit; }\n"
".string  { font-weight: bold; color: #777777; background-color: inherit; }\n"
".character   { font-weight: bold; color: #0055AA; background-color: "
"inherit; }\n"
".syntaxerror { font-weight: bold; color: #FF0000; background-color: "
"inherit; }\n"
"span.paren1 { font-weight: bold; color: #777777; }\n"
"span.paren1:hover { color: #777777; background-color: #BAFFFF; }\n"
"span.paren2 { color: #777777; }\n"
"span.paren2:hover { color: #777777; background-color: #FFCACA; }\n"
"span.paren3 { color: #777777; }\n"
"span.paren3:hover { color: #777777; background-color: #FFFFBA; }\n"
"span.paren4 { color: #777777; }\n"
"span.paren4:hover { color: #777777; background-color: #CACAFF; }\n"
"span.paren5 { color: #777777; }\n"
"span.paren5:hover { color: #777777; background-color: #CAFFCA; }\n"
"span.paren6 { color: #777777; }\n"
"span.paren6:hover { color: #777777; background-color: #FFBAFF; }"
msgstr ""

#: in/CFFI_User_Manual.htm:119
msgid ""
"-->\n"
"</style>"
msgstr ""

#: in/CFFI_User_Manual.htm:122
msgid ""
"</head><style type=\"text/css\" id=\"block-image-video\"> svg {visibility: "
"hidden !important; opacity: 0 !important}  img {visibility: hidden !"
"important; opacity: 0 !important}  video {visibility: hidden !important; "
"opacity: 0 !important}  canvas {visibility: hidden !important; opacity: 0 !"
"important}  iframe [type=\"application/x-shockwave-flash\"] {visibility: "
"hidden !important; opacity: 0 !important}  .hide {visibility: hidden !"
"important; opacity: 0 !important} </style>"
msgstr ""

#: in/CFFI_User_Manual.htm:125
msgid ""
"<body lang=\"en\">\n"
"<h1 class=\"settitle\" align=\"center\">CFFI User Manual</h1>"
msgstr ""
"<body lang=\"en\">\n"
"<h1 class=\"settitle\" align=\"center\">CFFI Руководство пользователя</h1>"

#: in/CFFI_User_Manual.htm:150
msgid ""
"<a name=\"SEC_Contents\"></a>\n"
"<h2 class=\"contents-heading\">Table of Contents</h2>"
msgstr ""
"<a name=\"SEC_Contents\"></a>\n"
"<h2 class=\"contents-heading\">Содержание</h2>"

#: in/CFFI_User_Manual.htm:152
msgid "<div class=\"contents\">"
msgstr ""

#: in/CFFI_User_Manual.htm:216
msgid ""
"<ul class=\"no-bullet\">\n"
"  <li><a name=\"toc-Introduction-1\" href=\"#Introduction\">1 Introduction</"
"a></li>\n"
"  <li><a name=\"toc-Installation-1\" href=\"#Installation\">2 Installation</"
"a></li>\n"
"  <li><a name=\"toc-Implementation-Support-1\" href=\"#Implementation-Support"
"\">3 Implementation Support</a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a name=\"toc-Limitations-1\" href=\"#Limitations-1\">3.1 "
"Limitations</a></li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-An-Introduction-to-Foreign-Interfaces-and-CFFI\" href="
"\"#Tutorial\">4 An Introduction to Foreign Interfaces and <acronym>CFFI</"
"acronym></a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a name=\"toc-What-makes-Lisp-different\" href="
"\"#Tutorial_002dComparison\">4.1 What makes Lisp different</a></li>\n"
"    <li><a name=\"toc-Getting-a-URL\" href=\"#Tutorial_002dGetting-a-URL"
"\">4.2 Getting a <acronym>URL</acronym></a></li>\n"
"    <li><a name=\"toc-Loading-foreign-libraries\" href="
"\"#Tutorial_002dLoading\">4.3 Loading foreign libraries</a></li>\n"
"    <li><a name=\"toc-Initializing-libcurl\" href="
"\"#Tutorial_002dInitializing\">4.4 Initializing <code>libcurl</code></a></"
"li>\n"
"    <li><a name=\"toc-Setting-download-options\" href="
"\"#Tutorial_002deasy_005fsetopt\">4.5 Setting download options</a></li>\n"
"    <li><a name=\"toc-Breaking-the-abstraction\" href="
"\"#Tutorial_002dAbstraction\">4.6 Breaking the abstraction</a></li>\n"
"    <li><a name=\"toc-Option-functions-in-Lisp\" href=\"#Tutorial_002dLisp-"
"easy_005fsetopt\">4.7 Option functions in Lisp</a></li>\n"
"    <li><a name=\"toc-Memory-management\" href=\"#Tutorial_002dMemory\">4.8 "
"Memory management</a></li>\n"
"    <li><a name=\"toc-Calling-Lisp-from-C\" href=\"#Tutorial_002dCallbacks"
"\">4.9 Calling Lisp from C</a></li>\n"
"    <li><a name=\"toc-A-complete-FFI_003f\" href=\"#Tutorial_002dCompletion"
"\">4.10 A complete <acronym>FFI</acronym>?</a></li>\n"
"    <li><a name=\"toc-Defining-new-types\" href=\"#Tutorial_002dTypes\">4.11 "
"Defining new types</a></li>\n"
"    <li><a name=\"toc-What_0027s-next_003f\" href=\"#Tutorial_002dConclusion"
"\">4.12 Whatâs next?</a></li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-Wrapper-generators-1\" href=\"#Wrapper-generators\">5 "
"Wrapper generators</a></li>\n"
"  <li><a name=\"toc-Foreign-Types-1\" href=\"#Foreign-Types\">6 Foreign "
"Types</a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a name=\"toc-Built_002dIn-Types-1\" href=\"#Built_002dIn-Types"
"\">6.1 Built-In Types</a></li>\n"
"    <li><a name=\"toc-Other-Types-1\" href=\"#Other-Types\">6.2 Other Types</"
"a></li>\n"
"    <li><a name=\"toc-Defining-Foreign-Types-1\" href=\"#Defining-Foreign-"
"Types\">6.3 Defining Foreign Types</a></li>\n"
"    <li><a name=\"toc-Foreign-Type-Translators-1\" href=\"#Foreign-Type-"
"Translators\">6.4 Foreign Type Translators</a></li>\n"
"    <li><a name=\"toc-Optimizing-Type-Translators-1\" href=\"#Optimizing-"
"Type-Translators\">6.5 Optimizing Type Translators</a></li>\n"
"    <li><a name=\"toc-Foreign-Structure-Types-1\" href=\"#Foreign-Structure-"
"Types\">6.6 Foreign Structure Types</a></li>\n"
"    <li><a name=\"toc-Allocating-Foreign-Objects-1\" href=\"#Allocating-"
"Foreign-Objects\">6.7 Allocating Foreign Objects</a></li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-Pointers-1\" href=\"#Pointers\">7 Pointers</a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a name=\"toc-Basic-Pointer-Operations-1\" href=\"#Basic-Pointer-"
"Operations\">7.1 Basic Pointer Operations</a></li>\n"
"    <li><a name=\"toc-Allocating-Foreign-Memory-1\" href=\"#Allocating-"
"Foreign-Memory\">7.2 Allocating Foreign Memory</a></li>\n"
"    <li><a name=\"toc-Accessing-Foreign-Memory-1\" href=\"#Accessing-Foreign-"
"Memory\">7.3 Accessing Foreign Memory</a></li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-Strings-1\" href=\"#Strings\">8 Strings</a></li>\n"
"  <li><a name=\"toc-Variables-1\" href=\"#Variables\">9 Variables</a></li>\n"
"  <li><a name=\"toc-Functions-1\" href=\"#Functions\">10 Functions</a></li>\n"
"  <li><a name=\"toc-Libraries-1\" href=\"#Libraries\">11 Libraries</a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a name=\"toc-Defining-a-library-1\" href=\"#Defining-a-library"
"\">11.1 Defining a library</a></li>\n"
"    <li><a name=\"toc-Library-definition-style-1\" href=\"#Library-"
"definition-style\">11.2 Library definition style</a></li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-Callbacks-1\" href=\"#Callbacks\">12 Callbacks</a></li>\n"
"  <li><a name=\"toc-The-Groveller-1\" href=\"#The-Groveller\">13 The "
"Groveller</a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a name=\"toc-Building-FFIs-with-CFFI_002dGrovel\" href=\"#Building-"
"FFIs-with-CFFI_002dGrovel\">13.1 Building FFIs with CFFI-Grovel</a></li>\n"
"    <li><a name=\"toc-Specification-File-Syntax\" href=\"#Groveller-Syntax"
"\">13.2 Specification File Syntax</a></li>\n"
"    <li><a name=\"toc-ASDF-Integration\" href=\"#Groveller-ASDF-Integration"
"\">13.3 ASDF Integration</a></li>\n"
"    <li><a name=\"toc-Implementation-Notes\" href=\"#Groveller-"
"Implementation-Notes\">13.4 Implementation Notes</a></li>\n"
"    <li><a name=\"toc-Wrapper-for-Inline_002fStatic-Functions-and-Macros-1\" "
"href=\"#Wrapper-for-Inline_002fStatic-Functions-and-Macros\">13.5 Wrapper "
"for Inline/Static Functions and Macros</a></li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-Static-Linking-1\" href=\"#Static-Linking\">14 Static "
"Linking</a></li>\n"
"  <li><a name=\"toc-Limitations-2\" href=\"#Limitations\">15 Limitations</"
"a></li>\n"
"  <li><a name=\"toc-Platform_002dspecific-features-1\" href="
"\"#Platform_002dspecific-features\">Appendix A Platform-specific features</"
"a></li>\n"
"  <li><a name=\"toc-Glossary-1\" href=\"#Glossary\">Appendix B Glossary</a></"
"li>\n"
"  <li><a name=\"toc-Index\" href=\"#Comprehensive-Index\">Index</a></li>\n"
"</ul>\n"
"</div>"
msgstr ""
"<ul class=\"no-bullet\">\n"
"  <li><a name=\"toc-Introduction-1\" href=\"#Introduction\">1 Введение</a></"
"li>\n"
"  <li><a name=\"toc-Installation-1\" href=\"#Installation\">2 Установка</a></"
"li>\n"
"  <li><a name=\"toc-Implementation-Support-1\" href=\"#Implementation-Support"
"\">3 Поддерживаемая реализация</a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a name=\"toc-Limitations-1\" href=\"#Limitations-1\">3.1 "
"Ограничения</a></li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-An-Introduction-to-Foreign-Interfaces-and-CFFI\" href="
"\"#Tutorial\">4 Введение во внешние\n"
"Интерефейсы и <acronym>CFFI</acronym></a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a nam=\"toc-What-makes-Lisp-different\" href="
"\"#Tutorial_002dComparison\">4.1 Что отличает Lisp</a></li>\n"
"    <li><a name=\"toc-Getting-a-URL\" href=\"#Tutorial_002dGetting-a-URL"
"\">4.2 Получение <acronym>URL</acronym></a></li>\n"
"    <li><a name=\"toc-Loading-foreign-libraries\" href="
"\"#Tutorial_002dLoading\">4.3 Загрузка внешних библиотек</a></li>\n"
"    <li><a name=\"toc-Initializing-libcurl\" href="
"\"#Tutorial_002dInitializing\">4.4 Инициализация <code>libcurl</code></a></"
"li>\n"
"    <li><a name=\"toc-Setting-download-options\" href="
"\"#Tutorial_002deasy_005fsetopt\">4.5 Настройка опций(параметров) загрузки</"
"a></li>\n"
"    <li><a name=\"toc-Breaking-the-abstraction\" href="
"\"#Tutorial_002dAbstraction\">4.6 Нарушение абстракции</a></li>\n"
"    <li><a name=\"toc-Option-functions-in-Lisp\" href=\"#Tutorial_002dLisp-"
"easy_005fsetopt\">4.7 Опции функций в Lisp</a></li>\n"
"    <li><a name=\"toc-Memory-management\" href=\"#Tutorial_002dMemory\">4.8 "
"Управление памятью</a></li>\n"
"    <li><a name=\"toc-Calling-Lisp-from-C\" href=\"#Tutorial_002dCallbacks"
"\">4.9 Вызов Lisp из Си</a></li>\n"
"    <li><a name=\"toc-A-complete-FFI_003f\" href=\"#Tutorial_002dCompletion"
"\">4.10 Полная <acronym>FFI</acronym>?</a></li>\n"
"    <li><a name=\"toc-Defining-new-types\" href=\"#Tutorial_002dTypes\">4.11 "
"Определение новых типов</a></li>\n"
"    <li><a name=\"toc-What_0027s-next_003f\" href=\"#Tutorial_002dConclusion"
"\">4.12 Что дальше?</a></li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-Wrapper-generators-1\" href=\"#Wrapper-generators\">5 "
"Генератор оберток</a></li>\n"
"  <li><a name=\"toc-Foreign-Types-1\" href=\"#Foreign-Types\">6 Внешние "
"типы</a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a name=\"toc-Built_002dIn-Types-1\" href=\"#Built_002dIn-Types"
"\">6.1 Встроенные типы</a></li>\n"
"    <li><a name=\"toc-Other-Types-1\" href=\"#Other-Types\">6.2 Другие типы</"
"a></li>\n"
"    <li><a name=\"toc-Defining-Foreign-Types-1\" href=\"#Defining-Foreign-"
"Types\">6.3 Определение Внешних типов</a></li>\n"
"    <li><a name=\"toc-Foreign-Type-Translators-1\" href=\"#Foreign-Type-"
"Translators\">6.4 Преобразование Внешних типов</a></li>\n"
"    <li><a name=\"toc-Optimizing-Type-Translators-1\" href=\"#Optimizing-"
"Type-Translators\">6.5 Оптимизация преобразователей типов</a></li>\n"
"    <li><a name=\"toc-Foreign-Structure-Types-1\" href=\"#Foreign-Structure-"
"Types\">6.6 Типы внешних структур</a></li>\n"
"    <li><a name=\"toc-Allocating-Foreign-Objects-1\" href=\"#Allocating-"
"Foreign-Objects\">6.7 Размещение(выделение памяти) Внешних Объектов</a></"
"li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-Pointers-1\" href=\"#Pointers\">7 Указатели</a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a name=\"toc-Basic-Pointer-Operations-1\" href=\"#Basic-Pointer-"
"Operations\">7.1 Базовые операции с указателями</a></li>\n"
"    <li><a name=\"toc-Allocating-Foreign-Memory-1\" href=\"#Allocating-"
"Foreign-Memory\">7.2 Выделение внешней памяти</a></li>\n"
"    <li><a name=\"toc-Accessing-Foreign-Memory-1\" href=\"#Accessing-Foreign-"
"Memory\">7.3 Доступ к внешней памяти</a></li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-Strings-1\" href=\"#Strings\">8 Стороки</a></li>\n"
"  <li><a name=\"toc-Variables-1\" href=\"#Variables\">9 Переменные</a></li>\n"
"  <li><a name=\"toc-Functions-1\" href=\"#Functions\">10 Функции</a></li>\n"
"  <li><a name=\"toc-Libraries-1\" href=\"#Libraries\">11 Библиотеки</a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a name=\"toc-Defining-a-library-1\" href=\"#Defining-a-library"
"\">11.1 Определение библиотек</a></li>\n"
"    <li><a name=\"toc-Library-definition-style-1\" href=\"#Library-"
"definition-style\">11.2 Стиль определения библиотек</a></li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-Callbacks-1\" href=\"#Callbacks\">12 Обратные вызовы</"
"a></li>\n"
"  <li><a name=\"toc-The-Groveller-1\" href=\"#The-Groveller\">13 Groveller</"
"a>\n"
"  <ul class=\"no-bullet\">\n"
"    <li><a name=\"toc-Building-FFIs-with-CFFI_002dGrovel\" href=\"#Building-"
"FFIs-with-CFFI_002dGrovel\">13.1 Создание FFI с CFFI-Grovel</a></li>\n"
"    <li><a name=\"toc-Specification-File-Syntax\" href=\"#Groveller-Syntax"
"\">13.2 Синтаксис файла спецификации</a></li>\n"
"    <li><a name=\"toc-ASDF-Integration\" href=\"#Groveller-ASDF-Integration"
"\">13.3 Интеграция с ASDF</a></li>\n"
"    <li><a name=\"toc-Implementation-Notes\" href=\"#Groveller-"
"Implementation-Notes\">13.4 Замечания по реализации</a></li>\n"
"    <li><a name=\"toc-Wrapper-for-Inline_002fStatic-Functions-and-Macros-1\" "
"href=\"#Wrapper-for-Inline_002fStatic-Functions-and-Macros\">13.5 Обертки "
"для встраиваемых/Статических (Inline/Static) функций и макросов</a></li>\n"
"  </ul></li>\n"
"  <li><a name=\"toc-Static-Linking-1\" href=\"#Static-Linking\">14 "
"Статическое связывание</a></li>\n"
"  <li><a name=\"toc-Limitations-2\" href=\"#Limitations\">15 Ограничения</"
"a></li>\n"
"  <li><a name=\"toc-Platform_002dspecific-features-1\" href="
"\"#Platform_002dspecific-features\">Приложение А. Особенности платформы</a></"
"li>\n"
"  <li><a name=\"toc-Glossary-1\" href=\"#Glossary\">Приложени Б Глосарий</"
"a></li>\n"
"  <li><a name=\"toc-Index\" href=\"#Comprehensive-Index\">Указатель</a></"
"li>\n"
"</ul>\n"
"</div>"

#: in/CFFI_User_Manual.htm:252
msgid ""
"<a name=\"Top\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Introduction\" accesskey=\"n\" rel=\"next\">Introduction</"
"a>, Previous: <a href=\"https://common-lisp.net/project/cffi/manual/dir."
"html#Top\" accesskey=\"p\" rel=\"prev\">(dir)</a>, Up: <a href=\"https://"
"common-lisp.net/project/cffi/manual/dir.html#Top\" accesskey=\"u\" rel=\"up"
"\">(dir)</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" "
"rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index"
"\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"cffi\"></a>\n"
"<h1 class=\"top\">cffi</h1>\n"
"<p>Copyright Â© 2005 James Bielman &lt;jamesjb at jamesjb.com&gt; <br>\n"
"Copyright Â© 2005-2015 LuÃ­s Oliveira\n"
"  &lt;loliveira at common-lisp.net&gt; <br>\n"
"Copyright Â© 2005-2006 Dan Knapp &lt;danka at accela.net&gt; <br>\n"
"Copyright Â© 2005-2006 Emily Backes &lt;lucca at accela.net&gt; <br>\n"
"Copyright Â© 2006 Stephen Compall &lt;s11 at member.fsf.org&gt;\n"
"</p>\n"
"<blockquote>\n"
"<p>Permission is hereby granted, free of charge, to any person obtaining\n"
"a copy of this software and associated documentation files (the\n"
"âSoftwareâ), to deal in the Software without restriction, including\n"
"without limitation the rights to use, copy, modify, merge, publish,\n"
"distribute, sublicense, and/or sell copies of the Software, and to\n"
"permit persons to whom the Software is furnished to do so, subject to\n"
"the following conditions:\n"
"</p>\n"
"<p>The above copyright notice and this permission notice shall be\n"
"included in all copies or substantial portions of the Software.\n"
"</p>\n"
"<p><small>THE SOFTWARE IS PROVIDED âAS ISâ, WITHOUT WARRANTY OF ANY KIND,\n"
"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n"
"IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n"
"CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n"
"TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n"
"SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</small>\n"
"</p></blockquote>"
msgstr ""

#: in/CFFI_User_Manual.htm:293
msgid ""
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href=\"#Introduction\" "
"accesskey=\"1\">Introduction</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top"
"\" align=\"left\">What is CFFI?\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Installation\" accesskey="
"\"2\">Installation</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Implementation-Support\" "
"accesskey=\"3\">Implementation Support</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial\" accesskey="
"\"4\">Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Interactive intro to using CFFI.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Wrapper-generators\" "
"accesskey=\"5\">Wrapper generators</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">CFFI forms from munging C source code.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Foreign-Types\" "
"accesskey=\"6\">Foreign Types</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top"
"\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Pointers\" accesskey="
"\"7\">Pointers</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Strings\" accesskey="
"\"8\">Strings</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Variables\" accesskey="
"\"9\">Variables</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Functions\">Functions</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Libraries\">Libraries</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Callbacks\">Callbacks</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#The-Groveller\">The "
"Groveller</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Static-Linking\">Static "
"Linking</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Limitations"
"\">Limitations</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Platform_002dspecific-"
"features\">Platform-specific features</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">Details about the underlying system.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Glossary\">Glossary</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">List of CFFI-"
"specific terms and meanings.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Comprehensive-Index"
"\">Comprehensive Index</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"</pre></th></tr><tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre "
"class=\"menu-comment\"> â Dictionary â"
msgstr ""
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href=\"#Introduction\" "
"accesskey=\"1\">Introduction</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top"
"\" align=\"left\">Что такое CFFI?\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Installation\" accesskey="
"\"2\">Installation</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Implementation-Support\" "
"accesskey=\"3\">Implementation Support</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial\" accesskey="
"\"4\">Tutorial</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Интерактивное введение в использование CFFI.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Wrapper-generators\" "
"accesskey=\"5\">Wrapper generators</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">CFFI фомы из окружения исходного кода на Си.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Foreign-Types\" "
"accesskey=\"6\">Foreign Types</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top"
"\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Pointers\" accesskey="
"\"7\">Pointers</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Strings\" accesskey="
"\"8\">Strings</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Variables\" accesskey="
"\"9\">Variables</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Functions\">Functions</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Libraries\">Libraries</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Callbacks\">Callbacks</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#The-Groveller\">The "
"Groveller</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Static-Linking\">Static "
"Linking</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Limitations"
"\">Limitations</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Platform_002dspecific-"
"features\">Platform-specific features</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">Подробности о базовой системе.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Glossary\">Glossary</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Список CFFI-"
"специфичных терминов и значений.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Comprehensive-Index"
"\">Comprehensive Index</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"</pre></th></tr><tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre "
"class=\"menu-comment\"> â Словарь â"

#: in/CFFI_User_Manual.htm:295
msgid "Foreign Types"
msgstr "Внешние Типы"

#: in/CFFI_User_Manual.htm:350
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#convert_002dfrom_002dforeign\">convert-from-foreign</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Outside interface to backward "
"type translator.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#convert_002dto_002dforeign\">convert-to-foreign</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">Outside interface to forward type "
"translator.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defbitfield"
"\">defbitfield</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Defines a bitfield.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcstruct\">defcstruct</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Defines a C "
"structure type.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcunion\">defcunion</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Defines a C "
"union type.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defctype\">defctype</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Defines a "
"foreign typedef.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcenum\">defcenum</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Defines a C "
"enumeration.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#define_002dforeign_002dtype\">define-foreign-type</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Defines a foreign type "
"specifier.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#define_002dparse_002dmethod\">define-parse-method</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Specifies how a type should be "
"parsed.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dbitfield_002dsymbols\">foreign-bitfield-symbols</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Returns a list of "
"symbols for a bitfield type.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dbitfield_002dvalue\">foreign-bitfield-value</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Calculates a value "
"for a bitfield type.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002denum_002dkeyword\">foreign-enum-keyword</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Finds a keyword in an enum "
"type.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002denum_002dvalue\">foreign-enum-value</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">Finds a value in an enum type.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002dnames\">foreign-slot-names</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">Returns a list of slot names in a "
"foreign struct.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002doffset\">foreign-slot-offset</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Returns the offset of a slot in "
"a foreign struct.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002dpointer\">foreign-slot-pointer</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Returns a pointer to a slot in "
"a foreign struct.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002dvalue\">foreign-slot-value</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">Returns the value of a slot in a "
"foreign struct.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dtype_002dalignment\">foreign-type-alignment</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Returns the "
"alignment of a foreign type.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#foreign_002dtype_002dsize"
"\">foreign-type-size</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Returns the size of a foreign type.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#free_002dconverted_002dobject\">free-converted-object</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Outside interface to typed "
"object deallocators.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#free_002dtranslated_002dobject\">free-translated-object</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Defines how to "
"free a oreign object.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dfrom_002dforeign\">translate-from-foreign</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Defines a foreign-"
"to-Lisp object translation.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dto_002dforeign\">translate-to-foreign</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Defines a Lisp-to-foreign "
"object translation.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dobject\">with-foreign-object</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Allocates a foreign object with "
"dynamic extent.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dobjects\">with-foreign-objects</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Plural form of <code>with-"
"foreign-object</code>.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dslots\">with-foreign-slots</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">Accesses the slots of a foreign "
"structure.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Pointers"
msgstr ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#convert_002dfrom_002dforeign\">convert-from-foreign</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Внешний интефрейс для обратного "
"преобразователя типа.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#convert_002dto_002dforeign\">convert-to-foreign</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">Внешний интерфес для пряомго "
"преобразователя типа.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defbitfield"
"\">defbitfield</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">определяет битовое поле.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcstruct\">defcstruct</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">определяет "
"тип Си структуры.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcunion\">defcunion</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">определяет "
"тип Си объединение.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defctype\">defctype</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">определяет "
"внешний typedef.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcenum\">defcenum</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">определяет "
"перечисление Си.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#define_002dforeign_002dtype\">define-foreign-type</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Определяет спецификатор "
"внешнего типа.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#define_002dparse_002dmethod\">define-parse-method</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Определяет, как должен "
"анализироваться(parsed) тип.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dbitfield_002dsymbols\">foreign-bitfield-symbols</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Возвращает список "
"символов для типа битового поля.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dbitfield_002dvalue\">foreign-bitfield-value</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Вычисляет значение "
"для типа битового поля.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002denum_002dkeyword\">foreign-enum-keyword</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Находит ключевое слово в тип "
"перечисления.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002denum_002dvalue\">foreign-enum-value</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">Находит значение в типе "
"перечисления.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002dnames\">foreign-slot-names</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">Возвращает список имен слотов во "
"внешней структуре.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002doffset\">foreign-slot-offset</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Возвращает смещение слота во "
"внешней структуре.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002dpointer\">foreign-slot-pointer</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Возвращает указатель на слот во "
"внешней структуре.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002dvalue\">foreign-slot-value</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">Возвращает значение слота во внешней "
"струтуре.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dtype_002dalignment\">foreign-type-alignment</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Возвращает "
"выравнивание внешнего типа.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#foreign_002dtype_002dsize"
"\">foreign-type-size</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Возвращает размер внешнего типа.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#free_002dconverted_002dobject\">free-converted-object</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Внешний интерфейс для "
"особождения(удаления) типизированных объектов.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#free_002dtranslated_002dobject\">free-translated-object</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Определяет, как "
"осовбодить внешний объект.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dfrom_002dforeign\">translate-from-foreign</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Определяет "
"перобразование внешнего объекта в Лисп.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dto_002dforeign\">translate-to-foreign</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Определяет преобразование Лисп "
"во внешний объект.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dobject\">with-foreign-object</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Выделяет внешний объект с "
"динамическим пространством.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dobjects\">with-foreign-objects</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Множественная форма <code>with-"
"foreign-object</code>.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dslots\">with-foreign-slots</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">доступ к слотам внешней структуры.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Укзатели"

#: in/CFFI_User_Manual.htm:383
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dfree\">foreign-free</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">Deallocates memory.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#foreign_002dalloc"
"\">foreign-alloc</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Allocates memory.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dsymbol_002dpointer\">foreign-symbol-pointer</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Returns a pointer "
"to a foreign symbol.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#inc_002dpointer\">inc-"
"pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Increments the address held by a pointer.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#incf_002dpointer\">incf-"
"pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Increments the pointer address in a place.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#make_002dpointer\">make-"
"pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Returns a pointer to a given address.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#mem_002daptr\">mem-aptr</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">The pointer "
"to an element of an array.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#mem_002daref\">mem-aref</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Accesses the "
"value of an index in an array.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#mem_002dref\">mem-ref</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Dereferences "
"a pointer.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#null_002dpointer\">null-"
"pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Returns a NULL pointer.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#null_002dpointer_002dp"
"\">null-pointer-p</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Tests a pointer for NULL value.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#pointerp\">pointerp</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Tests whether an "
"object is a pointer or not.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#pointer_002daddress"
"\">pointer-address</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Returns the address pointed to by a pointer.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#pointer_002deq\">pointer-"
"eq</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Tests if "
"two pointers point to the same address.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dpointer\">with-foreign-pointer</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Allocates memory with dynamic "
"extent.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Strings"
msgstr ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dfree\">foreign-free</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">Освобождает память.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#foreign_002dalloc"
"\">foreign-alloc</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Выделяет память.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dsymbol_002dpointer\">foreign-symbol-pointer</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Взвращает указать "
"на внешний символ.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#inc_002dpointer\">inc-"
"pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">увеличивает адрес указываемый указателем.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#incf_002dpointer\">incf-"
"pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Увеличивает адресс указателя по месту.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#make_002dpointer\">make-"
"pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Возвращает указатель на заданный адрес.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#mem_002daptr\">mem-aptr</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">указатель на "
"элемент массива.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#mem_002daref\">mem-aref</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">доступ к "
"значению по индексу в массиве.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#mem_002dref\">mem-ref</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Разименовывает указатель.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#null_002dpointer\">null-"
"pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Возвращает нулево указатель.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#null_002dpointer_002dp"
"\">null-pointer-p</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Проверяет, является ли объект указателем со значением NULL.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#pointerp\">pointerp</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Проверяет "
"является ли объект указателем или нет.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#pointer_002daddress"
"\">pointer-address</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Возвращает адрес, на который указывает указатель.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#pointer_002deq\">pointer-"
"eq</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">провряет, "
"указывают ли два укзателя на один и тот же адрес.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dpointer\">with-foreign-pointer</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">выделяет память с динамическим "
"пространством.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Строки"

#: in/CFFI_User_Manual.htm:402
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#g_t_002adefault_002dforeign_002dencoding_002a\">*default-foreign-"
"encoding*</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Default encoding for the string types.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dstring_002dalloc\">foreign-string-alloc</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Converts a Lisp string to a "
"foreign string.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dstring_002dfree\">foreign-string-free</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Deallocates memory used by a "
"foreign string.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dstring_002dto_002dlisp\">foreign-string-to-lisp</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Converts a foreign "
"string to a Lisp string.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#lisp_002dstring_002dto_002dforeign\">lisp-string-to-foreign</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Copies a Lisp "
"string into a foreign string.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dstring\">with-foreign-string</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Allocates a foreign string with "
"dynamic extent.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dstrings\">with-foreign-strings</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Plural form of <code>with-"
"foreign-string</code>.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dpointer_002das_002dstring\">with-foreign-pointer-as-"
"string</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Similar to CLâs with-output-to-string.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Variables"
msgstr ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#g_t_002adefault_002dforeign_002dencoding_002a\">*default-foreign-"
"encoding*</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Кодировка по умолчанию для строковых типов.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dstring_002dalloc\">foreign-string-alloc</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Преобразует Лисп строку во "
"внешнюю строку.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dstring_002dfree\">foreign-string-free</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Освобождает память используемую "
"внешней строкой.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dstring_002dto_002dlisp\">foreign-string-to-lisp</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Преобразует "
"внешнюю строку в строку Lisp.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#lisp_002dstring_002dto_002dforeign\">lisp-string-to-foreign</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Копирует Lisp "
"строку во внешнюю строку.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dstring\">with-foreign-string</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Выделяет внешнюю строку с "
"динамическим пространством.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dstrings\">with-foreign-strings</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Множественная форма <code>with-"
"foreign-string</code>.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dpointer_002das_002dstring\">with-foreign-pointer-as-"
"string</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Аналогичное использование указателя в качестве строки  для CL with-output-"
"to-string.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Переменные"

#: in/CFFI_User_Manual.htm:409
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href=\"#defcvar"
"\">defcvar</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Defines a C global variable.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#get_002dvar_002dpointer"
"\">get-var-pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Returns a pointer to a defined global variable.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Functions"
msgstr ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href=\"#defcvar"
"\">defcvar</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Определяет глобальную переменную Си.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#get_002dvar_002dpointer"
"\">get-var-pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Возвращает указатель на определенную глобальную переменую.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Functions"

#: in/CFFI_User_Manual.htm:426
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href=\"#defcfun"
"\">defcfun</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Defines a foreign function.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#foreign_002dfuncall"
"\">foreign-funcall</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Performs a call to a foreign function.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dfuncall_002dpointer\">foreign-funcall-pointer</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Performs a call "
"through a foreign pointer.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dcamelcase_002dname\">translate-camelcase-name</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Converts a "
"camelCase foreign name to/from a Lisp name.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dname_002dfrom_002dforeign\">translate-name-from-foreign</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Converts a "
"foreign name to a Lisp name.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dname_002dto_002dforeign\">translate-name-to-foreign</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Converts a Lisp "
"name to a foreign name.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dunderscore_002dseparated_002dname\">translate-underscore-"
"separated-name</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Converts an underscore_separated foreign name to/from a Lisp name.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Libraries"
msgstr ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href=\"#defcfun"
"\">defcfun</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Определяет внешнюю функцию.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#foreign_002dfuncall"
"\">foreign-funcall</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">выполняет вызов внешней функции.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dfuncall_002dpointer\">foreign-funcall-pointer</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">выполняет вызов "
"через внешний указатель.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dcamelcase_002dname\">translate-camelcase-name</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">преобразует "
"внешнее имя camelCase из/в имя Lisp.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dname_002dfrom_002dforeign\">translate-name-from-foreign</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">преобразует "
"внешнее имя в имя Lisp.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dname_002dto_002dforeign\">translate-name-to-foreign</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">преобразует имя "
"Lisp во внешнее имя.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dunderscore_002dseparated_002dname\">translate-underscore-"
"separated-name</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">преобразует внешнее имя с разделением подчеркиваниями в/из имя Lisp.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Библиотеки"

#: in/CFFI_User_Manual.htm:443
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#close_002dforeign_002dlibrary\">close-foreign-library</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Closes a foreign library.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#g_t_002adarwin_002dframework_002ddirectories_002a\">*darwin-framework-"
"directories*</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Search path for Darwin frameworks.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#define_002dforeign_002dlibrary\">define-foreign-library</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Explain how to "
"load a foreign library.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#g_t_002aforeign_002dlibrary_002ddirectories_002a\">*foreign-library-"
"directories*</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Search path for shared libraries.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#load_002dforeign_002dlibrary\">load-foreign-library</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Load a foreign library.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#load_002dforeign_002dlibrary_002derror\">load-foreign-library-error</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Signalled on "
"failure of its namesake.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#use_002dforeign_002dlibrary\">use-foreign-library</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Load a foreign library when "
"needed.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Callbacks"
msgstr ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#close_002dforeign_002dlibrary\">close-foreign-library</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Закрывает внешнюю библиотеку.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#g_t_002adarwin_002dframework_002ddirectories_002a\">*darwin-framework-"
"directories*</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Путь поиска для Darwin frameworks.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#define_002dforeign_002dlibrary\">define-foreign-library</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Объясняет, как "
"загружать стороннюю библиотеку.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#g_t_002aforeign_002dlibrary_002ddirectories_002a\">*foreign-library-"
"directories*</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Путь поиска разделяемых(общих) библиотек.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#load_002dforeign_002dlibrary\">load-foreign-library</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Загрузка внешней библиотеки.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#load_002dforeign_002dlibrary_002derror\">load-foreign-library-error</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">сообщает о сбое "
"при загрузке библиотеки.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#use_002dforeign_002dlibrary\">use-foreign-library</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">при необходимости загружает "
"внешнюю библиотеку.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Обратные вызовы"

#: in/CFFI_User_Manual.htm:452
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href=\"#callback"
"\">callback</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Returns a pointer to a defined callback.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcallback"
"\">defcallback</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Defines a Lisp callback.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#get_002dcallback\">get-"
"callback</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Returns a pointer to a defined callback.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"</pre></th></tr></tbody></table>"
msgstr ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href=\"#callback"
"\">callback</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Возвращает указатель на определенный обратный вызов.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcallback"
"\">defcallback</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Определяет обратный вызов Lisp.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#get_002dcallback\">get-"
"callback</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Возвращает укаазтель на определенный обратный вызов.\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"</pre></th></tr></tbody></table>"

#: in/CFFI_User_Manual.htm:465
msgid ""
"<hr>\n"
"<a name=\"Introduction\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Installation\" accesskey=\"n\" rel=\"next\">Installation</"
"a>, Previous: <a href=\"#Top\" accesskey=\"p\" rel=\"prev\">Top</a>, Up: <a "
"href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Introduction-1\"></a>\n"
"<h2 class=\"chapter\">1 Introduction</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Introduction\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Installation\" accesskey=\"n\" rel=\"next\">Installation</"
"a>, Previous: <a href=\"#Top\" accesskey=\"p\" rel=\"prev\">Top</a>, Up: <a "
"href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Introduction-1\"></a>\n"
"<h2 class=\"chapter\">1 Введение</h2>"

#: in/CFFI_User_Manual.htm:478
msgid ""
"<p><acronym>CFFI</acronym> is the Common Foreign Function Interface for "
"<acronym>ANSI</acronym>\n"
"Common Lisp systems.  By <em>foreign function</em> we mean a function\n"
"written in another programming language and having different data and\n"
"calling conventions than Common Lisp, namely, C.  <acronym>CFFI</acronym> "
"allows you\n"
"to call foreign functions and access foreign variables, all without\n"
"leaving the Lisp image.\n"
"</p>\n"
"<p>We consider this manual ever a work in progress.  If you have\n"
"difficulty with anything <acronym>CFFI</acronym>-specific presented in the "
"manual,\n"
"please contact <a href=\"mailto:cffi-devel@common-lisp.net\">the developers</"
"a> with\n"
"details.\n"
"</p>"
msgstr ""
"<p><acronym>CFFI</acronym> это общий интерфейс к внешним функциям(Common "
"Foreign Function Interface)\n"
"для систем <acronym>ANSI</acronym> Common Lisp.  Под внешней "
"функцией(<em>foreign function</em>)\n"
"мы подразумеваем функцию, написанную на другом языке программирования и \n"
"имеющую другие данные и соглашения о вызыовах, чем Common Lisp, а именно "
"Си  \n"
"<acronym>CFFI</acronym> позволяет вам вызывать внешние функции и получать "
"доступ к \n"
"внешним переменным и все это, не выходя из образа Lisp.\n"
"</p>\n"
"<p>Мы считаем, что это руководство находится в стадии разработки. Если у вас "
"возникли\n"
"трудности с чем либо  <acronym>CFFI</acronym>-специфичным, представленным в\n"
"этом руководстве, пожалуйста свяжитесь с разработчиками <a href=\"mailto:"
"cffi-devel@common-lisp.net\"></a> \n"
"для получения подробной информации.\n"
"</p>"

#: in/CFFI_User_Manual.htm:481
msgid ""
"<a name=\"Motivation\"></a>\n"
"<h3 class=\"heading\">Motivation</h3>"
msgstr ""
"<a name=\"Motivation\"></a>\n"
"<h3 class=\"heading\">Мотивация</h3>"

#: in/CFFI_User_Manual.htm:493
msgid ""
"<p>See <a href=\"#Tutorial_002dComparison\">What makes Lisp different</a>, "
"for\n"
"an argument in favor of <acronym>FFI</acronym> in general.\n"
"</p>\n"
"<p><acronym>CFFI</acronym>âs primary role in any image is to mediate between "
"Lisp\n"
"developers and the widely varying <acronym>FFI</acronym>s present in the\n"
"various Lisp implementations it supports.  With <acronym>CFFI</acronym>, you "
"can\n"
"define foreign function interfaces while still maintaining portability\n"
"between implementations.  It is not the first Common Lisp package with\n"
"this objective; however, it is meant to be a more malleable framework\n"
"than similar packages.\n"
"</p>"
msgstr ""
"<p>См. <a href=\"#Tutorial_002dComparison\">Что делает Lisp особенным</a>, "
"для\n"
"аргументации в пользу <acronym>FFI</acronym> в целом.\n"
"</p>\n"
"<p>Основная роль <acronym>CFFI</acronym> в любом образе - это посредничество "
"между\n"
"разработчиками Lisp и широко варьирующимися <acronym>FFI</acronym>, "
"присутствующими\n"
"в различных реализациях Lisp, которые он поддерживает.  С <acronym>CFFI</"
"acronym>, вы\n"
"можете определять интерфейсы сторонних функций, сохраняя при этом "
"переносимость между\n"
"реализациями. Это не первый пакет Common Lisp разработанный с этой целью, "
"тем не менее,\n"
"он должен быть более гибким, чем подобные пакеты.\n"
"</p>"

#: in/CFFI_User_Manual.htm:496
msgid ""
"<a name=\"Design-Philosophy\"></a>\n"
"<h3 class=\"heading\">Design Philosophy</h3>"
msgstr ""
"<a name=\"Design-Philosophy\"></a>\n"
"<h3 class=\"heading\">Философия Разработки</h3>"

#: in/CFFI_User_Manual.htm:500
msgid ""
"<ul>\n"
"<li> Pointers do not carry around type information. Instead, type\n"
"information is supplied when pointers are dereferenced."
msgstr ""
"<ul>\n"
"<li> Указатели не несут информацию о типе. Вместо этого информация о типе\n"
"предоставляется, когда указатели разименовываются."

#: in/CFFI_User_Manual.htm:503
msgid ""
"</li><li> A type safe pointer interface can be developed on top of an\n"
"untyped one.  It is difficult to do the opposite."
msgstr ""
"</li><li> Интерфейс безопасного типизированного указателя может быть "
"разработан поверх\n"
"нетипизированного.  Трудно сделать наоборот."

#: in/CFFI_User_Manual.htm:507
msgid ""
"</li><li> Functions are better than macros.  When a macro could be used\n"
"for performance, use a compiler-macro instead.\n"
"</li></ul>"
msgstr ""
"</li><li> Функции лучше чем маркосы.  Когда макрос может использоваться для\n"
"производительности, используйте вместо этого макрос компилятора.\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:518
msgid ""
"<hr>\n"
"<a name=\"Installation\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Implementation-Support\" accesskey=\"n\" rel=\"next"
"\">Implementation Support</a>, Previous: <a href=\"#Introduction\" accesskey="
"\"p\" rel=\"prev\">Introduction</a>, Up: <a href=\"#Top\" accesskey=\"u\" "
"rel=\"up\">Top</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Installation-1\"></a>\n"
"<h2 class=\"chapter\">2 Installation</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Installation\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Implementation-Support\" accesskey=\"n\" rel=\"next"
"\">Implementation Support</a>, Previous: <a href=\"#Introduction\" accesskey="
"\"p\" rel=\"prev\">Introduction</a>, Up: <a href=\"#Top\" accesskey=\"u\" "
"rel=\"up\">Top</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Installation-1\"></a>\n"
"<h2 class=\"chapter\">2 Инсталяция</h2>"

#: in/CFFI_User_Manual.htm:525
msgid ""
"<p><acronym>CFFI</acronym> can be obtained through one of the following "
"means available\n"
"through its <a href=\"http://common-lisp.net/project/cffi/\">website</a>:\n"
"</p>\n"
"<ul>\n"
"<li> <a href=\"http://common-lisp.net/project/cffi/releases/?M=D\">official "
"release\n"
"tarballs</a>"
msgstr ""
"<p><acronym>CFFI</acronym> можно получить одним из следующих способов "
"доступных\n"
"на его  <a href=\"http://common-lisp.net/project/cffi/\">website</a>:\n"
"</p>\n"
"<ul>\n"
"<li> <a href=\"http://common-lisp.net/project/cffi/releases/?M=D\">архив "
"официального релиза</a>"

#: in/CFFI_User_Manual.htm:528
msgid ""
"</li><li> <a href=\"http://common-lisp.net/gitweb?p=projects/cffi/cffi.git"
"\">git\n"
"repository</a>"
msgstr ""
"</li><li> <a href=\"http://common-lisp.net/gitweb?p=projects/cffi/cffi.git"
"\">git репозиторий</a>"

#: in/CFFI_User_Manual.htm:531
msgctxt "in/CFFI_User_Manual.htm:531"
msgid "</li></ul>"
msgstr ""

#: in/CFFI_User_Manual.htm:538
msgid ""
"<p>In addition, you will need to obtain and install the following\n"
"dependencies:\n"
"</p>\n"
"<ul>\n"
"<li> <a href=\"http://common-lisp.net/project/babel/\">Babel</a>, a charset\n"
"encoding/decoding library."
msgstr ""
"<p>Кроме того, вам необходимо получить и усатновить следующие зависимости:\n"
"</p>\n"
"<ul>\n"
"<li> <a href=\"http://common-lisp.net/project/babel/\">Babel</a>, "
"библиотека\n"
"кодирования/декодирования наборов символов."

#: in/CFFI_User_Manual.htm:541
msgid ""
"</li><li> <a href=\"http://common-lisp.net/project/alexandria/\">Alexandria</"
"a>, a\n"
"collection of portable public-domain utilities."
msgstr ""
"</li><li> <a href=\"http://common-lisp.net/project/alexandria/\">Alexandria</"
"a>, \n"
"коллекция переносимых утилит общего достояния."

#: in/CFFI_User_Manual.htm:545
msgid ""
"</li><li> <a href=\"http://www.cliki.net/trivial-features\">trivial-"
"features</a>, a\n"
"portability layer that ensures consistent <code>*features*</code> across\n"
"multiple Common Lisp implementations."
msgstr ""
"</li><li> <a href=\"http://www.cliki.net/trivial-features\">trivial-"
"features</a>, \n"
"уровень преносимомсти, для обеспечениия согласованности <code>*features*</"
"code> \n"
"множества нескольких реализаций Common Lisp."

#: in/CFFI_User_Manual.htm:547
msgctxt "in/CFFI_User_Manual.htm:547"
msgid "</li></ul>"
msgstr ""

#: in/CFFI_User_Manual.htm:557
msgid ""
"<p>Furthermore, if you wish to run the testsuite,\n"
"<a href=\"http://www.cliki.net/rt\">RT</a> is required.\n"
"</p>\n"
"<p>You may find mechanisms such as\n"
"<a href=\"https://www.quicklisp.org/beta/\">Quicklisp</a> (recommended)\n"
"or <a href=\"http://common-lisp.net/project/clbuild/\">clbuild</a> (for "
"advanced\n"
"uses) helpful in getting and managing <acronym>CFFI</acronym> and its\n"
"dependencies.\n"
"</p>"
msgstr ""
"<p>Кроме того, если вы хотите запустить набор тестов(testsuite), требуется,\n"
"<a href=\"http://www.cliki.net/rt\">RT</a>.\n"
"</p>\n"
"<p>Вы можете найти механизмы, такие как\n"
"<a href=\"https://www.quicklisp.org/beta/\">Quicklisp</a> (рекомендуем)\n"
"или <a href=\"http://common-lisp.net/project/clbuild/\">clbuild</a> (для "
"продвинутых\n"
"пользователей), полезные для получения и управления <acronym>CFFI</acronym> "
"и его\n"
"зависимостями.\n"
"</p>"

#: in/CFFI_User_Manual.htm:567
msgid ""
"<hr>\n"
"<a name=\"Implementation-Support\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial\" accesskey=\"n\" rel=\"next\">Tutorial</a>, "
"Previous: <a href=\"#Installation\" accesskey=\"p\" rel=\"prev"
"\">Installation</a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> "
"&nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Implementation-Support-1\"></a>\n"
"<h2 class=\"chapter\">3 Implementation Support</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Implementation-Support\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial\" accesskey=\"n\" rel=\"next\">Tutorial</a>, "
"Previous: <a href=\"#Installation\" accesskey=\"p\" rel=\"prev"
"\">Installation</a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> "
"&nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Implementation-Support-1\"></a>\n"
"<h2 class=\"chapter\">3 Поддерживаемые реализации</h2>"

#: in/CFFI_User_Manual.htm:581
msgid ""
"<p><acronym>CFFI</acronym> supports various free and commercial Lisp "
"implementations:\n"
"<acronym>ABCL</acronym>, Allegro CL, Clasp, <small>CLISP</small>, Clozure "
"CL,\n"
"<acronym>CMUCL</acronym>, Corman CL, <acronym>ECL</acronym>, <acronym>GCL</"
"acronym>, LispWorks,\n"
"<acronym>MCL</acronym>, <acronym>SBCL</acronym> and the Scieneer CL.\n"
"</p>\n"
"<p>In general, you should work with the latest versions of each\n"
"implementation since those will usually be tested against recent\n"
"versions of CFFI more often and might include necessary features or\n"
"bug fixes. Reasonable patches for compatibility with earlier versions\n"
"are welcome nevertheless.\n"
"</p>\n"
"<a name=\"Limitations-1\"></a>\n"
"<h3 class=\"section\">3.1 Limitations</h3>"
msgstr ""
"<p><acronym>CFFI</acronym> поддерживает различные бесплатные и комерческие "
"реализации:\n"
"<acronym>ABCL</acronym>, Allegro CL, Clasp, <small>CLISP</small>, Clozure "
"CL,\n"
"<acronym>CMUCL</acronym>, Corman CL, <acronym>ECL</acronym>, <acronym>GCL</"
"acronym>, LispWorks,\n"
"<acronym>MCL</acronym>, <acronym>SBCL</acronym> и  Scieneer CL.\n"
"</p>\n"
"<p>В общем, вам следует работать с последними версиями каждой реализации,\n"
"поскольку они обычно будут чаще тестироваться на последних версиях CFFI \n"
"и могут включать необходимые функции или исправления ошибок. Разумные патчи\n"
"для совместимости с более ранними версиями - приветствуются.\n"
"</p>\n"
"<a name=\"Limitations-1\"></a>\n"
"<h3 class=\"section\">3.1 Ограничения</h3>"

#: in/CFFI_User_Manual.htm:586
msgid ""
"<p>Some features are not supported in all implementations.\n"
"</p>\n"
"<a name=\"Allegro-CL\"></a>\n"
"<h4 class=\"subheading\">Allegro CL</h4>"
msgstr ""
"<p>Некоторые функции поддерживаются не во всех реализациях.\n"
"</p>\n"
"<a name=\"Allegro-CL\"></a>\n"
"<h4 class=\"subheading\">Allegro CL</h4>"

#: in/CFFI_User_Manual.htm:592
msgid ""
"<ul>\n"
"<li> Does not support the <code>:long-long</code> type natively.\n"
"</li><li> Unicode support is limited to the Basic Multilingual Plane (16-"
"bit\n"
"code points).\n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li> Не поддерживается родной тип <code>:long-long</code>.\n"
"</li><li> Поддержка юникода ограничена базовым многоязычным уровнем (16-bit\n"
"кодовые точки).\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:595
msgid ""
"<a name=\"Clasp\"></a>\n"
"<h4 class=\"subheading\">Clasp</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:599
msgid ""
"<ul>\n"
"<li> Only supports a flat namespace.\n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li> Поддерживает только плоское пространство имен.\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:602
msgid ""
"<a name=\"CMUCL\"></a>\n"
"<h4 class=\"subheading\">CMUCL</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:606
msgid ""
"<ul>\n"
"<li> No Unicode support. (8-bit code points)\n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li> Нет поддержки юникода. (8-bit кодовые точки)\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:609
msgid ""
"<a name=\"Corman-CL\"></a>\n"
"<h4 class=\"subheading\">Corman CL</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:613
msgid ""
"<ul>\n"
"<li> Does not support <code>foreign-funcall</code>.\n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li> Не поддерживает <code>foreign-funcall</code>.\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:616
msgid ""
"<a name=\"ECL\"></a>\n"
"<h4 class=\"subheading\"><acronym>ECL</acronym></h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:623
msgid ""
"<ul>\n"
"<li> On platforms where ECLâs dynamic FFI is not supported (ie. when\n"
"<code>:dffi</code> is not present in <code>*features*</code>),\n"
"<code>cffi:load-foreign-library</code> does not work and you must use ECLâs\n"
"own <code>ffi:load-foreign-library</code> with a constant string argument.\n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li> На платформах, где  ECL динамическая FFI не поддерживается (например, "
"когда\n"
"<code>:dffi</code> отсутствует в <code>*features*</code>),\n"
"<code>cffi:load-foreign-library</code> не работает и вы должны использовать "
"ECL\n"
"<code>ffi:load-foreign-library</code> с константным строковым аргументом.\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:626
msgid ""
"<a name=\"Lispworks\"></a>\n"
"<h4 class=\"subheading\">Lispworks</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:633
msgid ""
"<ul>\n"
"<li> Does not completely support the <code>:long-long</code> type natively "
"in\n"
"32-bit platforms.\n"
"</li><li> Unicode support is limited to the Basic Multilingual Plane (16-"
"bit\n"
"code points).\n"
"</li></ul>"
msgstr ""
"<ul>\n"
"<li> Не полностью поддерживает родной тип <code>:long-long</code> на \n"
"32-bit платформах.\n"
"</li><li> Поддержка юникода ограничена базовым многоязычным уровнем (16-bit\n"
"кодовые точки).\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:636
msgid ""
"<a name=\"SBCL\"></a>\n"
"<h4 class=\"subheading\"><acronym>SBCL</acronym></h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:639
msgid ""
"<ul>\n"
"<li> Not all platforms support callbacks."
msgstr ""
"<ul>\n"
"<li> Не все платформы поддерживают обратные вызовы."

#: in/CFFI_User_Manual.htm:641
msgctxt "in/CFFI_User_Manual.htm:641"
msgid "</li></ul>"
msgstr ""

#: in/CFFI_User_Manual.htm:655
msgid ""
"<hr>\n"
"<a name=\"Tutorial\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Wrapper-generators\" accesskey=\"n\" rel=\"next\">Wrapper "
"generators</a>, Previous: <a href=\"#Implementation-Support\" accesskey=\"p"
"\" rel=\"prev\">Implementation Support</a>, Up: <a href=\"#Top\" accesskey="
"\"u\" rel=\"up\">Top</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"An-Introduction-to-Foreign-Interfaces-and-CFFI\"></a>\n"
"<h2 class=\"chapter\">4 An Introduction to Foreign Interfaces and "
"<acronym>CFFI</acronym></h2>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Wrapper-generators\" accesskey=\"n\" rel=\"next\">Wrapper "
"generators</a>, Previous: <a href=\"#Implementation-Support\" accesskey=\"p"
"\" rel=\"prev\">Implementation Support</a>, Up: <a href=\"#Top\" accesskey="
"\"u\" rel=\"up\">Top</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"An-Introduction-to-Foreign-Interfaces-and-CFFI\"></a>\n"
"<h2 class=\"chapter\">4 Введение во внешние интерфейсы и <acronym>CFFI</"
"acronym></h2>"

#: in/CFFI_User_Manual.htm:702
msgid ""
"<a name=\"index-tutorial_002c-CFFI\"></a>\n"
"<p>Users of many popular languages bearing semantic similarity to Lisp,\n"
"such as Perl and Python, are accustomed to having access to popular C\n"
"libraries, such as <acronym>GTK</acronym>, by way of âbindingsâ.  In Lisp, "
"we\n"
"do something similar, but take a fundamentally different approach.\n"
"This tutorial first explains this difference, then explains how you\n"
"can use <acronym>CFFI</acronym>, a powerful system for calling out to C and C"
"++ and\n"
"access C data from many Common Lisp implementations.\n"
"</p>\n"
"<a name=\"index-foreign-functions-and-data\"></a>\n"
"<p>The concept can be generalized to other languages; at the time of\n"
"writing, only <acronym>CFFI</acronym>âs C support is fairly complete. "
"Therefore, we\n"
"will interchangeably refer to <em>foreign functions</em> and <em>foreign\n"
"data</em>, and âC functionsâ and âC dataâ.  At no time will the word\n"
"âforeignâ carry its usual, non-programming meaning.\n"
"</p>\n"
"<p>This tutorial expects you to have a working understanding of both\n"
"Common Lisp and C, including the Common Lisp macro system.\n"
"</p>\n"
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#Tutorial_002dComparison\" accesskey=\"1\">Tutorial-Comparison</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Why FFI?\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dGetting-a-"
"URL\" accesskey=\"2\">Tutorial-Getting a URL</a>:</td><td>&nbsp;&nbsp;</"
"td><td valign=\"top\" align=\"left\">An FFI use case.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dLoading\" "
"accesskey=\"3\">Tutorial-Loading</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">Load libcurl.so.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dInitializing"
"\" accesskey=\"4\">Tutorial-Initializing</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">Call a function in libcurl.so.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#Tutorial_002deasy_005fsetopt\" accesskey=\"5\">Tutorial-easy_setopt</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">An advanced "
"libcurl function.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dAbstraction"
"\" accesskey=\"6\">Tutorial-Abstraction</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">Why breaking it is necessary.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dLisp-"
"easy_005fsetopt\" accesskey=\"7\">Tutorial-Lisp easy_setopt</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Semi-Lispy option "
"interface.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dMemory\" "
"accesskey=\"8\">Tutorial-Memory</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">In C, you collect the garbage.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dCallbacks\" "
"accesskey=\"9\">Tutorial-Callbacks</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">Make useful C function pointers.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dCompletion"
"\">Tutorial-Completion</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">Minimal get-url functionality.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dTypes"
"\">Tutorial-Types</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Defining new foreign types.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dConclusion"
"\">Tutorial-Conclusion</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">Whatâs next?\n"
"</td></tr>\n"
"</tbody></table>"
msgstr ""
"<a name=\"index-tutorial_002c-CFFI\"></a>\n"
"<p>Пользователи многих популярных языков, имеющих семантическое сходство с "
"Lisp,\n"
"таких как Perl и Python, привыкли иметь доступ к популярным Си "
"библиотекам, \n"
"таким как <acronym>GTK</acronym>, посредством âпривязок(биндингов)â.  В "
"Lisp, \n"
"мы делаем нечто подобное, но применяем принципиально другой подход. Это "
"руководство\n"
"сначала объясняет эту разницу, а затем объясняет, как вы можете "
"использовать\n"
"<acronym>CFFI</acronym>, мощную систему для вызова C и C++ и доступа к "
"данным\n"
"Си из многих реализаций Common Lisp.\n"
"</p>\n"
"<a name=\"index-foreign-functions-and-data\"></a>\n"
"<p>Концепция может быть обобщена на другие языки; на момент написания,\n"
"завершена только  <acronym>CFFI</acronym>âs поддерживающая Си. Поэтому\n"
"мы будем взаимозаменяемо ссылаться на внешние функции( <em>foreign "
"functions</em>) \n"
"и внешние данные(<em>foreign data</em>), как на си функции и си данные.  "
"Слово\n"
"âвнешнийâ никогда не будет иметь своего обычного, не программного смысла.\n"
"</p>\n"
"<p>В этом руководстве пердполагается, что вы хорошо разбираетесь в\n"
"Common Lisp и Си, включая макросистему Common Lisp.\n"
"</p>\n"
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#Tutorial_002dComparison\" accesskey=\"1\">Tutorial-Comparison</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Почему FFI?\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dGetting-a-"
"URL\" accesskey=\"2\">Tutorial-Getting a URL</a>:</td><td>&nbsp;&nbsp;</"
"td><td valign=\"top\" align=\"left\">Варианты использования FFI.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dLoading\" "
"accesskey=\"3\">Tutorial-Loading</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">Загрузка libcurl.so.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dInitializing"
"\" accesskey=\"4\">Tutorial-Initializing</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">Вызов функции из libcurl.so.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#Tutorial_002deasy_005fsetopt\" accesskey=\"5\">Tutorial-easy_setopt</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">расширенная "
"функция libcurl.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dAbstraction"
"\" accesskey=\"6\">Tutorial-Abstraction</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">зачем его ломать.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dLisp-"
"easy_005fsetopt\" accesskey=\"7\">Tutorial-Lisp easy_setopt</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">интерфейс полу-"
"Lisp(ийских) опций.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dMemory\" "
"accesskey=\"8\">Tutorial-Memory</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">в Си вы убираете мусор.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dCallbacks\" "
"accesskey=\"9\">Tutorial-Callbacks</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">Создание полезных указателей на функции Си.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dCompletion"
"\">Tutorial-Completion</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">Минимальная функциональность get-url.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dTypes"
"\">Tutorial-Types</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">Определенение новых внешних типов.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Tutorial_002dConclusion"
"\">Tutorial-Conclusion</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">Что дальше?\n"
"</td></tr>\n"
"</tbody></table>"

#: in/CFFI_User_Manual.htm:712
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002dComparison\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dGetting-a-URL\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Getting a URL</a>, Previous: <a href=\"#Tutorial\" accesskey=\"p"
"\" rel=\"prev\">Tutorial</a>, Up: <a href=\"#Tutorial\" accesskey=\"u\" rel="
"\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"What-makes-Lisp-different\"></a>\n"
"<h3 class=\"section\">4.1 What makes Lisp different</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002dComparison\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dGetting-a-URL\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Getting a URL</a>, Previous: <a href=\"#Tutorial\" accesskey=\"p"
"\" rel=\"prev\">Tutorial</a>, Up: <a href=\"#Tutorial\" accesskey=\"u\" rel="
"\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"What-makes-Lisp-different\"></a>\n"
"<h3 class=\"section\">4.1 Что делает Lisp особенным</h3>"

#: in/CFFI_User_Manual.htm:740
msgid ""
"<p>The following sums up how bindings to foreign libraries are usually\n"
"implemented in other languages, then in Common Lisp:\n"
"</p>\n"
"<dl compact=\"compact\">\n"
"<dt>Perl, Python, Java, other one-implementation languages</dt>\n"
"<dd><a name=\"index-SWIG\"></a>\n"
"<a name=\"index-Perl\"></a>\n"
"<a name=\"index-Python\"></a>\n"
"<p>Bindings are implemented as shared objects written in C.  In some\n"
"cases, the C code is generated by a tool, such as <acronym>SWIG</acronym>, "
"but\n"
"the result is the same: a new C library that manually translates\n"
"between the language implementationâs objects, such as <code>PyObject</"
"code>\n"
"in Python, and whatever C object is called for, often using C\n"
"functions provided by the implementation.  It also translates between\n"
"the calling conventions of the language and C.\n"
"</p>\n"
"</dd>\n"
"<dt>Common Lisp</dt>\n"
"<dd><a name=\"index-SLIME\"></a>\n"
"<p>Bindings are written in Lisp.  They can be created at-will by Lisp\n"
"programs.  Lisp programmers can write new bindings and add them to the\n"
"image, using a listener such as <acronym>SLIME</acronym>, as easily as with\n"
"regular Lisp definitions.  The only foreign library to load is the one\n"
"being wrappedâthe one with the pure C interface; no C or other\n"
"non-Lisp compilation is required.\n"
"</p></dd>\n"
"</dl>"
msgstr ""
"<p>Ниже показано, как привязки к внешним библиотекам обычно реализуются на "
"других языках,\n"
"а затем как в Common Lisp:\n"
"</p>\n"
"<dl compact=\"compact\">\n"
"<dt>Perl, Python, Java, и другие языки с одной реализацией</dt>\n"
"<dd><a name=\"index-SWIG\"></a>\n"
"<a name=\"index-Perl\"></a>\n"
"<a name=\"index-Python\"></a>\n"
"<p>Привязки реализуются как общие объекты, написанные на Си.  В некоторых\n"
"случаях, код Си генерируется инструментом, таким как <acronym>SWIG</"
"acronym>, но\n"
"результат тот же: новая Си библиотека которая вручную переводит между "
"объектами\n"
"языковой реализации, такими как <code>PyObject</code>\n"
"на  Python, и независимо от того, к какому объекту Си обращаются, часто "
"используя\n"
"функции Си предоставляемые реализацией.  Она также проводит преобразование "
"между\n"
"соглашениями о вызовах между языком и Си\n"
"</p>\n"
"</dd>\n"
"<dt>Common Lisp</dt>\n"
"<dd><a name=\"index-SLIME\"></a>\n"
"<p>Привязки написанные на Lisp.  Они могут быть созданы по желанию \n"
"программ Lisp. Программисты Lisp могут писать новые привязки и добавлять их "
"в\n"
"образ, используя \"слушателя\", такого как <acronym>SLIME</acronym>, так же "
"легко,\n"
"как и с обычными определениями Lisp.  Только внешняя библиотека, "
"загружается\n"
"без обертки, т.е только та которая имеет исходный Си интерфейс, не "
"требуется \n"
"компиляция Си или других не-Lisp программ-оберток.\n"
"</p></dd>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:791
msgid ""
"<a name=\"index-advantages-of-FFI\"></a>\n"
"<a name=\"index-benefits-of-FFI\"></a>\n"
"<p>We believe the advantages of the Common Lisp approach far outweigh any\n"
"disadvantages.  Incremental development with a listener can be as\n"
"productive for C binding development as it is with other Lisp\n"
"development.  Keeping it âin the [Lisp] familyâ, as it were, makes\n"
"it much easier for you and other Lisp programmers to load and use the\n"
"bindings.  Common Lisp implementations such as <acronym>CMUCL</acronym>, "
"freed\n"
"from having to provide a C interface to their own objects, are thus\n"
"freed to be implemented in another language (as <acronym>CMUCL</acronym> "
"is)\n"
"while still allowing programmers to call foreign functions.\n"
"</p>\n"
"<a name=\"index-minimal-bindings\"></a>\n"
"<p>Perhaps the greatest advantage is that using an <acronym>FFI</acronym> "
"doesnât\n"
"obligate you to become a professional binding developer.  Writers of\n"
"bindings for other languages usually end up maintaining or failing to\n"
"maintain complete bindings to the foreign library.  Using an\n"
"<acronym>FFI</acronym>, however, means if you only need one or two "
"functions,\n"
"you can write bindings for only those functions, and be assured that\n"
"you can just as easily add to the bindings if need be.\n"
"</p>\n"
"<a name=\"index-C-abstractions\"></a>\n"
"<a name=\"index-abstractions-in-C\"></a>\n"
"<p>The removal of the C compiler, or C interpretation of any kind,\n"
"creates the main disadvantage: some of Câs âabstractionsâ are not\n"
"available, violating information encapsulation.  For example,\n"
"<code>struct</code>s that must be passed on the stack, or used as return\n"
"values, without corresponding functional abstractions to create and\n"
"manage the <code>struct</code>s, must be declared explicitly in Lisp.  This\n"
"is fine for structs whose contents are âpublicâ, but is not so\n"
"pleasant when a struct is supposed to be âopaqueâ by convention,\n"
"even though it is not so defined.<a name=\"DOCF1\" href=\"#FOOT1\"><sup>1</"
"sup></a>\n"
"</p>\n"
"<p>Without an abstraction to create the struct, Lisp needs to be able to\n"
"lay out the struct in memory, so must know its internal details.\n"
"</p>\n"
"<a name=\"index-workaround-for-C\"></a>\n"
"<p>In these cases, you can create a minimal C library to provide the\n"
"missing abstractions, without destroying all the advantages of the\n"
"Common Lisp approach discussed above.  In the case of <code>struct</code>s,\n"
"you can write simple, pure C functions that tell you how many bytes a\n"
"struct requires or allocate new structs, read and write fields of the\n"
"struct, or whatever operations are supposed to be\n"
"public.<a name=\"DOCF2\" href=\"#FOOT2\"><sup>2</sup></a>\n"
"<a href=\"#The-Groveller\">The Groveller</a> automates this and other "
"processes.\n"
"</p>\n"
"<p>Another disadvantage appears when you would rather use the foreign\n"
"language than Lisp.  However, someone who prefers C to Lisp is not a\n"
"likely candidate for developing a Lisp interface to a C library.\n"
"</p>"
msgstr ""
"<a name=\"index-advantages-of-FFI\"></a>\n"
"<a name=\"index-benefits-of-FFI\"></a>\n"
"<p>Мы считаем, что преимущества подхода Common Lisp намного перевешивают "
"любые\n"
"недостатки.  Инкрементальная разработка со \"слушателем\" может быть столь "
"же\n"
"продуктивной и для разработки Си биндингов, как и с другими разработками на\n"
"Lisp.  Сохранение его(биндинга) âв семействе [Lisp]â, как бы облегчает\n"
"вам и другим программистам Lisp загрузку и использование биндингов.  \n"
"Таким образом, обычные реализации Common Lisp, такие как <acronym>CMUCL</"
"acronym>, \n"
"особождаются от необходимости предоставлять Си интефрейс для своих "
"собственных\n"
"объектов, и могут быть реализованы на другом языке (как в <acronym>CMUCL</"
"acronym>)\n"
"в то же время позволяя программистам вызывать внешние функции.\n"
"</p>\n"
"<a name=\"index-minimal-bindings\"></a>\n"
"<p>Возможно, самое большое преимущество заключается в том, что "
"использование\n"
" <acronym>FFI</acronym> не обязывает вас становиться профессиональным\n"
"разработчиком биндингов.  Создатели привязок для других языков обычно "
"заканчивают\n"
"тем, что поддерживают или не поддерживают полные привязки к внешней "
"библиотеке.  \n"
"Использование <acronym>FFI</acronym>, однако, означает, что если вам нужна "
"только\n"
"одна или две функции, вы можете, написать привязки только для этих функций и "
"быть\n"
"уверенными, что вы можете так же легко добавлять привязки, если это "
"необходимо.\n"
"</p>\n"
"<a name=\"index-C-abstractions\"></a>\n"
"<a name=\"index-abstractions-in-C\"></a>\n"
"<p>Удаление Си компилятора или любой дргуой Си интерпретации создает главный "
"недостаток,\n"
"некоторые Си из âабстракцииâ становятся недоступными, что нарушает "
"инкапсуляцию \n"
"информации.  Например, <code>struct</code> которые должны быть переданы в "
"стек, или\n"
"использованы в качестве возвращаемых значений без соответствующих "
"функциональных абстракций\n"
"для создания и управления структурами(<code>struct</code>), должны быть явно "
"объявлены в Lisp.\n"
"Это хорошо для структур(struct) содержимое которых является âпубличнымâ, но "
"не очень\n"
"приятно, когда структура считается по соглашению не прозрачной(âopaqueâ),\n"
"даже если она так не определена.<a name=\"DOCF1\" href=\"#FOOT1\"><sup>1</"
"sup></a>\n"
"</p>\n"
"<p>Без абстракции для создания структуры Lisp должен иметь возможность "
"размещать структуру в\n"
"памяти, поэтому должен знать ее внутренние детали.\n"
"</p>\n"
"<a name=\"index-workaround-for-C\"></a>\n"
"<p>В этих случаях, вы можете создать минимальную Си библиотеку для "
"предоставления\n"
"отсутствующих абстракций, не разрушая все преимущства подхода\n"
"Common Lisp, рассмотренного выше.  В случае структур(<code>struct</code>),\n"
"вы можете написать простые, чистые функции C, которые сообщат вам, сколько "
"байтов требуется\n"
"структуре, или выделять новые структуры, читать и записывать поля структуры "
"или любые\n"
"другие операции, которые должны быть общедоступными.\n"
"<a name=\"DOCF2\" href=\"#FOOT2\"><sup>2</sup></a>\n"
"<a href=\"#The-Groveller\">The Groveller</a> автоматизирует этот процесс.\n"
"</p>\n"
"<p>Другой недостаток возникает, когда вы предпочитаете испольозвать\n"
"внешний язык, а не Lisp.  Однако, тот, кто предпочитает Си Лиспу, не \n"
"является вероятным кандидатом на разработку интерфейса Lisp для Си "
"библиотеки.\n"
"</p>"

#: in/CFFI_User_Manual.htm:800
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002dGetting-a-URL\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dLoading\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Loading</a>, Previous: <a href=\"#Tutorial_002dComparison\" "
"accesskey=\"p\" rel=\"prev\">Tutorial-Comparison</a>, Up: <a href=\"#Tutorial"
"\" accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Getting-a-URL\"></a>\n"
"<h3 class=\"section\">4.2 Getting a <acronym>URL</acronym></h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002dGetting-a-URL\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dLoading\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Loading</a>, Previous: <a href=\"#Tutorial_002dComparison\" "
"accesskey=\"p\" rel=\"prev\">Tutorial-Comparison</a>, Up: <a href=\"#Tutorial"
"\" accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Getting-a-URL\"></a>\n"
"<h3 class=\"section\">4.2 Получение <acronym>URL</acronym></h3>"

#: in/CFFI_User_Manual.htm:820
msgid ""
"<a name=\"index-cURL\"></a>\n"
"<p>The widely available <code>libcurl</code> is a library for downloading "
"files\n"
"over protocols like <acronym>HTTP</acronym>.  We will use <code>libcurl</"
"code> with\n"
"<acronym>CFFI</acronym> to download a web page.\n"
"</p>\n"
"<p>Please note that there are many other ways to download files from the\n"
"web, not least the <small>CL-CURL</small> project to provide bindings to\n"
"<code>libcurl</code> via a similar <acronym>FFI</acronym>.<a name=\"DOCF3\" "
"href=\"#FOOT3\"><sup>3</sup></a>\n"
"</p>\n"
"<p><a href=\"http://curl.haxx.se/libcurl/c/libcurl-tutorial.html\">libcurl-"
"tutorial(3)</a>\n"
"is a tutorial for <code>libcurl</code> programming in C.  We will follow\n"
"that to develop a binding to download a file.  We will also use\n"
"<samp>curl.h</samp>, <samp>easy.h</samp>, and the <code>man</code> pages for "
"the\n"
"<code>libcurl</code> function, all available in the â<samp>curl-dev</samp>â "
"package\n"
"or equivalent for your system, or in the c<acronym>URL</acronym> source "
"code\n"
"package.  If you have the development package, the headers should be\n"
"installed in <samp>/usr/include/curl/</samp>, and the <code>man</code> "
"pages\n"
"may be accessed through your favorite <code>man</code> facility.\n"
"</p>"
msgstr ""
"<a name=\"index-cURL\"></a>\n"
"<p>Широко доступная библиотека <code>libcurl</code> i - это библиотека для "
"загрузки файлов\n"
"по протоколам, таким как <acronym>HTTP</acronym>.  Мы будем использовать "
"<code>libcurl</code> с\n"
"<acronym>CFFI</acronym> для загрузки веб страницы.\n"
"</p>\n"
"<p>Обратите внимание, что существует множество других способов загрузки "
"файлов из\n"
"интернета, не в последнюю очередь проект <small>CL-CURL</small> "
"предоставляющий привязки\n"
"для <code>libcurl</code> через аналогичный <acronym>FFI</acronym>.<a name="
"\"DOCF3\" href=\"#FOOT3\"><sup>3</sup></a>\n"
"</p>\n"
"<p><a href=\"http://curl.haxx.se/libcurl/c/libcurl-tutorial.html\">libcurl-"
"tutorial(3)</a>\n"
"это учебник по программированию в <code>libcurl</code> на Си.  Мы также "
"будем следовать ему,\n"
"чтобы разработать биндинг для скачивания файла.  Мы также будем "
"использовать\n"
"<samp>curl.h</samp>, <samp>easy.h</samp>, и справочник <code>man</code> для "
"функций\n"
"<code>libcurl</code>, которые доступны в пакете â<samp>curl-dev</samp>â или\n"
"эквивалентном для вашей системе, или в пакете исходного кода <acronym>URL</"
"acronym>.  \n"
"Если у вас  есть пакет разработки, заголовчные файлы должны быть установлены "
"в \n"
"<samp>/usr/include/curl/</samp>, а страницы <code>man</code> могут быть\n"
"доступны через ваш любимый иструмент <code>man</code>.\n"
"</p>"

#: in/CFFI_User_Manual.htm:829
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002dLoading\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dInitializing\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Initializing</a>, Previous: <a href=\"#Tutorial_002dGetting-a-URL"
"\" accesskey=\"p\" rel=\"prev\">Tutorial-Getting a URL</a>, Up: <a href="
"\"#Tutorial\" accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Loading-foreign-libraries\"></a>\n"
"<h3 class=\"section\">4.3 Loading foreign libraries</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002dLoading\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dInitializing\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Initializing</a>, Previous: <a href=\"#Tutorial_002dGetting-a-URL"
"\" accesskey=\"p\" rel=\"prev\">Tutorial-Getting a URL</a>, Up: <a href="
"\"#Tutorial\" accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Loading-foreign-libraries\"></a>\n"
"<h3 class=\"section\">4.3 Загрузка внешних библиотек</h3>"

#: in/CFFI_User_Manual.htm:841
msgid ""
"<a name=\"index-loading-CFFI\"></a>\n"
"<a name=\"index-requiring-CFFI\"></a>\n"
"<p>First of all, we will create a package to work in.  You can save these\n"
"forms in a file, or just send them to the listener as they are.  If\n"
"creating bindings for an <acronym>ASDF</acronym> package of yours, you will\n"
"want to add <code>:cffi</code> to the <code>:depends-on</code> list in your\n"
"<samp>.asd</samp> file.  Otherwise, just use the <code>asdf:load-system</"
"code> function to\n"
"load <acronym>CFFI</acronym>.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">asdf:"
"load-system <span class=\"keyword\">:cffi</span></span>)</span>"
msgstr ""
"<a name=\"index-loading-CFFI\"></a>\n"
"<a name=\"index-requiring-CFFI\"></a>\n"
"<p>Прежде всего, мы создадим пакет для работы. Вы можете сохранить эти файлы "
"или просто\n"
"отправить их \"слушателю\", как есть.  Если вы создаете привязки для вашего "
"пакета \n"
"<acronym>ASDF</acronym>, вам нужно добавить <code>:cffi</code> в список "
"зависимостей \n"
"<code>:depends-on</code> в ваш файл <samp>.asd</samp>.  В противном случае "
"просто\n"
"используйте функцию <code>asdf:load-system</code> для загрузки  "
"<acronym>CFFI</acronym>.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">asdf:"
"load-system <span class=\"keyword\">:cffi</span></span>)</span>"

#: in/CFFI_User_Manual.htm:846
msgid ""
"  <span class=\"comment\">;;; Nothing special about the \"CFFI-USER\" "
"package.  We're just\n"
"  </span><span class=\"comment\">;;; using it as a substitute for your own "
"CL package.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defpackage</span></i> <span class=\"keyword\">:cffi-user</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"use</span> <span class=\"keyword\">:common-lisp</span> <span class=\"keyword"
"\">:cffi</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:848
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\">in-package <span class="
"\"keyword\">:cffi-user</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:853
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">define-foreign-library</span></i> libcurl\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"darwin</span> <span class=\"paren3\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:or</span> <span class=\"string\">\"libcurl.3.dylib\"</span> "
"<span class=\"string\">\"libcurl.dylib\"</span></span>)</span></span>)</"
"span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"unix</span> <span class=\"paren3\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:or</span> <span class=\"string\">\"libcurl.so.3\"</span> <span "
"class=\"string\">\"libcurl.so\"</span></span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">t <span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:default</span> "
"<span class=\"string\">\"libcurl\"</span></span>)</span></span>)</span></"
"span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:856
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\">use-foreign-library "
"libcurl</span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:868
msgid ""
"<a name=\"index-foreign-library-load\"></a>\n"
"<a name=\"index-library_002c-foreign\"></a>\n"
"<p>Using <code>define-foreign-library</code> and <code>use-foreign-library</"
"code>, we\n"
"have loaded <code>libcurl</code> into Lisp, much as the linker does when "
"you\n"
"start a C program, or <code>common-lisp:load</code> does with a Lisp source\n"
"file or <acronym>FASL</acronym> file.  We special-cased for <small>UNIX</"
"small> machines\n"
"to always load a particular version, the one this tutorial was tested\n"
"with; for those who donât care, the <code>define-foreign-library</code>\n"
"clause <code>(t (:default \"libcurl\"))</code> should be satisfactory, and\n"
"will adapt to various operating systems.\n"
"</p>"
msgstr ""
"<a name=\"index-foreign-library-load\"></a>\n"
"<a name=\"index-library_002c-foreign\"></a>\n"
"<p>Используя <code>define-foreign-library</code> и <code>use-foreign-"
"library</code>, мы\n"
"загрузили <code>libcurl</code> в Lisp, так же как это делает "
"компоновщик(linker), когда\n"
"вы запускаете программу написанную на Си, или как это делает <code>common-"
"lisp:load</code>\n"
"с исходным файлом Lisp или файлом <acronym>FASL</acronym>.  Мы специально "
"выделили\n"
"случай, чтобы для <small>UNIX</small> машин, всегда загружалась определенная "
"версия, та\n"
"с которой этот учебник был протестирован; для тех кого это не волнует, "
"предложение в\n"
"<code>define-foreign-library</code> <code>(t (:default \"libcurl\"))</"
"code> \n"
"удовлетворительно адаптировано к различным опреационным системам.\n"
"</p>"

#: in/CFFI_User_Manual.htm:877
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002dInitializing\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002deasy_005fsetopt\" accesskey=\"n\" rel=\"next"
"\">Tutorial-easy_setopt</a>, Previous: <a href=\"#Tutorial_002dLoading\" "
"accesskey=\"p\" rel=\"prev\">Tutorial-Loading</a>, Up: <a href=\"#Tutorial\" "
"accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Initializing-libcurl\"></a>\n"
"<h3 class=\"section\">4.4 Initializing <code>libcurl</code></h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002dInitializing\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002deasy_005fsetopt\" accesskey=\"n\" rel=\"next"
"\">Tutorial-easy_setopt</a>, Previous: <a href=\"#Tutorial_002dLoading\" "
"accesskey=\"p\" rel=\"prev\">Tutorial-Loading</a>, Up: <a href=\"#Tutorial\" "
"accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Initializing-libcurl\"></a>\n"
"<h3 class=\"section\">4.4 Инициализация <code>libcurl</code></h3>"

#: in/CFFI_User_Manual.htm:885
msgid ""
"<a name=\"index-function-definition\"></a>\n"
"<p>After the introductory matter, the tutorial goes on to present the\n"
"first function you should use.\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CURLcode curl_global_init(long flags);\n"
"</pre></div>"
msgstr ""
"<a name=\"index-function-definition\"></a>\n"
"<p>После вступительного материала, учебное пособие представляет первую "
"функцию,\n"
"которую вы должны использовать.\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CURLcode curl_global_init(long flags);\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:893
msgid ""
"<p>Letâs pick this apart into appropriate Lisp code:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; A CURLcode is the "
"universal error code.  curl/curl.h says\n"
"  </span><span class=\"comment\">;;; no return code will ever be removed, "
"and new ones will be\n"
"  </span><span class=\"comment\">;;; added to the end.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defctype</span></i> curl-code <span class=\"keyword\">:int</"
"span></span>)</span>"
msgstr ""
"<p>Давайте разберем её в соответствующем коде на Lisp:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; A CURLcode is the "
"universal error code.  curl/curl.h says\n"
"  </span><span class=\"comment\">;;; no return code will ever be removed, "
"and new ones will be\n"
"  </span><span class=\"comment\">;;; added to the end.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defctype</span></i> curl-code <span class=\"keyword\">:int</"
"span></span>)</span>"

#: in/CFFI_User_Manual.htm:898
msgid ""
"  <span class=\"comment\">;;; Initialize libcurl with FLAGS.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defcfun</span></i> <span class=\"string\">\"curl_global_init\"</"
"span> curl-code\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flags <span class="
"\"keyword\">:long</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:905
msgid ""
"<blockquote>\n"
"<p><strong>Implementorâs note:</strong> <em>By default, CFFI assumes the "
"UNIX viewpoint that there is one\n"
"C symbol namespace, containing all symbols in all loaded objects.\n"
"This is not so on Windows and Darwin, but we emulate UNIXâs behaviour\n"
"there.  <a href=\"#defcfun\">defcfun</a> for more details.</em>\n"
"</p></blockquote>"
msgstr ""
"<blockquote>\n"
"<p><strong>Примечание разработчика:</strong> <em>По умолчанию, CFFI "
"предполагает\n"
"точку зрения UNIX, что существует одно пространство имен символов Си, "
"содержащее\n"
"все символы во всех загруженных объектах.\n"
"Это не так в Windows и Darwin, но там мы подражаем поведению UNIX.  \n"
"См. <a href=\"#defcfun\">defcfun</a> для более подробной информации.</em>\n"
"</p></blockquote>"

#: in/CFFI_User_Manual.htm:920
msgid ""
"<p>Note the parallels with the original C declaration.  Weâve defined\n"
"<code>curl-code</code> as a wrapping type for <code>:int</code>; right now, "
"it\n"
"only marks it as special, but later we will do something more\n"
"interesting with it.  The point is that we donât have to do it yet.\n"
"</p>\n"
"<a name=\"index-calling-foreign-functions\"></a>\n"
"<p>Looking at <samp>curl.h</samp>, <code>CURL_GLOBAL_NOTHING</code>, a "
"possible value\n"
"for <code>flags</code> above, is defined as â<samp>0</samp>â.  So we can now "
"call\n"
"the function:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (curl-global-init 0)\n"
"â 0\n"
"</pre></div>"
msgstr ""
"<p>Обратите внимание на параллели с исходной декларацией на языке Си.  Мы "
"определели\n"
"<code>curl-code</code> как тип оболочку  для <code>:int</code>; Здесь это "
"только\n"
"специальная метка, но в дальнейшем мы следаем кое-что боле интересное с "
"этим.  Дело\n"
"в том, что нам пока не нужно это делать.\n"
"</p>\n"
"<a name=\"index-calling-foreign-functions\"></a>\n"
"<p>Взглянув на <samp>curl.h</samp>, <code>CURL_GLOBAL_NOTHING</code>, "
"возможное значение\n"
"для <code>flags</code>, определяется как â<samp>0</samp>â.  Итак, теперь мы "
"можем\n"
"вызвать функцию:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (curl-global-init 0)\n"
"â 0\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:936
msgid ""
"<a name=\"index-looks-like-it-worked\"></a>\n"
"<p>Looking at <samp>curl.h</samp> again, <code>0</code> means "
"<code>CURLE_OK</code>, so it\n"
"looks like the call succeeded.  Note that <acronym>CFFI</acronym> converted "
"the\n"
"function name to a Lisp-friendly name.  You can specify your own name\n"
"if you want; use <code>(\"curl_global_init\" <var>your-name-here</var>)</"
"code> as\n"
"the <var>name</var> argument to <code>defcfun</code>.\n"
"</p>\n"
"<p>The tutorial goes on to have us allocate a handle.  For good measure,\n"
"we should also include the deallocator.  Letâs look at these\n"
"functions:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CURL *curl_easy_init( );\n"
"void curl_easy_cleanup(CURL *handle);\n"
"</pre></div>"
msgstr ""
"<a name=\"index-looks-like-it-worked\"></a>\n"
"<p>Снова взглянув на <samp>curl.h</samp>, видим, что <code>0</code> означает "
"<code>CURLE_OK</code>, \n"
"поэтому, похоже что вызов прошел успешно.  Обратите внимание, что "
"<acronym>CFFI</acronym> \n"
"преобразовал имя функции в понятное для Lisp имя.  Вы можете указать свое "
"имя, если хотите,\n"
"используйте <code>(\"curl_global_init\" <var>your-name-here</var>)</code> "
"как\n"
" <var>name</var> в качестве аргумента для <code>defcfun</code>.\n"
"</p>\n"
"<p>Продолжаем. Теперь нам надо выделить хендл(\"ручку для управления чем либо"
"\").\n"
"Хорошей манерой будет также включить сюда деалокатор(функцию особождающую "
"хендл).\n"
"Давайте посмотрим на эти функции:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CURL *curl_easy_init( );\n"
"void curl_easy_cleanup(CURL *handle);\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:943
msgid ""
"<p>Advanced users may want to define special pointer types; we will\n"
"explore this possibility later.  For now, just treat every pointer as\n"
"the same:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcfun</span></i> <span class=\"string\">"
"\"curl_easy_init\"</span> <span class=\"keyword\">:pointer</span></span>)</"
"span>"
msgstr ""
"<p>Опытные пользователи могут захотеть определить специальные типы "
"указателей,\n"
"мы рассмотрим эту возможность позже.  А пока, просто обрабатываем каждый "
"указатель\n"
"одинаково:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcfun</span></i> <span class=\"string\">"
"\"curl_easy_init\"</span> <span class=\"keyword\">:pointer</span></span>)</"
"span>"

#: in/CFFI_User_Manual.htm:947
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defcfun</span></i> <span class=\"string\">\"curl_easy_cleanup\"</span> "
"<span class=\"keyword\">:void</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">easy-handle <span class="
"\"keyword\">:pointer</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:956
msgid ""
"<p>Now we can continue with the tutorial:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (defparameter *easy-handle* (curl-easy-"
"init))\n"
"⇒ *EASY-HANDLE*\n"
"CFFI-USER&gt; *easy-handle*\n"
"⇒ #&lt;FOREIGN-ADDRESS #x09844EE0&gt;\n"
"</pre></div>"
msgstr ""
"<p>Теперь мы можем продолжить обучение:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (defparameter *easy-handle* (curl-easy-"
"init))\n"
"⇒ *EASY-HANDLE*\n"
"CFFI-USER&gt; *easy-handle*\n"
"⇒ #&lt;FOREIGN-ADDRESS #x09844EE0&gt;\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:962
msgid ""
"<a name=\"index-pointers-in-Lisp\"></a>\n"
"<p>Note the print representation of a pointer.  It changes depending on\n"
"what Lisp you are using, but that doesnât make any difference to\n"
"<acronym>CFFI</acronym>.\n"
"</p>"
msgstr ""
"<a name=\"index-pointers-in-Lisp\"></a>\n"
"<p>Обратите внимание на печатное представление указателя.  Оно меняется в\n"
"зависимости от того, какой Lisp вы используете, но это неимеет никакого\n"
"значения для <acronym>CFFI</acronym>.\n"
"</p>"

#: in/CFFI_User_Manual.htm:971
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002deasy_005fsetopt\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dAbstraction\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Abstraction</a>, Previous: <a href=\"#Tutorial_002dInitializing"
"\" accesskey=\"p\" rel=\"prev\">Tutorial-Initializing</a>, Up: <a href="
"\"#Tutorial\" accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Setting-download-options\"></a>\n"
"<h3 class=\"section\">4.5 Setting download options</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002deasy_005fsetopt\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dAbstraction\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Abstraction</a>, Previous: <a href=\"#Tutorial_002dInitializing"
"\" accesskey=\"p\" rel=\"prev\">Tutorial-Initializing</a>, Up: <a href="
"\"#Tutorial\" accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Setting-download-options\"></a>\n"
"<h3 class=\"section\">4.5 Устновка опций скачивания</h3>"

#: in/CFFI_User_Manual.htm:979
msgid ""
"<p>The <code>libcurl</code> tutorial says weâll want to set many options "
"before\n"
"performing any download actions.  This is done through\n"
"<code>curl_easy_setopt</code>:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CURLcode curl_easy_setopt(CURL *curl, CURLoption "
"option, ...);\n"
"</pre></div>"
msgstr ""
"<p>В учебнике к <code>libcurl</code> говориться, что можно установить "
"множество\n"
"параметров перед выполнением каких-либо действий по загрузке.  Это делается "
"через\n"
"<code>curl_easy_setopt</code>:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CURLcode curl_easy_setopt(CURL *curl, CURLoption "
"option, ...);\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:998
msgid ""
"<a name=\"index-varargs\"></a>\n"
"<a name=\"index-foreign-arguments\"></a>\n"
"<p>Weâve introduced a new twist: variable arguments.  There is no obvious\n"
"translation to the <code>defcfun</code> form, particularly as there are "
"four\n"
"possible argument types.  Because of the way C works, we could define\n"
"four wrappers around <code>curl_easy_setopt</code>, one for each type; in\n"
"this case, however, weâll use the general-purpose macro\n"
"<code>foreign-funcall</code> to call this function.\n"
"</p>\n"
"<a name=\"index-enumeration_002c-C\"></a>\n"
"<p>To make things easier on ourselves, weâll create an enumeration of the\n"
"kinds of options we want to set.  The <code>enum CURLoption</code> isnât "
"the\n"
"most straightforward, but reading the <code>CINIT</code> C macro definition\n"
"should be enlightening.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defmacro</span></i> <i><span class=\"symbol"
"\">define-curl-options</span></i> <span class=\"paren2\">(<span class=\"lisp-"
"bg\">name type-offsets &amp;rest enum-args</span>)</span>\n"
"    <span class=\"string\">\"As with CFFI:DEFCENUM, except each of ENUM-ARGS "
"is as follows:"
msgstr ""
"<a name=\"index-varargs\"></a>\n"
"<a name=\"index-foreign-arguments\"></a>\n"
"<p>Мы входим в новую область: переменные аргументы(variable arguments).  "
"Нет\n"
"очевидного перевода формы <code>defcfun</code>, в частности, постокольку\n"
"существует четыре возможных типа аргументов.  Благодаря тому, как работает\n"
"Си, мы можем определить четыре обертки вокруг <code>curl_easy_setopt</"
"code>, \n"
"по одной для каждого типа; однако, в этом случае, мы будем использовать\n"
"универсальный макрос <code>foreign-funcall</code> для вызова этой функции.\n"
"</p>\n"
"<a name=\"index-enumeration_002c-C\"></a>\n"
"<p>Чтобы упростить себе задачу, мы создадим перечисление(перечень "
"вариантов),\n"
"которые мы хотим установить.  Перечисление <code>enum CURLoption</code> не \n"
"является самым простым, но чтение макроопределения <code>CINIT</code> Си\n"
"должно быть поучительным.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defmacro</span></i> <i><span class=\"symbol"
"\">define-curl-options</span></i> <span class=\"paren2\">(<span class=\"lisp-"
"bg\">name type-offsets &amp;rest enum-args</span>)</span>\n"
"    <span class=\"string\">\"As with CFFI:DEFCENUM, except each of ENUM-ARGS "
"is as follows:"

#: in/CFFI_User_Manual.htm:1000
msgctxt "in/CFFI_User_Manual.htm:1000"
msgid "      (NAME TYPE NUMBER)"
msgstr ""

#: in/CFFI_User_Manual.htm:1003
msgctxt "in/CFFI_User_Manual.htm:1003"
msgid ""
"  Where the arguments are as they are with the CINIT macro defined\n"
"  in curl.h, except NAME is a keyword."
msgstr ""
"  Where the arguments are as they are with the CINIT macro defined\n"
"  in curl.h, except NAME is a keyword."

#: in/CFFI_User_Manual.htm:1013
msgid ""
"  TYPE-OFFSETS is a plist of TYPEs to their integer offsets, as\n"
"  defined by the CURLOPTTYPE_LONG et al constants in curl.h.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">flet</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"paren4\">(<span class=\"lisp-bg\">enumerated-value <span class="
"\"paren5\">(<span class=\"lisp-bg\">type offset</span>)</span>\n"
"             <span class=\"paren5\">(<span class=\"lisp-bg\">+ <span class="
"\"paren6\">(<span class=\"lisp-bg\">getf type-offsets type</span>)</span> "
"offset</span>)</span></span>)</span></span>)</span>\n"
"      `<span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">progn</span></i>\n"
"         <span class=\"paren4\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defcenum</span></i> ,name\n"
"           ,@<span class=\"paren5\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">loop</span></i> for <span class=\"paren6\">(<span class=\"lisp-bg"
"\">name type number</span>)</span> in enum-args\n"
"                collect <span class=\"paren6\">(<span class=\"lisp-bg\">list "
"name <span class=\"paren1\">(<span class=\"lisp-bg\">enumerated-value type "
"number</span>)</span></span>)</span></span>)</span></span>)</span>\n"
"         ',name</span>)</span></span>)</span></span>)</span>                ;"
"for REPL users' sanity"
msgstr ""

#: in/CFFI_User_Manual.htm:1021
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">define-curl-options</span></i> curl-option\n"
"      <span class=\"paren2\">(<span class=\"lisp-bg\">long 0 objectpoint "
"10000 functionpoint 20000 off-t 30000</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"noprogress</span> long 43</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"nosignal</span> long 99</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"errorbuffer</span> objectpoint 10</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"url</span> objectpoint 2</span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:1039
msgid ""
"<p>With some well-placed Emacs <code>query-replace-regexp</code>s, you "
"could\n"
"probably similarly define the entire <code>CURLoption</code> enumeration.  "
"I\n"
"have selected to transcribe a few that we will use in this tutorial.\n"
"</p>\n"
"<p>If youâre having trouble following the macrology, just macroexpand the\n"
"<code>curl-option</code> definition, or see the following macroexpansion,\n"
"conveniently downcased and reformatted:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">progn</span></i>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defcenum</span></i> curl-option\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:noprogress</span> 43</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:nosignal</span> 99</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:errorbuffer</span> 10010</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:url</span> 10002</span>)</span></span>)</span>\n"
"    'curl-option</span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>С некоторыми Emacs командами: <code>query-replace-regexp</code>, вы "
"вероятно,\n"
"могли бы аналогичным образом определить все перечисления <code>CURLoption</"
"code>.\n"
"Я выбрал для написания учебника некоторые из них, которые мы будем "
"испольовать\n"
"на этом уроке.\n"
"</p>\n"
"<p>Если у вас возникли проблемы с прочтением макроса, просто разверните \n"
"определение макроса  <code>curl-option</code>, или смотрите следующее\n"
"макрорасширенияе, удобно переоформатированное и приведенное в нижний "
"регистр:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">progn</span></i>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defcenum</span></i> curl-option\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:noprogress</span> 43</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:nosignal</span> 99</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:errorbuffer</span> 10010</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:url</span> 10002</span>)</span></span>)</span>\n"
"    'curl-option</span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1053
msgid ""
"<p>That seems more than reasonable.  You may notice that we only use the\n"
"<var>type</var> to compute the real enumeration offset; we will also need\n"
"the type information later.\n"
"</p>\n"
"<p>First, however, letâs make sure a simple call to the foreign function\n"
"works:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (foreign-funcall \"curl_easy_setopt\"\n"
"               :pointer *easy-handle*\n"
"               curl-option :nosignal :long 1 curl-code)\n"
"⇒ 0\n"
"</pre></div>"
msgstr ""
"<p>Это кажется более разумным.  Вы можете заметить, что мы используем тип\n"
"(<var>type</var>) только для того чтобы вычислить реальное смещение "
"перечисления;\n"
"нам также понадобиться информация о типе позже.\n"
"</p>\n"
"<p>Однако сначала давайте убедимся, что простой вызов внешней функии\n"
"работает:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (foreign-funcall \"curl_easy_setopt\"\n"
"               :pointer *easy-handle*\n"
"               curl-option :nosignal :long 1 curl-code)\n"
"⇒ 0\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1071
msgid ""
"<p><code>foreign-funcall</code>, despite its surface simplicity, can be used "
"to\n"
"call any C function.  Its first argument is a string, naming the\n"
"function to be called.  Next, for each argument, we pass the name of\n"
"the C type, which is the same as in <code>defcfun</code>, followed by a "
"Lisp\n"
"object representing the data to be passed as the argument.  The final\n"
"argument is the return type, for which we use the <code>curl-code</code>\n"
"type defined earlier.\n"
"</p>\n"
"<p><code>defcfun</code> just puts a convenient faÃ§ade on\n"
"<code>foreign-funcall</code>.<a name=\"DOCF4\" href=\"#FOOT4\"><sup>4</sup></"
"a>  Our earlier call to\n"
"<code>curl-global-init</code> could have been written as follows:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (foreign-funcall \"curl_global_init\" :"
"long 0\n"
"                            curl-code)\n"
"⇒ 0\n"
"</pre></div>"
msgstr ""
"<p><code>foreign-funcall</code>, не смотря на свою простоту, может быть\n"
"использован для вызова любой Си функции. Его первый аргумент это строка,\n"
"в которой указывается имя вызываемой функции. Далее для каждого аргумента\n"
"мы передаем имя типа Си, которое совпадает с <code>defcfun</code>, за "
"которым\n"
"следует объект Lisp представляющий данные для передачи в качестве "
"аргумента.\n"
"Последний аргумент, это тип возвращаемого значения, для которого мы "
"используем\n"
"тип <code>curl-code</code>, определенный ранее.\n"
"</p>\n"
"<p><code>defcfun</code> просто помещает в удобный фасад вызов\n"
"<code>foreign-funcall</code>.<a name=\"DOCF4\" href=\"#FOOT4\"><sup>4</sup></"
"a>  \n"
"Наш предыдущий вызов <code>curl-global-init</code> мог быть написан "
"следующим\n"
"образом:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (foreign-funcall \"curl_global_init\" :"
"long 0\n"
"                            curl-code)\n"
"⇒ 0\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1075
msgid ""
"<p>Before we continue, we will take a look at what <acronym>CFFI</acronym> "
"can and canât\n"
"do, and why this is so.\n"
"</p>"
msgstr ""
"<p>Прежде, чем мы продолжим, мы посмотрим что  <acronym>CFFI</acronym> может "
"и что не может\n"
"сделать, и почему это так.\n"
"</p>"

#: in/CFFI_User_Manual.htm:1084
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002dAbstraction\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dLisp-easy_005fsetopt\" accesskey=\"n\" rel="
"\"next\">Tutorial-Lisp easy_setopt</a>, Previous: <a href="
"\"#Tutorial_002deasy_005fsetopt\" accesskey=\"p\" rel=\"prev\">Tutorial-"
"easy_setopt</a>, Up: <a href=\"#Tutorial\" accesskey=\"u\" rel=\"up"
"\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Breaking-the-abstraction\"></a>\n"
"<h3 class=\"section\">4.6 Breaking the abstraction</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002dAbstraction\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dLisp-easy_005fsetopt\" accesskey=\"n\" rel="
"\"next\">Tutorial-Lisp easy_setopt</a>, Previous: <a href="
"\"#Tutorial_002deasy_005fsetopt\" accesskey=\"p\" rel=\"prev\">Tutorial-"
"easy_setopt</a>, Up: <a href=\"#Tutorial\" accesskey=\"u\" rel=\"up"
"\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Breaking-the-abstraction\"></a>\n"
"<h3 class=\"section\">4.6 Разрушение абстракции</h3>"

#: in/CFFI_User_Manual.htm:1148
msgid ""
"<a name=\"index-breaking-the-abstraction\"></a>\n"
"<a name=\"index-abstraction-breaking\"></a>\n"
"<p>In <a href=\"#Tutorial_002dComparison\">What makes Lisp different</a>, we "
"mentioned\n"
"that writing an <acronym>FFI</acronym> sometimes requires depending on\n"
"information not provided as part of the interface.  The easy option\n"
"<code>CURLOPT_WRITEDATA</code>, which we will not provide as part of the\n"
"Lisp interface, illustrates this issue.\n"
"</p>\n"
"<p>Strictly speaking, the <code>curl-option</code> enumeration is not\n"
"necessary; we could have used <code>:int 99</code> instead of\n"
"<code>curl-option :nosignal</code> in our call to <code>curl_easy_setopt</"
"code>\n"
"above.  We defined it anyway, in part to hide the fact that we are\n"
"breaking the abstraction that the C <code>enum</code> provides.  If the\n"
"c<acronym>URL</acronym> developers decide to change those numbers later, we\n"
"must change the Lisp enumeration, because enumeration values are not\n"
"provided in the compiled C library, <code>libcurl.so.3</code>.\n"
"</p>\n"
"<p><acronym>CFFI</acronym> works because the most useful things in C "
"libraries â\n"
"non-static functions and non-static variables â are included\n"
"accessibly in <code>libcurl.so.3</code>.  A C compiler that violated this\n"
"would be considered a worthless compiler.\n"
"</p>\n"
"<p>The other thing <code>define-curl-options</code> does is give the âtypeâ\n"
"of the third argument passed to <code>curl_easy_setopt</code>.  Using this\n"
"information, we can tell that the <code>:nosignal</code> option should\n"
"accept a long integer argument.  We can implicitly assume <code>t</code>\n"
"â¡ 1 and <code>nil</code> â¡ 0, as it is in C, which takes care\n"
"of the fact that <code>CURLOPT_NOSIGNAL</code> is really asking for a\n"
"boolean.\n"
"</p>\n"
"<p>The âtypeâ of <code>CURLOPT_WRITEDATA</code> is <code>objectpoint</"
"code>.\n"
"However, it is really looking for a <code>FILE*</code>.\n"
"<code>CURLOPT_ERRORBUFFER</code> is looking for a <code>char*</code>, so "
"there is\n"
"no obvious <acronym>CFFI</acronym> type but <code>:pointer</code>.\n"
"</p>\n"
"<p>The first thing to note is that nowhere in the C interface includes\n"
"this information; it can only be found in the manual.  We could\n"
"disjoin these clearly different types ourselves, by splitting\n"
"<code>objectpoint</code> into <code>filepoint</code> and <code>charpoint</"
"code>, but we\n"
"are still breaking the abstraction, because we have to augment the\n"
"entire enumeration form with this additional\n"
"information.<a name=\"DOCF5\" href=\"#FOOT5\"><sup>5</sup></a>\n"
"</p>\n"
"<a name=\"index-streams-and-C\"></a>\n"
"<a name=\"index-FILE_002a-and-streams\"></a>\n"
"<p>The second is that the <code>CURLOPT_WRITEDATA</code> argument is "
"completely\n"
"incompatible with the desired Lisp data, a\n"
"stream.<a name=\"DOCF6\" href=\"#FOOT6\"><sup>6</sup></a>  It is probably "
"acceptable if we are controlling every file\n"
"we might want to use as this argument, in which case we can just call\n"
"the foreign function <code>fopen</code>.  Regardless, though, we canât "
"write\n"
"to arbitrary streams, which is exactly what we want to do for this\n"
"application.\n"
"</p>\n"
"<p>Finally, note that the <code>curl_easy_setopt</code> interface itself is "
"a\n"
"hack, intended to work around some of the drawbacks of C.  The\n"
"definition of <code>Curl_setopt</code>, while long, is far less cluttered\n"
"than the equivalent disjoint-function set would be; in addition,\n"
"setting a new option in an old <code>libcurl</code> can generate a run-time\n"
"error rather than breaking the compile.  Lisp can just as concisely\n"
"generate functions as compare values, and the âundefined functionâ\n"
"error is just as useful as any explicit error we could define here\n"
"might be.\n"
"</p>"
msgstr ""
"<a name=\"index-breaking-the-abstraction\"></a>\n"
"<a name=\"index-abstraction-breaking\"></a>\n"
"<p>В разделе <a href=\"#Tutorial_002dComparison\">Что делает Lisp особенным</"
"a>, \n"
"мы упомянули, что написание <acronym>FFI</acronym> иногда требует "
"зависимости\n"
"от инофрмации, не предоставляемой как часть интерфейса.  Простая опция\n"
"<code>CURLOPT_WRITEDATA</code>, которую мы не будем предоставлять как часть\n"
"интерфейса Lisp, иллюстрирует эту проблему.\n"
"</p>\n"
"<p>Строго говоря, перечисление <code>curl-option</code> не обязательно; \n"
"мы могли бы использовать <code>:int 99</code> вместо <code>curl-option :"
"nosignal</code> \n"
"в нашем вызове <code>curl_easy_setopt</code> выше.  Мы все равно определели "
"его,\n"
"чтобы частично скрыть тот факт, что мы нарушаем абстракцию, которую "
"представляет\n"
"собой Си перечисление(<code>enum</code>).  Ели разаработчики\n"
"<acronym>URL</acronym> решат изменить эти числа позже, мы должны изменить "
"перечисление\n"
"Lisp, потому что значения перечисления не предоставлены в скомпилированной "
"библиотеке Си, \n"
"<code>libcurl.so.3</code>.\n"
"</p>\n"
"<p><acronym>CFFI</acronym> работает, потому что наиболее полезные вещи в "
"библиотеках Си\n"
"нестатические функции и нестатические переменные - доступны в  <code>libcurl."
"so.3</code>.  \n"
"Компилятор Си, который нарушит это, будет считаться бесполезным "
"компилятором.\n"
"</p>\n"
"<p>Другая цель, которой служит <code>define-curl-options</code> это дать "
"тип\n"
"третьему аргументу, передаваемого в <code>curl_easy_setopt</code>.  "
"Используя эту\n"
"информацию, мы можем сказать, что опция <code>:nosignal</code> должна "
"принимать длинный\n"
"целочисленный аргумент(long integer). Мы можем неявно предполагать, что "
"<code>t</code>\n"
"â¡ 1 и <code>nil</code> â¡ 0, как это делает Си. что учитывает тот факт, "
"что\n"
"<code>CURLOPT_NOSIGNAL</code> действительно запрашивает логическое "
"значение.\n"
"</p>\n"
"<p> âТипâ <code>CURLOPT_WRITEDATA</code> является <code>objectpoint</code>.\n"
"Тем не менее, он на самом деле указывает на файл <code>FILE*</code>.\n"
"<code>CURLOPT_ERRORBUFFER</code> или указывает на символ <code>char*</code>, "
"поэтому нет\n"
"очевидного типа <acronym>CFFI</acronym>, кроме указателя<code>:pointer</"
"code>.\n"
"</p>\n"
"<p>Первое, что нужно отметить, это то, что нигде в интерфейсе Си эта "
"информация\n"
"не содержиться; это можно найти только в руководстве. Мы могли бы разделить "
"эти\n"
"явно разные типы сами, разделив <code>objectpoint</code> на <code>filepoint</"
"code> и \n"
"<code>charpoint</code>, но мы все равно нарушаем абстркцию, потому что мы "
"должны\n"
"дополнить всю форму перечисления этой дополнительной информацией.<a name="
"\"DOCF5\" href=\"#FOOT5\"><sup>5</sup></a>\n"
"</p>\n"
"<a name=\"index-streams-and-C\"></a>\n"
"<a name=\"index-FILE_002a-and-streams\"></a>\n"
"<p>Во вторых, аргумент <code>CURLOPT_WRITEDATA</code> полностью несовместим "
"с требуемыми\n"
"Lisp данными, это поток.<a name=\"DOCF6\" href=\"#FOOT6\"><sup>6</sup></a>  "
"Вероятно, это приемлемо, если мы\n"
"контролируем каждый файл, который мы можем использовать в качестве этого "
"аргумента, и вэтом случае\n"
"мы можем просто вызвать внешнюю функцию <code>fopen</code>.  Тем не менее, "
"несмотря на это,\n"
"мы не можем писать в произвольные потоки, что мы хотим сделать для этого "
"приложения.\n"
"</p>\n"
"<p>Наконец, обратите внимание, что сам интерфейс <code>curl_easy_setopt</"
"code> является хаком,\n"
"предназначенным для обхода некоторых недостатков языка Си.  Определение\n"
"<code>Curl_setopt</code>, хотя и long, гораздо меньше загромождено, чем "
"эквивалентный набор\n"
"дизъюнктивных функци; Кроме того, установка новой опции в старом "
"<code>libcurl</code> \n"
"может генерировать ошибку во время выполнения, а не прерывать компиляцию.  "
"Lispможет так же\n"
"кратко генерировать функции, как сравнивать значения и ошибка  âundefined "
"functionâ\n"
"так же полезна, как и любая явная ошибка, которую мы здесь можем "
"определить.\n"
"</p>"

#: in/CFFI_User_Manual.htm:1157
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002dLisp-easy_005fsetopt\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dMemory\" accesskey=\"n\" rel=\"next\">Tutorial-"
"Memory</a>, Previous: <a href=\"#Tutorial_002dAbstraction\" accesskey=\"p\" "
"rel=\"prev\">Tutorial-Abstraction</a>, Up: <a href=\"#Tutorial\" accesskey="
"\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" title="
"\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Option-functions-in-Lisp\"></a>\n"
"<h3 class=\"section\">4.7 Option functions in Lisp</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002dLisp-easy_005fsetopt\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dMemory\" accesskey=\"n\" rel=\"next\">Tutorial-"
"Memory</a>, Previous: <a href=\"#Tutorial_002dAbstraction\" accesskey=\"p\" "
"rel=\"prev\">Tutorial-Abstraction</a>, Up: <a href=\"#Tutorial\" accesskey="
"\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" title="
"\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Option-functions-in-Lisp\"></a>\n"
"<h3 class=\"section\">4.7 Опции функций в Lisp</h3>"

#: in/CFFI_User_Manual.htm:1167
msgid ""
"<p>We could use <code>foreign-funcall</code> directly every time we wanted "
"to\n"
"call <code>curl_easy_setopt</code>.  However, we can encapsulate some of "
"the\n"
"necessary information with the following.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; We will use this type "
"later in a more creative way.  For\n"
"  </span><span class=\"comment\">;;; now, just consider it a marker that "
"this isn't just any\n"
"  </span><span class=\"comment\">;;; pointer.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defctype</span></i> easy-handle <span class=\"keyword\">:pointer</"
"span></span>)</span>"
msgstr ""
"<p>Мы можем использовать <code>foreign-funcall</code> напрямую, каждый раз, "
"когда хотим\n"
"вызывать <code>curl_easy_setopt</code>.  Однако, мы можем инкапсулировать "
"некоторую необходимую\n"
"информацию информацию следующим образом.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; We will use this type "
"later in a more creative way.  For\n"
"  </span><span class=\"comment\">;;; now, just consider it a marker that "
"this isn't just any\n"
"  </span><span class=\"comment\">;;; pointer.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defctype</span></i> easy-handle <span class=\"keyword\">:pointer</"
"span></span>)</span>"

#: in/CFFI_User_Manual.htm:1178
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defmacro</span></i> curl-easy-setopt <span class=\"paren2\">(<span class="
"\"lisp-bg\">easy-handle enumerated-name\n"
"                              value-type new-value</span>)</span>\n"
"    <span class=\"string\">\"Call `curl_easy_setopt' on EASY-HANDLE, using "
"ENUMERATED-NAME\n"
"  as the OPTION.  VALUE-TYPE is the CFFI foreign type of the third\n"
"  argument, and NEW-VALUE is the Lisp data to be translated to the\n"
"  third argument.  VALUE-TYPE is not evaluated.\"</span>\n"
"    `<span class=\"paren2\">(<span class=\"lisp-bg\">foreign-funcall <span "
"class=\"string\">\"curl_easy_setopt\"</span> easy-handle ,easy-handle\n"
"                      curl-option ,enumerated-name\n"
"                      ,value-type ,new-value curl-code</span>)</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:1194
msgid ""
"<p>Now we define a function for each kind of argument that encodes the\n"
"correct <code>value-type</code> in the above.  This can be done reasonably\n"
"in the <code>define-curl-options</code> macroexpansion; after all, that is\n"
"where the different options are listed!\n"
"</p>\n"
"<a name=\"index-Lispy-C-functions\"></a>\n"
"<p>We could make <code>cl:defun</code> forms in the expansion that simply "
"call\n"
"<code>curl-easy-setopt</code>; however, it is probably easier and clearer "
"to\n"
"use <code>defcfun</code>.  <code>define-curl-options</code> was becoming "
"unwieldy,\n"
"so I defined some helpers in this new definition.\n"
"</p>\n"
"<div class=\"smalllisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defun</span></i> curry-curl-option-setter <span "
"class=\"paren2\">(<span class=\"lisp-bg\">function-name option-keyword</"
"span>)</span>\n"
"    <span class=\"string\">\"Wrap the function named by FUNCTION-NAME with a "
"version that\n"
"  curries the second argument as OPTION-KEYWORD."
msgstr ""
"<p>Теперь мы определили функцию для каждого типа аргумента, которая "
"кодирует\n"
"правильный тип значения(<code>value-type</code>).  Разумнее это сделать с "
"помощью\n"
"макроопределения в <code>define-curl-options</code>; В конце концов, именно "
"здесь\n"
"перечислены различные опции!\n"
"</p>\n"
"<a name=\"index-Lispy-C-functions\"></a>\n"
"<p>Мы можем создать форму <code>cl:defun</code> в расширении просто вызвав\n"
"<code>curl-easy-setopt</code>; Однако, вероятно, проще и понятнее "
"спользовать\n"
"<code>defcfun</code>.  <code>define-curl-options</code> становиться "
"громоздким,\n"
"поэтому я определил несколько помощников в этом новом определении.\n"
"</p>\n"
"<div class=\"smalllisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defun</span></i> curry-curl-option-setter <span "
"class=\"paren2\">(<span class=\"lisp-bg\">function-name option-keyword</"
"span>)</span>\n"
"    <span class=\"string\">\"Wrap the function named by FUNCTION-NAME with a "
"version that\n"
"  curries the second argument as OPTION-KEYWORD."

#: in/CFFI_User_Manual.htm:1201
msgid ""
"  This function is intended for use in DEFINE-CURL-OPTION-SETTER.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">setf <span class="
"\"paren3\">(<span class=\"lisp-bg\">symbol-function function-name</span>)</"
"span>\n"
"            <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">let</span></i> <span class=\"paren4\">(<span class=\"lisp-bg"
"\"><span class=\"paren5\">(<span class=\"lisp-bg\">c-function <span class="
"\"paren6\">(<span class=\"lisp-bg\">symbol-function function-name</span>)</"
"span></span>)</span></span>)</span>\n"
"              <span class=\"paren4\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">lambda</span></i> <span class=\"paren5\">(<span class=\"lisp-bg"
"\">easy-handle new-value</span>)</span>\n"
"                <span class=\"paren5\">(<span class=\"lisp-bg\">funcall c-"
"function easy-handle option-keyword\n"
"                         new-value</span>)</span></span>)</span></span>)</"
"span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1209
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defmacro</span></i> <i><span class=\"symbol\">define-curl-option-setter</"
"span></i> <span class=\"paren2\">(<span class=\"lisp-bg\">name option-type\n"
"                                       option-value foreign-type</span>)</"
"span>\n"
"    <span class=\"string\">\"Define (with DEFCFUN) a function NAME that "
"calls\n"
"  curl_easy_setopt.  OPTION-TYPE and OPTION-VALUE are the CFFI\n"
"  foreign type and value to be passed as the second argument to\n"
"  easy_setopt, and FOREIGN-TYPE is the CFFI foreign type to be used\n"
"  for the resultant function's third argument."
msgstr ""

#: in/CFFI_User_Manual.htm:1217
msgid ""
"  This macro is intended for use in DEFINE-CURL-OPTIONS.\"</span>\n"
"    `<span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">progn</span></i>\n"
"       <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defcfun</span></i> <span class=\"paren4\">(<span class=\"lisp-bg"
"\"><span class=\"string\">\"curl_easy_setopt\"</span> ,name</span>)</span> "
"curl-code\n"
"         <span class=\"paren4\">(<span class=\"lisp-bg\">easy-handle easy-"
"handle</span>)</span>\n"
"         <span class=\"paren4\">(<span class=\"lisp-bg\">option ,option-"
"type</span>)</span>\n"
"         <span class=\"paren4\">(<span class=\"lisp-bg\">new-value ,foreign-"
"type</span>)</span></span>)</span>\n"
"       <span class=\"paren3\">(<span class=\"lisp-bg\">curry-curl-option-"
"setter ',name ',option-value</span>)</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1220
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defmacro</span></i> <i><span class=\"symbol\">define-curl-options</span></"
"i> <span class=\"paren2\">(<span class=\"lisp-bg\">type-name type-offsets "
"&amp;rest enum-args</span>)</span>\n"
"    <span class=\"string\">\"As with CFFI:DEFCENUM, except each of ENUM-ARGS "
"is as follows:"
msgstr ""

#: in/CFFI_User_Manual.htm:1222
msgctxt "in/CFFI_User_Manual.htm:1222"
msgid "      (NAME TYPE NUMBER)"
msgstr ""

#: in/CFFI_User_Manual.htm:1225
msgctxt "in/CFFI_User_Manual.htm:1225"
msgid ""
"  Where the arguments are as they are with the CINIT macro defined\n"
"  in curl.h, except NAME is a keyword."
msgstr ""

#: in/CFFI_User_Manual.htm:1228
msgid ""
"  TYPE-OFFSETS is a plist of TYPEs to their integer offsets, as\n"
"  defined by the CURLOPTTYPE_LONG et al constants in curl.h."
msgstr ""

#: in/CFFI_User_Manual.htm:1258
msgid ""
"  Also, define functions for each option named\n"
"  set-`TYPE-NAME'-`OPTION-NAME', where OPTION-NAME is the NAME from\n"
"  the above destructuring.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">flet</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"paren4\">(<span class=\"lisp-bg\">enumerated-value <span class="
"\"paren5\">(<span class=\"lisp-bg\">type offset</span>)</span>\n"
"             <span class=\"paren5\">(<span class=\"lisp-bg\">+ <span class="
"\"paren6\">(<span class=\"lisp-bg\">getf type-offsets type</span>)</span> "
"offset</span>)</span></span>)</span>\n"
"           <span class=\"comment\">;; map PROCEDURE, destructuring each of "
"ENUM-ARGS\n"
"  </span>         <span class=\"paren4\">(<span class=\"lisp-bg\">map-enum-"
"args <span class=\"paren5\">(<span class=\"lisp-bg\">procedure</span>)</"
"span>\n"
"             <span class=\"paren5\">(<span class=\"lisp-bg\">mapcar <span "
"class=\"paren6\">(<span class=\"lisp-bg\"><i><span class=\"symbol\">lambda</"
"span></i> <span class=\"paren1\">(<span class=\"lisp-bg\">arg</span>)</span> "
"<span class=\"paren1\">(<span class=\"lisp-bg\">apply procedure arg</span>)</"
"span></span>)</span> enum-args</span>)</span></span>)</span>\n"
"           <span class=\"comment\">;; build a name like SET-CURL-OPTION-"
"NOSIGNAL\n"
"  </span>         <span class=\"paren4\">(<span class=\"lisp-bg\">make-"
"setter-name <span class=\"paren5\">(<span class=\"lisp-bg\">option-name</"
"span>)</span>\n"
"             <span class=\"paren5\">(<span class=\"lisp-bg\">intern <span "
"class=\"paren6\">(<span class=\"lisp-bg\">concatenate\n"
"                      'string <span class=\"string\">\"SET-\"</span> <span "
"class=\"paren1\">(<span class=\"lisp-bg\">symbol-name type-name</span>)</"
"span>\n"
"                      <span class=\"string\">\"-\"</span> <span class="
"\"paren1\">(<span class=\"lisp-bg\">symbol-name option-name</span>)</span></"
"span>)</span></span>)</span></span>)</span></span>)</span>\n"
"      `<span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">progn</span></i>\n"
"         <span class=\"paren4\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defcenum</span></i> ,type-name\n"
"           ,@<span class=\"paren5\">(<span class=\"lisp-bg\">map-enum-args\n"
"              <span class=\"paren6\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">lambda</span></i> <span class=\"paren1\">(<span class=\"lisp-bg"
"\">name type number</span>)</span>\n"
"                <span class=\"paren1\">(<span class=\"lisp-bg\">list name "
"<span class=\"paren2\">(<span class=\"lisp-bg\">enumerated-value type "
"number</span>)</span></span>)</span></span>)</span></span>)</span></span>)</"
"span>\n"
"         ,@<span class=\"paren4\">(<span class=\"lisp-bg\">map-enum-args\n"
"            <span class=\"paren5\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">lambda</span></i> <span class=\"paren6\">(<span class=\"lisp-bg"
"\">name type number</span>)</span>\n"
"              <span class=\"paren6\">(<span class=\"lisp-bg\">declare <span "
"class=\"paren1\">(<span class=\"lisp-bg\">ignore number</span>)</span></"
"span>)</span>\n"
"              `<span class=\"paren6\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">define-curl-option-setter</span></i> ,<span class="
"\"paren1\">(<span class=\"lisp-bg\">make-setter-name name</span>)</span>\n"
"                 ,type-name ,name ,<span class=\"paren1\">(<span class="
"\"lisp-bg\">ecase type\n"
"                                     <span class=\"paren2\">(<span class="
"\"lisp-bg\">long <span class=\"keyword\">:long</span></span>)</span>\n"
"                                     <span class=\"paren2\">(<span class="
"\"lisp-bg\">objectpoint <span class=\"keyword\">:pointer</span></span>)</"
"span>\n"
"                                     <span class=\"paren2\">(<span class="
"\"lisp-bg\">functionpoint <span class=\"keyword\">:pointer</span></span>)</"
"span>\n"
"                                     <span class=\"paren2\">(<span class="
"\"lisp-bg\">off-t <span class=\"keyword\">:long</span></span>)</span></"
"span>)</span></span>)</span></span>)</span></span>)</span>\n"
"         ',type-name</span>)</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:1279
msgid ""
"<p>Macroexpanding our <code>define-curl-options</code> form once more, we\n"
"see something different:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">progn</span></i>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defcenum</span></i> curl-option\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:noprogress</span> 43</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:nosignal</span> 99</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:errorbuffer</span> 10010</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:url</span> 10002</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">define-curl-option-setter</span></i> set-curl-option-noprogress\n"
"      curl-option <span class=\"keyword\">:noprogress</span> <span class="
"\"keyword\">:long</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">define-curl-option-setter</span></i> set-curl-option-nosignal\n"
"      curl-option <span class=\"keyword\">:nosignal</span> <span class="
"\"keyword\">:long</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">define-curl-option-setter</span></i> set-curl-option-errorbuffer\n"
"      curl-option <span class=\"keyword\">:errorbuffer</span> <span class="
"\"keyword\">:pointer</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">define-curl-option-setter</span></i> set-curl-option-url\n"
"      curl-option <span class=\"keyword\">:url</span> <span class=\"keyword"
"\">:pointer</span></span>)</span>\n"
"    'curl-option</span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Макрорасширение нашей формы <code>define-curl-options</code> еще раз, мы "
"видим, некоторые\n"
"отличия:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">progn</span></i>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defcenum</span></i> curl-option\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:noprogress</span> 43</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:nosignal</span> 99</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:errorbuffer</span> 10010</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:url</span> 10002</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">define-curl-option-setter</span></i> set-curl-option-noprogress\n"
"      curl-option <span class=\"keyword\">:noprogress</span> <span class="
"\"keyword\">:long</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">define-curl-option-setter</span></i> set-curl-option-nosignal\n"
"      curl-option <span class=\"keyword\">:nosignal</span> <span class="
"\"keyword\">:long</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">define-curl-option-setter</span></i> set-curl-option-errorbuffer\n"
"      curl-option <span class=\"keyword\">:errorbuffer</span> <span class="
"\"keyword\">:pointer</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">define-curl-option-setter</span></i> set-curl-option-url\n"
"      curl-option <span class=\"keyword\">:url</span> <span class=\"keyword"
"\">:pointer</span></span>)</span>\n"
"    'curl-option</span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1291
msgid ""
"<p>Macroexpanding one of the new <code>define-curl-option-setter</code>\n"
"forms yields the following:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">progn</span></i>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defcfun</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"string\">\"curl_easy_setopt\"</span> set-curl-option-nosignal</"
"span>)</span> curl-code\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">easy-handle easy-"
"handle</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">option curl-option</"
"span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">new-value <span class="
"\"keyword\">:long</span></span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">curry-curl-option-setter "
"'set-curl-option-nosignal '<span class=\"keyword\">:nosignal</span></span>)</"
"span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Макрорасширение одной из новых форм <code>define-curl-option-setter</"
"code>\n"
"дает следующее:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">progn</span></i>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defcfun</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"string\">\"curl_easy_setopt\"</span> set-curl-option-nosignal</"
"span>)</span> curl-code\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">easy-handle easy-"
"handle</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">option curl-option</"
"span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">new-value <span class="
"\"keyword\">:long</span></span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">curry-curl-option-setter "
"'set-curl-option-nosignal '<span class=\"keyword\">:nosignal</span></span>)</"
"span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1298
msgid ""
"<p>Finally, letâs try this out:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (set-curl-option-nosignal *easy-handle* "
"1)\n"
"⇒ 0\n"
"</pre></div>"
msgstr ""
"<p>Наконец, давайте просто попробуем это:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (set-curl-option-nosignal *easy-handle* "
"1)\n"
"⇒ 0\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1304
msgid ""
"<p>Looks like it works just as well.  This interface is now reasonably\n"
"high-level to wash out some of the ugliness of the thinnest possible\n"
"<code>curl_easy_setopt</code> <acronym>FFI</acronym>, without obscuring the "
"remaining\n"
"C bookkeeping details we will explore.\n"
"</p>"
msgstr ""
"<p>Похоже, это работает также хорошо.  Этот интерфейс теперь достаточно "
"высокоуровневый, чтобы\n"
"скрыть некоторые недостатки и тонкости <acronym>FFI</acronym> для  \n"
"<code>curl_easy_setopt</code> , не скрывая оставшиеся детали Си интерфейса, "
"которые \n"
"мы исследуем.\n"
"</p>"

#: in/CFFI_User_Manual.htm:1313
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002dMemory\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dCallbacks\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Callbacks</a>, Previous: <a href=\"#Tutorial_002dLisp-"
"easy_005fsetopt\" accesskey=\"p\" rel=\"prev\">Tutorial-Lisp easy_setopt</"
"a>, Up: <a href=\"#Tutorial\" accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; "
"[<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Memory-management\"></a>\n"
"<h3 class=\"section\">4.8 Memory management</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002dMemory\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dCallbacks\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Callbacks</a>, Previous: <a href=\"#Tutorial_002dLisp-"
"easy_005fsetopt\" accesskey=\"p\" rel=\"prev\">Tutorial-Lisp easy_setopt</"
"a>, Up: <a href=\"#Tutorial\" accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; "
"[<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Memory-management\"></a>\n"
"<h3 class=\"section\">4.8 Управление памятью</h3>"

#: in/CFFI_User_Manual.htm:1332
msgid ""
"<p>According to the documentation for <code>curl_easy_setopt</code>, the "
"type\n"
"of the third argument when <var>option</var> is <code>CURLOPT_ERRORBUFFER</"
"code>\n"
"is <code>char*</code>.  Above, weâve defined\n"
"<code>set-curl-option-errorbuffer</code> to accept a <code>:pointer</code> "
"as the\n"
"new option value.  However, there is a <acronym>CFFI</acronym> type <code>:"
"string</code>,\n"
"which translates Lisp strings to C strings when passed as arguments to\n"
"foreign function calls.  Why not, then, use <code>:string</code> as the\n"
"<acronym>CFFI</acronym> type of the third argument?  There are two reasons, "
"both\n"
"related to the necessity of breaking abstraction described in\n"
"<a href=\"#Tutorial_002dAbstraction\">Breaking the abstraction</a>.\n"
"</p>\n"
"<p>The first reason also applies to <code>CURLOPT_URL</code>, which we will "
"use\n"
"to illustrate the point.  Assuming we have changed the type of the\n"
"third argument underlying <code>set-curl-option-url</code> to\n"
"<code>:string</code>, look at these two equivalent forms.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">set-"
"curl-option-url <span class=\"special\">*easy-handle*</span> <span class="
"\"string\">\"http://www.cliki.net/CFFI\"</span></span>)</span>"
msgstr ""
"<p>Согласно документации для <code>curl_easy_setopt</code>, тип третьего "
"аргумента,\n"
"когда опция(<var>option</var>) имеет  значение <code>CURLOPT_ERRORBUFFER</"
"code>\n"
"это <code>char*</code>.  Выше мы определили <code>set-curl-option-"
"errorbuffer</code> \n"
"для принятия указателя <code>:pointer</code> в качестве значения нового "
"параметра.  \n"
"Однако, существует <acronym>CFFI</acronym> тип <code>:string</code>,\n"
"который переводит строки Lisp в строки C, когда они передаются в качестве "
"аргументов\n"
"для вызова внешних функций.  Тогда почему бы не использовать <code>:string</"
"code> в\n"
"качестве типа <acronym>CFFI</acronym> для третьего аргумента?  Есть две "
"причины, и обе\n"
"связаны с необходиостью нарушения абстракции, описанной в разделе\n"
"<a href=\"#Tutorial_002dAbstraction\">Нарушение абстракции</a>.\n"
"</p>\n"
"<p>Первая причина также относится к <code>CURLOPT_URL</code>, который мы "
"будем\n"
"использовать, чтобы проилюстрировать этот момент.  Предположим, что мы "
"изменили тип\n"
"третьего аргумента, лежащего в основе <code>set-curl-option-url</code> на \n"
"<code>:string</code>, рассмотрим эти две эквивалентные формы.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">set-"
"curl-option-url <span class=\"special\">*easy-handle*</span> <span class="
"\"string\">\"http://www.cliki.net/CFFI\"</span></span>)</span>"

#: in/CFFI_User_Manual.htm:1337
msgid ""
"  &amp;equiv; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-string</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\">url <span class=\"string\">\"http://www.cliki.net/CFFI\"</"
"span></span>)</span>\n"
"       <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-funcall <span "
"class=\"string\">\"curl_easy_setopt\"</span> easy-handle <span class="
"\"special\">*easy-handle*</span>\n"
"                        curl-option <span class=\"keyword\">:url</span> "
"<span class=\"keyword\">:pointer</span> url curl-code</span>)</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:1380
msgid ""
"<p>The latter, in fact, is mostly equivalent to what a foreign function\n"
"callâs macroexpansion actually does.  As you can see, the Lisp string\n"
"<code>\"http://www.cliki.net/CFFI\"</code> is copied into a <code>char</"
"code> array and\n"
"null-terminated; the pointer to beginning of this array, now a C\n"
"string, is passed as a <acronym>CFFI</acronym> <code>:pointer</code> to the "
"foreign\n"
"function.\n"
"</p>\n"
"<a name=\"index-dynamic-extent\"></a>\n"
"<a name=\"index-foreign-values-with-dynamic-extent\"></a>\n"
"<p>Unfortunately, the C abstraction has failed us, and we must break it.\n"
"While <code>:string</code> works well for many <code>char*</code> arguments, "
"it\n"
"does not for cases like this.  As the <code>curl_easy_setopt</code>\n"
"documentation explains, âThe string must remain present until curl no\n"
"longer needs it, as it doesnât copy the string.â  The C string\n"
"created by <code>with-foreign-string</code>, however, only has dynamic\n"
"extent: it is âdeallocatedâ when the body (above containing the\n"
"<code>foreign-funcall</code> form) exits.\n"
"</p>\n"
"<a name=\"index-premature-deallocation\"></a>\n"
"<p>If we are supposed to keep the C string around, but it goes away, what\n"
"happens when some <code>libcurl</code> function tries to access the\n"
"<acronym>URL</acronym> string?  We have reentered the dreaded world of C\n"
"âundefined behaviorâ.  In some Lisps, it will probably get a chunk\n"
"of the Lisp/C stack.  You may segfault.  You may get some random piece\n"
"of other data from the heap.  Maybe, in a world where âdynamic\n"
"extentâ is defined to be âinfinite extentâ, everything will turn\n"
"out fine.  Regardless, results are likely to be almost universally\n"
"unpleasant.<a name=\"DOCF7\" href=\"#FOOT7\"><sup>7</sup></a>\n"
"</p>\n"
"<p>Returning to the current <code>set-curl-option-url</code> interface, here "
"is\n"
"what we must do:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">let</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\">easy-handle</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">unwind-protect</span></i>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-foreign-string</span></i> <span class=\"paren4\">(<span class=\"lisp-"
"bg\">url <span class=\"string\">\"http://www.cliki.net/CFFI\"</span></"
"span>)</span>\n"
"        <span class=\"paren4\">(<span class=\"lisp-bg\">setf easy-handle "
"<span class=\"paren5\">(<span class=\"lisp-bg\">curl-easy-init</span>)</"
"span></span>)</span>\n"
"        <span class=\"paren4\">(<span class=\"lisp-bg\">set-curl-option-url "
"easy-handle url</span>)</span>\n"
"        <span class=\"comment\">#|do more with the easy-handle, like "
"actually get the URL|#</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">when easy-handle\n"
"        <span class=\"paren4\">(<span class=\"lisp-bg\">curl-easy-cleanup "
"easy-handle</span>)</span></span>)</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Последняя, на самом деле, в основном эквивалентно тому, что на самом деле "
"делает\n"
"макрорасширение  вызова внешней функции.  Как видите, строка Lisp \n"
"<code>\"http://www.cliki.net/CFFI\"</code> копируется в массив <code>char</"
"code> и\n"
"заканчивается нулевым символом(null-terminated); указатель на начало этого "
"массива, \n"
"теперь это строка Си, передаваемая как <acronym>CFFI</acronym> <code>:"
"pointer</code> во\n"
"внешнюю функцию.\n"
"</p>\n"
"<a name=\"index-dynamic-extent\"></a>\n"
"<a name=\"index-foreign-values-with-dynamic-extent\"></a>\n"
"<p>К сожалению, Си абстракция подвела нас, и мы должны её нарушить! Хотя \n"
"<code>:string</code> хорошо работает для многих <code>char*</code> "
"аргументов, она\n"
"не подходит для случаев, подобных этому.  Как объясняется в документациии "
"по \n"
"<code>curl_easy_setopt</code>, âСтрока должна оставаться в наличии до тех "
"пор, пока\n"
"нужен curl, поскольку она не копируется.â  Однако, Си строкаа, созданная с "
"помощью\n"
"<code>with-foreign-string</code>, существует только в динамическом "
"пространстве\n"
"выполняемого блока кода(dynamic extent): т.е она будет уничтожена "
"(âdeallocatedâ) когда управление\n"
"покинет тело формы(выше, содержащее вызов формы <code>foreign-funcall</"
"code>).\n"
"</p>\n"
"<a name=\"index-premature-deallocation\"></a>\n"
"<p>Если мы должны хранить строку Си, а она исчезнет, что произойдет, когда\n"
"какая либо функция <code>libcurl</code> попробует получить доступ к строке\n"
"<acronym>URL</acronym>?  Мы вернулись в страшный мир Си\n"
"â(повдение не определено)undefined behaviorâ.  В некоторых Лиспах, он\n"
"вероятно получит кусок стека Lisp/C.  Возможно ошибку сегментации.  Вы "
"можете\n"
"получить некоторую слчайную часть других данных из кучи.  Может, быть в "
"мире,\n"
"где âдинамическое пространство выполняемого блока(dynamic\n"
"extent)â определяется как âбесконечное пространство/бесконечное время жизни\n"
"локальных привязок(infinite extent)â, все и будет хорошо.  Несмотря на это,\n"
"результаты, вероятно, повсеместно будут неприятными.\n"
"<a name=\"DOCF7\" href=\"#FOOT7\"><sup>7</sup></a>\n"
"</p>\n"
"<p>Вернемся к текущему интерфейсу <code>set-curl-option-url</code>, вот что "
"мы\n"
"должны сделать:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">let</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\">easy-handle</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">unwind-protect</span></i>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-foreign-string</span></i> <span class=\"paren4\">(<span class=\"lisp-"
"bg\">url <span class=\"string\">\"http://www.cliki.net/CFFI\"</span></"
"span>)</span>\n"
"        <span class=\"paren4\">(<span class=\"lisp-bg\">setf easy-handle "
"<span class=\"paren5\">(<span class=\"lisp-bg\">curl-easy-init</span>)</"
"span></span>)</span>\n"
"        <span class=\"paren4\">(<span class=\"lisp-bg\">set-curl-option-url "
"easy-handle url</span>)</span>\n"
"        <span class=\"comment\">#|do more with the easy-handle, like "
"actually get the URL|#</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">when easy-handle\n"
"        <span class=\"paren4\">(<span class=\"lisp-bg\">curl-easy-cleanup "
"easy-handle</span>)</span></span>)</span></span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1409
msgid ""
"<p>That is fine for the single string defined here, but for every string\n"
"option we want to pass, we have to surround the body of\n"
"<code>with-foreign-string</code> with another <code>with-foreign-string</"
"code>\n"
"wrapper, or else do some extremely error-prone pointer manipulation\n"
"and size calculation in advance.  We could alleviate some of the pain\n"
"with a recursively expanding macro, but this would not remove the need\n"
"to modify the block every time we want to add an option, anathema as\n"
"it is to a modular interface.\n"
"</p>\n"
"<p>Before modifying the code to account for this case, consider the other\n"
"reason we canât simply use <code>:string</code> as the foreign type.  In C,\n"
"a <code>char *</code> is a <code>char *</code>, not necessarily a string.  "
"The\n"
"option <code>CURLOPT_ERRORBUFFER</code> accepts a <code>char *</code>, but "
"does\n"
"not expect anything about the data there.  However, it does expect\n"
"that some <code>libcurl</code> function we call later can write a C string\n"
"of up to 255 characters there.  We, the callers of the function, are\n"
"expected to read the C string at a later time, exactly the opposite of\n"
"what <code>:string</code> implies.\n"
"</p>\n"
"<p>With the semantics for an input string in mind â namely, that the\n"
"string should be kept around until we <code>curl_easy_cleanup</code> the\n"
"easy handle â we are ready to extend the Lisp interface:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defvar</span></i> <span class=\"special\">*easy-"
"handle-cstrings*</span> <span class=\"paren2\">(<span class=\"lisp-bg\">make-"
"hash-table</span>)</span>\n"
"    <span class=\"string\">\"Hashtable of easy handles to lists of C strings "
"that may be\n"
"  safely freed after the handle is freed.\"</span></span>)</span>"
msgstr ""
"<p>Это хорошо для единственной строки, определенной здесь, но для каждой\n"
"строковой опции, которую мы хотим передать, мы должны окружить тело кода\n"
"<code>with-foreign-string</code> другой оберткой <code>with-foreign-string</"
"code>, \n"
"или создать некоторый чрезвычайно подверженный ошибкам указатель с расчетом\n"
"размеров заранее.  Мы могли бы облегчить некоторые проблемы с помощью "
"рекурсивно\n"
"расширяющегося макроса, но это не избавило бы от необходимости изменять "
"блок\n"
"каждый раз, когда мы хотим добавить опцию, анафему, как она есть в "
"модульном\n"
"интерфейсе.\n"
"</p>\n"
"<p>Прежде чем изменять код для учета этого случая, рассмотрим другую "
"причину,\n"
"по которой мы не можем просто использовать <code>:string</code> в качестве "
"внешнего\n"
"типа.  В Си, <code>char *</code> это <code>char *</code>, не обязательно "
"строка.  \n"
"Опция <code>CURLOPT_ERRORBUFFER</code> принимает <code>char *</code>, но "
"ничего не ожидает\n"
"от данных из нее.  Тем не менее, она ожидает, что некоторая функция\n"
"<code>libcurl</code>, которую мы вызовем позже, может записать туда Си "
"строку длиной до\n"
"255 символов.  Ожидается, что мы, вызывающие эту функцию, будем читать Си "
"строку позднее,\n"
"что прямо противоположно тому, что подразумевает тип <code>:string</code>.\n"
"</p>\n"
"<p>Имея в виду семантику входной строки, а именно то, что строка должна "
"храниться до тех пор,\n"
"пока мы не закроем дескриптор используя <code>curl_easy_cleanup</code>, мы\n"
"готовы к тому, чтобы расширитьт интерфейс Lisp:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defvar</span></i> <span class=\"special\">*easy-"
"handle-cstrings*</span> <span class=\"paren2\">(<span class=\"lisp-bg\">make-"
"hash-table</span>)</span>\n"
"    <span class=\"string\">\"Hashtable of easy handles to lists of C strings "
"that may be\n"
"  safely freed after the handle is freed.\"</span></span>)</span>"

#: in/CFFI_User_Manual.htm:1416
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defun</span></i> make-easy-handle <span class=\"paren2\">(<span class="
"\"lisp-bg\"></span>)</span>\n"
"    <span class=\"string\">\"Answer a new CURL easy interface handle, to "
"which the lifetime\n"
"  of C strings may be tied.  See `add-curl-handle-cstring'.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">let</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"paren4\">(<span class=\"lisp-bg\">easy-handle <span class="
"\"paren5\">(<span class=\"lisp-bg\">curl-easy-init</span>)</span></span>)</"
"span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">setf <span class="
"\"paren4\">(<span class=\"lisp-bg\">gethash easy-handle <span class=\"special"
"\">*easy-handle-cstrings*</span></span>)</span> '<span class="
"\"paren4\">(<span class=\"lisp-bg\"></span>)</span></span>)</span>\n"
"      easy-handle</span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1424
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defun</span></i> free-easy-handle <span class=\"paren2\">(<span class="
"\"lisp-bg\">handle</span>)</span>\n"
"    <span class=\"string\">\"Free CURL easy interface HANDLE and any C "
"strings created to\n"
"  be its options.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">curl-easy-cleanup "
"handle</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">mapc #'foreign-string-"
"free\n"
"          <span class=\"paren3\">(<span class=\"lisp-bg\">gethash handle "
"<span class=\"special\">*easy-handle-cstrings*</span></span>)</span></"
"span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">remhash handle <span "
"class=\"special\">*easy-handle-cstrings*</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1429
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defun</span></i> add-curl-handle-cstring <span class=\"paren2\">(<span "
"class=\"lisp-bg\">handle cstring</span>)</span>\n"
"    <span class=\"string\">\"Add CSTRING to be freed when HANDLE is, "
"answering CSTRING.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">car <span class="
"\"paren3\">(<span class=\"lisp-bg\">push cstring <span class="
"\"paren4\">(<span class=\"lisp-bg\">gethash handle <span class=\"special"
"\">*easy-handle-cstrings*</span></span>)</span></span>)</span></span>)</"
"span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:1446
msgid ""
"<p>Here we have redefined the interface to create and free handles, to\n"
"associate a list of allocated C strings with each handle while it\n"
"exists.  The strategy of using different function names to wrap around\n"
"simple foreign functions is more common than the solution implemented\n"
"earlier with <code>curry-curl-option-setter</code>, which was to modify the\n"
"function nameâs function slot.<a name=\"DOCF8\" href=\"#FOOT8\"><sup>8</"
"sup></a>\n"
"</p>\n"
"<p>Incidentally, the next step is to redefine\n"
"<code>curry-curl-option-setter</code> to allocate C strings for the\n"
"appropriate length of time, given a Lisp string as the\n"
"<code>new-value</code> argument:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defun</span></i> curry-curl-option-setter <span "
"class=\"paren2\">(<span class=\"lisp-bg\">function-name option-keyword</"
"span>)</span>\n"
"    <span class=\"string\">\"Wrap the function named by FUNCTION-NAME with a "
"version that\n"
"  curries the second argument as OPTION-KEYWORD."
msgstr ""
"<p>Здесь мы переопределяем интерфейс для создания и освобождения "
"дескрипторов.,\n"
"чтобы связать список выделенных Си строк с каждым рабочим дескриптором, до "
"тех\n"
"пор пока он существует.  Стратегия использования различных имен функций для\n"
"окружения простых внешний функций встречается чаще, чем решение, "
"реализованное\n"
"ранее с помощью <code>curry-curl-option-setter</code>, которая должна была "
"изменить\n"
"слот функции именем функции.<a name=\"DOCF8\" href=\"#FOOT8\"><sup>8</sup></"
"a>\n"
"</p>\n"
"<p>Кстати, следующим шагом является переопределение <code>curry-curl-option-"
"setter</code> \n"
"для выделения Си строк на соответствующий отрезок времени, учитывая строку "
"Lisp в\n"
"качестве аргумента <code>new-value</code>:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defun</span></i> curry-curl-option-setter <span "
"class=\"paren2\">(<span class=\"lisp-bg\">function-name option-keyword</"
"span>)</span>\n"
"    <span class=\"string\">\"Wrap the function named by FUNCTION-NAME with a "
"version that\n"
"  curries the second argument as OPTION-KEYWORD."

#: in/CFFI_User_Manual.htm:1458
msgid ""
"  This function is intended for use in DEFINE-CURL-OPTION-SETTER.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">setf <span class="
"\"paren3\">(<span class=\"lisp-bg\">symbol-function function-name</span>)</"
"span>\n"
"            <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">let</span></i> <span class=\"paren4\">(<span class=\"lisp-bg"
"\"><span class=\"paren5\">(<span class=\"lisp-bg\">c-function <span class="
"\"paren6\">(<span class=\"lisp-bg\">symbol-function function-name</span>)</"
"span></span>)</span></span>)</span>\n"
"              <span class=\"paren4\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">lambda</span></i> <span class=\"paren5\">(<span class=\"lisp-bg"
"\">easy-handle new-value</span>)</span>\n"
"                <span class=\"paren5\">(<span class=\"lisp-bg\">funcall c-"
"function easy-handle option-keyword\n"
"                         <span class=\"paren6\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">if</span></i> <span class=\"paren1\">(<span "
"class=\"lisp-bg\">stringp new-value</span>)</span>\n"
"                           <span class=\"paren1\">(<span class=\"lisp-bg"
"\">add-curl-handle-cstring\n"
"                            easy-handle\n"
"                            <span class=\"paren2\">(<span class=\"lisp-bg"
"\">foreign-string-alloc new-value</span>)</span></span>)</span>\n"
"                           new-value</span>)</span></span>)</span></span>)</"
"span></span>)</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:1475
msgid ""
"<p>A quick analysis of the code shows that you need only reevaluate the\n"
"<code>curl-option</code> enumeration definition to take advantage of these\n"
"new semantics.  Now, for good measure, letâs reallocate the handle\n"
"with the new functions we just defined, and set its <acronym>URL</acronym>:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (curl-easy-cleanup *easy-handle*)\n"
"⇒ NIL\n"
"CFFI-USER&gt; (setf *easy-handle* (make-easy-handle))\n"
"⇒ #&lt;FOREIGN-ADDRESS #x09844EE0&gt;\n"
"CFFI-USER&gt; (set-curl-option-nosignal *easy-handle* 1)\n"
"⇒ 0\n"
"CFFI-USER&gt; (set-curl-option-url *easy-handle*\n"
"                                \"http://www.cliki.net/CFFI\")\n"
"⇒ 0\n"
"</pre></div>"
msgstr ""
"<p>Быстрый анализ кода показывает, что нам нужно только пересмотреть "
"определение\n"
"перечисления <code>curl-option</code>, чтобы воспользоваться преимуществами "
"этой\n"
"новой семантики.  Теперь, для хорошей проверки, давайте перераспределим "
"дескриптор\n"
"с использованием новых функций, которые мы только что определили, и "
"установим\n"
"с их помощью <acronym>URL</acronym>:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (curl-easy-cleanup *easy-handle*)\n"
"⇒ NIL\n"
"CFFI-USER&gt; (setf *easy-handle* (make-easy-handle))\n"
"⇒ #&lt;FOREIGN-ADDRESS #x09844EE0&gt;\n"
"CFFI-USER&gt; (set-curl-option-nosignal *easy-handle* 1)\n"
"⇒ 0\n"
"CFFI-USER&gt; (set-curl-option-url *easy-handle*\n"
"                                \"http://www.cliki.net/CFFI\")\n"
"⇒ 0\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1487
msgid ""
"<a name=\"index-strings\"></a>\n"
"<p>For fun, letâs inspect the Lisp value of the C string that was created\n"
"to hold <code>\"http://www.cliki.net/CFFI\"</code>.  By virtue of the "
"implementation of\n"
"<code>add-curl-handle-cstring</code>, it should be accessible through the\n"
"hash table defined:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (foreign-string-to-lisp\n"
"            (car (gethash *easy-handle* *easy-handle-cstrings*)))\n"
"⇒ \"http://www.cliki.net/CFFI\"\n"
"</pre></div>"
msgstr ""
"<a name=\"index-strings\"></a>\n"
"<p>Для интереса, давайте проверим значение Lisp строки Си, которая была "
"создана для\n"
"хранения <code>\"http://www.cliki.net/CFFI\"</code>.  Благодаря реализации\n"
"<code>add-curl-handle-cstring</code>, оно должно быть доступно через "
"определенную\n"
"хеш-таблицу:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (foreign-string-to-lisp\n"
"            (car (gethash *easy-handle* *easy-handle-cstrings*)))\n"
"⇒ \"http://www.cliki.net/CFFI\"\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1506
msgid ""
"<p>Looks like that worked, and <code>libcurl</code> now knows what\n"
"<acronym>URL</acronym> we want to retrieve.\n"
"</p>\n"
"<p>Finally, we turn back to the <code>:errorbuffer</code> option mentioned "
"at\n"
"the beginning of this section.  Whereas the abstraction added to\n"
"support string inputs works fine for cases like <code>CURLOPT_URL</code>, "
"it\n"
"hides the detail of keeping the C string; for <code>:errorbuffer</code>,\n"
"however, we need that C string.\n"
"</p>\n"
"<p>In a moment, weâll define something slightly cleaner, but for now,\n"
"remember that you can always hack around anything.  Weâre modifying\n"
"handle creation, so make sure you free the old handle before\n"
"redefining <code>free-easy-handle</code>.\n"
"</p>\n"
"<div class=\"smalllisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defvar</span></i> <span class=\"special\">*easy-"
"handle-errorbuffers*</span> <span class=\"paren2\">(<span class=\"lisp-bg"
"\">make-hash-table</span>)</span>\n"
"    <span class=\"string\">\"Hashtable of easy handles to C strings serving "
"as error\n"
"  writeback buffers.\"</span></span>)</span>"
msgstr ""
"<p>Похоже, это работает, и теперь <code>libcurl</code> знает, какой\n"
"<acronym>URL</acronym> мы хотим получить.\n"
"</p>\n"
"<p>Наконец, мы возвращаемся к опции <code>:errorbuffer</code>, упомянутой в "
"начале\n"
"этого раздела.  Принимая во внимание, что абстракция добавлена для "
"поддержки\n"
"входной строки, отлично работающая для случаев подобных <code>CURLOPT_URL</"
"code>, она\n"
"скрывает детали сохранения стороки Си; однако и для <code>:errorbuffer</"
"code>,\n"
"нам необходима подобная Си строка.\n"
"</p>\n"
"<p>Через мгновение, мы определим что-то немного более чистое, но пока "
"помните,\n"
"что вы всегда сможете это поменять.  Мы модифицируем создание дескрипторов,\n"
"поэтому перед повторным определением <code>free-easy-handle</code>, вы "
"должны\n"
"освободить старый дескриптор.\n"
"</p>\n"
"<div class=\"smalllisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defvar</span></i> <span class=\"special\">*easy-"
"handle-errorbuffers*</span> <span class=\"paren2\">(<span class=\"lisp-bg"
"\">make-hash-table</span>)</span>\n"
"    <span class=\"string\">\"Hashtable of easy handles to C strings serving "
"as error\n"
"  writeback buffers.\"</span></span>)</span>"

#: in/CFFI_User_Manual.htm:1510
msgid ""
"  <span class=\"comment\">;;; An extra byte is very little to pay for peace "
"of mind.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defparameter</span></i> <span class=\"special\">*curl-error-"
"size*</span> 257\n"
"    <span class=\"string\">\"Minimum char[] size used by cURL to report "
"errors.\"</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1520
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defun</span></i> make-easy-handle <span class=\"paren2\">(<span class="
"\"lisp-bg\"></span>)</span>\n"
"    <span class=\"string\">\"Answer a new CURL easy interface handle, to "
"which the lifetime\n"
"  of C strings may be tied.  See `add-curl-handle-cstring'.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">let</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"paren4\">(<span class=\"lisp-bg\">easy-handle <span class="
"\"paren5\">(<span class=\"lisp-bg\">curl-easy-init</span>)</span></span>)</"
"span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">setf <span class="
"\"paren4\">(<span class=\"lisp-bg\">gethash easy-handle <span class=\"special"
"\">*easy-handle-cstrings*</span></span>)</span> '<span class="
"\"paren4\">(<span class=\"lisp-bg\"></span>)</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">setf <span class="
"\"paren4\">(<span class=\"lisp-bg\">gethash easy-handle <span class=\"special"
"\">*easy-handle-errorbuffers*</span></span>)</span>\n"
"              <span class=\"paren4\">(<span class=\"lisp-bg\">foreign-alloc "
"<span class=\"keyword\">:char</span> <span class=\"keyword\">:count</span> "
"<span class=\"special\">*curl-error-size*</span>\n"
"                             <span class=\"keyword\">:initial-element</span> "
"0</span>)</span></span>)</span>\n"
"      easy-handle</span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1530
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defun</span></i> free-easy-handle <span class=\"paren2\">(<span class="
"\"lisp-bg\">handle</span>)</span>\n"
"    <span class=\"string\">\"Free CURL easy interface HANDLE and any C "
"strings created to\n"
"  be its options.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">curl-easy-cleanup "
"handle</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-free <span class="
"\"paren3\">(<span class=\"lisp-bg\">gethash handle <span class=\"special"
"\">*easy-handle-errorbuffers*</span></span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">remhash handle <span "
"class=\"special\">*easy-handle-errorbuffers*</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">mapc #'foreign-string-"
"free\n"
"          <span class=\"paren3\">(<span class=\"lisp-bg\">gethash handle "
"<span class=\"special\">*easy-handle-cstrings*</span></span>)</span></"
"span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">remhash handle <span "
"class=\"special\">*easy-handle-cstrings*</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1536
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defun</span></i> get-easy-handle-error <span class=\"paren2\">(<span "
"class=\"lisp-bg\">handle</span>)</span>\n"
"    <span class=\"string\">\"Answer a string containing HANDLE's current "
"error message.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-string-to-lisp\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\">gethash handle <span "
"class=\"special\">*easy-handle-errorbuffers*</span></span>)</span></span>)</"
"span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:1540
msgid ""
"<p>Be sure to once again set the options weâve set thus far.  You may\n"
"wish to define yet another wrapper function to do this.\n"
"</p>"
msgstr ""
"<p>Не забудьте еще раз установить параметры, которые мы устанавливали до сих "
"пор.\n"
"Вы можете определить еще одну функцию обертку для этого.\n"
"</p>"

#: in/CFFI_User_Manual.htm:1549
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002dCallbacks\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dCompletion\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Completion</a>, Previous: <a href=\"#Tutorial_002dMemory\" "
"accesskey=\"p\" rel=\"prev\">Tutorial-Memory</a>, Up: <a href=\"#Tutorial\" "
"accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Calling-Lisp-from-C\"></a>\n"
"<h3 class=\"section\">4.9 Calling Lisp from C</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002dCallbacks\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dCompletion\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Completion</a>, Previous: <a href=\"#Tutorial_002dMemory\" "
"accesskey=\"p\" rel=\"prev\">Tutorial-Memory</a>, Up: <a href=\"#Tutorial\" "
"accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Calling-Lisp-from-C\"></a>\n"
"<h3 class=\"section\">4.9 Вызов Lisp из Си</h3>"

#: in/CFFI_User_Manual.htm:1578
msgid ""
"<p>If you have been reading\n"
"<a href=\"http://curl.haxx.se/libcurl/c/curl_easy_setopt.html"
"\"><code>curl_easy_setopt(3)</code></a>, you should have noticed that some "
"options\n"
"accept a function pointer.  In particular, we need one function\n"
"pointer to set as <code>CURLOPT_WRITEFUNCTION</code>, to be called by\n"
"<code>libcurl</code> rather than the reverse, in order to receive data as "
"it\n"
"is downloaded.\n"
"</p>\n"
"<p>A binding writer without the aid of <acronym>FFI</acronym> usually "
"approaches\n"
"this problem by writing a C function that accepts C data, converts to\n"
"the languageâs internal objects, and calls the callback provided by\n"
"the user, again in a reverse of usual practices.\n"
"</p>\n"
"<p>The <acronym>CFFI</acronym> approach to callbacks precisely mirrors its "
"differences\n"
"with the non-<acronym>FFI</acronym> approach on the âcalling C from Lispâ\n"
"side, which we have dealt with exclusively up to now.  That is, you\n"
"define a callback function in Lisp using <code>defcallback</code>, and\n"
"<acronym>CFFI</acronym> effectively creates a C function to be passed as a "
"function\n"
"pointer.\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Implementorâs note:</strong> <em>This is much trickier than "
"calling C functions from Lisp, as\n"
"it literally involves somehow generating a new C function that is as\n"
"good as any created by the compiler.  Therefore, not all Lisps support\n"
"them.  See <a href=\"#Implementation-Support\">Implementation Support</a>, "
"for information about <acronym>CFFI</acronym>\n"
"support issues in this and other areas.  You may want to consider\n"
"changing to a Lisp that supports callbacks in order to continue with\n"
"this tutorial.</em>\n"
"</p></blockquote>"
msgstr ""
"<p>Если вы читали \n"
"<a href=\"http://curl.haxx.se/libcurl/c/curl_easy_setopt.html"
"\"><code>curl_easy_setopt(3)</code></a>, \n"
"вы должны были заметить, что некоторые опции принимают указатель на функцию. "
"В частности,\n"
"нам нужен один указатель на функцию  <code>CURLOPT_WRITEFUNCTION</code>, "
"который вызывается из\n"
"<code>libcurl</code>, а не наоборот, чтобы получать данные по мере их "
"загрузки.\n"
"</p>\n"
"<p>Автор биндинга без помощи  <acronym>FFI</acronym> обычно подходит к этой "
"проблеме,\n"
"написав функцию Си, которая принимает данные Си, конвертирует их во "
"внутренние объекты\n"
"языка и вызывает обратный вызов, предоставленный пользователем, опять же в "
"противоположность\n"
"обычной практике.\n"
"</p>\n"
"<p>Подход <acronym>CFFI</acronym> к обратным вызовам точно отражает его "
"различия с\n"
"подходом не-<acronym>FFI</acronym> в части âВызовов Си из Lispâ, \n"
"который мы рассматривали до сих пор.  То есть, вы определяете функцию "
"обратного вызова\n"
"в Lisp используя <code>defcallback</code>, и <acronym>CFFI</acronym> "
"эффективно создает\n"
"функцию Си, которая будет передана как указатель на функцию.\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Примечание разработчика:</strong> <em>это на много сложнее, чем "
"вызвать\n"
"Си функцию из Lisp, так как буквально включает в себя как-то генерацию новой "
"функции\n"
"Си, которая так же хороша, как и любая другая, созданная компилятором. "
"Поэтому не все\n"
"Lisp-ы их поддерживают.  См. <a href=\"#Implementation-Support"
"\">Поддерживаемые Реализации</a>, \n"
"для получения информации о проблемах поддержки <acronym>CFFI</acronym>\n"
"в этой и других областях. Возможно, вы захотите перейти на Lisp который "
"поддерживает обратные\n"
"вызовы, чтобы продолжить это обучение.</em>\n"
"</p></blockquote>"

#: in/CFFI_User_Manual.htm:1590
msgid ""
"<a name=\"index-callback-definition\"></a>\n"
"<a name=\"index-defining-callbacks\"></a>\n"
"<p>Defining a callback is very similar to defining a callout; the main\n"
"difference is that we must provide some Lisp forms to be evaluated as\n"
"part of the callback.  Here is the signature for the function the\n"
"<code>:writefunction</code> option takes:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">size_t\n"
"<var>function</var>(void *ptr, size_t size, size_t nmemb, void *stream);\n"
"</pre></div>"
msgstr ""
"<a name=\"index-callback-definition\"></a>\n"
"<a name=\"index-defining-callbacks\"></a>\n"
"<p>Определение обратного вызова очень похоже на определение исходящего\n"
"вызова; Основное отличие состоит в том, что мы должны предоставить "
"некоторые\n"
"формы Lisp для вычисления, как часть обратного вызова. Вот шаблон для "
"функции,\n"
"которую принимает опция <code>:writefunction</code>:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">size_t\n"
"<var>function</var>(void *ptr, size_t size, size_t nmemb, void *stream);\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1596
msgid ""
"<blockquote>\n"
"<p><strong>Implementorâs note:</strong> <em>size_t is almost always an "
"unsigned int.  You can get this\n"
"and many other types using feature tests for your system by using\n"
"cffi-grovel.</em>\n"
"</p></blockquote>"
msgstr ""
"<blockquote>\n"
"<p><strong>Примечание разработчика:</strong> <em>size_t почти всегда это "
"unsigned int.  Вы можете получить\n"
"этот и многие другие типы, используя функциональные тесты для вашей системы, "
"используя \n"
"cffi-grovel.</em>\n"
"</p></blockquote>"

#: in/CFFI_User_Manual.htm:1603
msgid ""
"<p>The above signature trivially translates into a <acronym>CFFI</acronym>\n"
"<code>defcallback</code> form, as follows.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Alias in case size_t "
"changes.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defctype</span></i> size <span class=\"keyword\">:unsigned-int</"
"span></span>)</span>"
msgstr ""
"<p>Приведенный выше шаблон элементарно переводится в <acronym>CFFI</acronym> "
"форму\n"
"<code>defcallback</code>, следующим образом.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Alias in case size_t "
"changes.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defctype</span></i> size <span class=\"keyword\">:unsigned-int</"
"span></span>)</span>"

#: in/CFFI_User_Manual.htm:1618
msgid ""
"  <span class=\"comment\">;;; To be set as the CURLOPT_WRITEFUNCTION of "
"every easy handle.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defcallback</span></i> easy-write size <span class="
"\"paren2\">(<span class=\"lisp-bg\"><span class=\"paren3\">(<span class="
"\"lisp-bg\">ptr <span class=\"keyword\">:pointer</span></span>)</span> <span "
"class=\"paren3\">(<span class=\"lisp-bg\">size size</span>)</span>\n"
"                                <span class=\"paren3\">(<span class=\"lisp-bg"
"\">nmemb size</span>)</span> <span class=\"paren3\">(<span class=\"lisp-bg"
"\">stream <span class=\"keyword\">:pointer</span></span>)</span></span>)</"
"span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">let</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"paren4\">(<span class=\"lisp-bg\">data-size <span class="
"\"paren5\">(<span class=\"lisp-bg\">* size nmemb</span>)</span></span>)</"
"span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">handler-case\n"
"        <span class=\"comment\">;; We use the dynamically-bound *easy-write-"
"procedure* to\n"
"  </span>      <span class=\"comment\">;; call a closure with useful lexical "
"context.\n"
"  </span>      <span class=\"paren4\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">progn</span></i> <span class=\"paren5\">(<span class=\"lisp-"
"bg\">funcall <span class=\"paren6\">(<span class=\"lisp-bg\">symbol-value "
"'<span class=\"special\">*easy-write-procedure*</span></span>)</span>\n"
"                        <span class=\"paren6\">(<span class=\"lisp-bg"
"\">foreign-string-to-lisp ptr <span class=\"keyword\">:count</span> data-"
"size</span>)</span></span>)</span>\n"
"               data-size</span>)</span>         <span class=\"comment\">;"
"indicates success\n"
"  </span>      <span class=\"comment\">;; The WRITEFUNCTION should return "
"something other than the\n"
"  </span>      <span class=\"comment\">;; #bytes available to signal an "
"error.\n"
"  </span>      <span class=\"paren4\">(<span class=\"lisp-bg\">error <span "
"class=\"paren5\">(<span class=\"lisp-bg\"></span>)</span> <span class="
"\"paren5\">(<span class=\"lisp-bg\"><i><span class=\"symbol\">if</span></i> "
"<span class=\"paren6\">(<span class=\"lisp-bg\">zerop data-size</span>)</"
"span> 1 0</span>)</span></span>)</span></span>)</span></span>)</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:1654
msgid ""
"<p>First, note the correlation of the first few forms, used to declare\n"
"the C functionâs signature, with the signature in C syntax.  We\n"
"provide a Lisp name for the function, its return type, and a name and\n"
"type for each argument.\n"
"</p>\n"
"<p>In the body, we call the dynamically-bound\n"
"<code>*easy-write-procedure*</code> with a âfinishedâ translation, of\n"
"pulling together the raw data and size into a Lisp string, rather than\n"
"deal with the data directly.  As part of calling\n"
"<code>curl_easy_perform</code> later, weâll bind that variable to a closure\n"
"with more useful lexical bindings than the top-level\n"
"<code>defcallback</code> form.\n"
"</p>\n"
"<p>Finally, we make a halfhearted effort to prevent non-local exits from\n"
"unwinding the C stack, covering the most likely case with an\n"
"<code>error</code> handler, which is usually triggered\n"
"unexpectedly.<a name=\"DOCF9\" href=\"#FOOT9\"><sup>9</sup></a>  The reason "
"is that most C code is written to\n"
"understand its own idiosyncratic error condition, implemented above in\n"
"the case of <code>curl_easy_perform</code>, and more âundefined behaviorâ\n"
"can result if we just wipe C stack frames without allowing them to\n"
"execute whatever cleanup actions as they like.\n"
"</p>\n"
"<p>Using the <code>CURLoption</code> enumeration in <samp>curl.h</samp> once "
"more, we\n"
"can describe the new option by modifying and reevaluating\n"
"<code>define-curl-options</code>.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-curl-options</span></i> curl-option\n"
"      <span class=\"paren2\">(<span class=\"lisp-bg\">long 0 objectpoint "
"10000 functionpoint 20000 off-t 30000</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"noprogress</span> long 43</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"nosignal</span> long 99</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"errorbuffer</span> objectpoint 10</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"url</span> objectpoint 2</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"writefunction</span> functionpoint 11</span>)</span></span>)</span> ;new "
"item here\n"
"</pre></div>"
msgstr ""
"<p>Во первых, обратите внимание, на корреляцию первых нескольких форм, "
"используемых\n"
"для объявления Си функции шаблона, с шаблоном в Си синтаксисе.  Мы "
"предоставляем\n"
"имя Lisp для функции, ее возвращаемый тип, а также имя и тип для каждого "
"аргумента.\n"
"</p>\n"
"<p>В теле мы вызываем динамически связанную  процедуру \n"
"<code>*easy-write-procedure*</code> с âокончательнойâ обработкой, которая\n"
"объединяет необработанные данные и их размер в строку Lisp, а не "
"обрабатывает\n"
"данные напрямую.  Как часть вызова <code>curl_easy_perform</code> позже, мы "
"свяжем\n"
"эту переменную с замыканием с более полезными лексическими привязками, чем\n"
"форма верхнего уровня <code>defcallback</code>.\n"
"</p>\n"
"<p>Наконец, мы прилагаем небольшие усилия, чтобы предотвратить выход из\n"
"разматываемого(unwinding) стека Си, закрывая наиболее вероятный случай с \n"
"помощью обработчика ошибок <code>error</code>, который обычно запускается "
"неожиданно.\n"
"<a name=\"DOCF9\" href=\"#FOOT9\"><sup>9</sup></a>  Причина в том, что "
"большая часть кода\n"
"Си написана так, чтобы понимать свое собственное уникальное условие ошибки, "
"реализованное\n"
"выше в случае <code>curl_easy_perform</code>, и далее âнеопределенное "
"поведение(undefined behavior)â\n"
"может привести к тому, что мы просто сотрём кадры стека Си, не позволяя им "
"выполнить какие либо действия\n"
"по очистке, которые им необходимо выполнять.\n"
"</p>\n"
"<p>Используя перечисление <code>CURLoption</code> в <samp>curl.h</samp> еще "
"раз, мы\n"
"можем описать новую опцию, изменив и пересчитав\n"
"<code>define-curl-options</code>.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-curl-options</span></i> curl-option\n"
"      <span class=\"paren2\">(<span class=\"lisp-bg\">long 0 objectpoint "
"10000 functionpoint 20000 off-t 30000</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"noprogress</span> long 43</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"nosignal</span> long 99</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"errorbuffer</span> objectpoint 10</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"url</span> objectpoint 2</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"writefunction</span> functionpoint 11</span>)</span></span>)</span> ;new "
"item here\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1665
msgid ""
"<p>Finally, we can use the defined callback and the new\n"
"<code>set-curl-option-writefunction</code> to finish configuring the easy\n"
"handle, using the <code>callback</code> macro to retrieve a <acronym>CFFI</"
"acronym>\n"
"<code>:pointer</code>, which works like a function pointer in C code.\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (set-curl-option-writefunction\n"
"            *easy-handle* (callback easy-write))\n"
"⇒ 0\n"
"</pre></div>"
msgstr ""
"<p>Наконец мы можем использовать определенный обратный вызов и новую \n"
"<code>set-curl-option-writefunction</code> для завершения настройки\n"
"простого дескриптора, используя макрос <code>callback</code> для получения\n"
"<acronym>CFFI</acronym> <code>:pointer</code>, который работает как "
"указатель\n"
"на функцию в коде Си.\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (set-curl-option-writefunction\n"
"            *easy-handle* (callback easy-write))\n"
"⇒ 0\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1675
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002dCompletion\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dTypes\" accesskey=\"n\" rel=\"next\">Tutorial-"
"Types</a>, Previous: <a href=\"#Tutorial_002dCallbacks\" accesskey=\"p\" rel="
"\"prev\">Tutorial-Callbacks</a>, Up: <a href=\"#Tutorial\" accesskey=\"u\" "
"rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"A-complete-FFI_003f\"></a>\n"
"<h3 class=\"section\">4.10 A complete <acronym>FFI</acronym>?</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002dCompletion\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dTypes\" accesskey=\"n\" rel=\"next\">Tutorial-"
"Types</a>, Previous: <a href=\"#Tutorial_002dCallbacks\" accesskey=\"p\" rel="
"\"prev\">Tutorial-Callbacks</a>, Up: <a href=\"#Tutorial\" accesskey=\"u\" "
"rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"A-complete-FFI_003f\"></a>\n"
"<h3 class=\"section\">4.10 Полный <acronym>FFI</acronym>?</h3>"

#: in/CFFI_User_Manual.htm:1685
msgid ""
"<p>With all options finally set and a medium-level interface developed,\n"
"we can finish the definition and retrieve\n"
"<a href=\"http://www.cliki.net/CFFI\">http://www.cliki.net/CFFI</a>, as is "
"done in the tutorial.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcfun</span></i> <span class=\"string\">"
"\"curl_easy_perform\"</span> curl-code\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">handle easy-handle</"
"span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>После окончательной настройки всех параметров и разработки интерфейса "
"промежуточного уровя мы можем\n"
"завершить определение и получить\n"
"<a href=\"http://www.cliki.net/CFFI\">http://www.cliki.net/CFFI</a>, как это "
"делается в учебном курсе.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcfun</span></i> <span class=\"string\">"
"\"curl_easy_perform\"</span> curl-code\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">handle easy-handle</"
"span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1698
msgid ""
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (with-output-to-string (contents)\n"
"             (let ((*easy-write-procedure*\n"
"                     (lambda (string)\n"
"                       (write-string string contents))))\n"
"               (declare (special *easy-write-procedure*))\n"
"               (curl-easy-perform *easy-handle*)))\n"
"⇒ \"&lt;!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01//EN\\\"\n"
"...\n"
"Now fear, comprehensively&lt;/P&gt;\n"
"\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:1710
msgid ""
"<p>Of course, that itself is slightly unwieldy, so you may want to define\n"
"a function around it that simply retrieves a <acronym>URL</acronym>.  I "
"will\n"
"leave synthesis of all the relevant <acronym>REPL</acronym> forms presented\n"
"thus far into a single function as an exercise for the reader.\n"
"</p>\n"
"<p>The remaining sections of this tutorial explore some advanced features\n"
"of <acronym>CFFI</acronym>; the definition of new types will receive "
"special\n"
"attention.  Some of these features are essential for particular\n"
"foreign function calls; some are very helpful when trying to develop a\n"
"Lispy interface to C.\n"
"</p>"
msgstr ""
"<p>Конечно, это само по себе немного громоздко, поэтому вы можете захотеть\n"
"определить функцию вокруг этого, которая просто получает <acronym>URL</"
"acronym>.  \n"
"Я оставлю обобщение всех соответствующих форм <acronym>REPL</acronym>, "
"представленых\n"
"до сих пор, в единую функцию в качестве упражнения для читателя.\n"
"</p>\n"
"<p>В остальных разделах этого руководства рассматриваются некоторые "
"рассширенные\n"
"функции <acronym>CFFI</acronym>; определению новых типов будет уделено "
"особое\n"
"внимание.  Некоторые из этих функций важны для вызовов определенных внешних\n"
"функций; некоторые очень полезны при разработке Lisp интерфейса к Си.\n"
"</p>"

#: in/CFFI_User_Manual.htm:1719
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002dTypes\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dConclusion\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Conclusion</a>, Previous: <a href=\"#Tutorial_002dCompletion\" "
"accesskey=\"p\" rel=\"prev\">Tutorial-Completion</a>, Up: <a href=\"#Tutorial"
"\" accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Defining-new-types\"></a>\n"
"<h3 class=\"section\">4.11 Defining new types</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002dTypes\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Tutorial_002dConclusion\" accesskey=\"n\" rel=\"next"
"\">Tutorial-Conclusion</a>, Previous: <a href=\"#Tutorial_002dCompletion\" "
"accesskey=\"p\" rel=\"prev\">Tutorial-Completion</a>, Up: <a href=\"#Tutorial"
"\" accesskey=\"u\" rel=\"up\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Defining-new-types\"></a>\n"
"<h3 class=\"section\">4.11 Определение новых типов</h3>"

#: in/CFFI_User_Manual.htm:1747
msgid ""
"<p>Weâve occasionally used the <code>defctype</code> macro in previous "
"sections\n"
"as a kind of documentation, much what youâd use <code>typedef</code> for in\n"
"C.  We also tried one special kind of type definition, the\n"
"<code>defcenum</code> type.  See <a href=\"#defcstruct\">defcstruct</a>, for "
"a definition macro that\n"
"may come in handy if you need to use C <code>struct</code>s as data.\n"
"</p>\n"
"<a name=\"index-type-definition\"></a>\n"
"<a name=\"index-data-in-Lisp-and-C\"></a>\n"
"<a name=\"index-translating-types\"></a>\n"
"<p>However, all of these are mostly sugar for the powerful underlying\n"
"foreign type interface called <em>type translators</em>.  You can easily\n"
"define new translators for any simple named foreign type.  Since weâve\n"
"defined the new type <code>curl-code</code> to use as the return type for\n"
"various <code>libcurl</code> functions, we can use that to directly convert\n"
"c<acronym>URL</acronym> errors to Lisp errors.\n"
"</p>\n"
"<p><code>defctype</code>âs purpose is to define simple <code>typedef</code>-"
"like\n"
"aliases.  In order to use <em>type translators</em> we must use the\n"
"<code>define-foreign-type</code> macro.  So letâs redefine <code>curl-code</"
"code>\n"
"using it.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-foreign-type</span></i> curl-code-type "
"<span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"actual-type</span> <span class=\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"simple-parser</span> curl-code</span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>В предыдущих разделах, мы иногда использовали макрос <code>defctype</"
"code>, как\n"
"своего рода документацию, это во многом то, что вы делали используя "
"<code>typedef</code>\n"
"в коде Си. Мы также попробовали одино особое определение типа "
"<code>defcenum</code>.  \n"
"См. <a href=\"#defcstruct\">defcstruct</a>, для определения макроса, который "
"может\n"
"пригодиться, если вам нужно использовать Си структуры(<code>struct</code>) в "
"качестве данных.\n"
"</p>\n"
"<a name=\"index-type-definition\"></a>\n"
"<a name=\"index-data-in-Lisp-and-C\"></a>\n"
"<a name=\"index-translating-types\"></a>\n"
"<p>Тем не менее, все это в основном \"синтаксический сахар\" для мощного\n"
"базового интерфейса внешних типов, называемого <em>преобразователем "
"типов(type translators)</em>.\n"
"Вы можете легко определить новые преобразователи для любого простого\n"
"именованного внешнего типа.  Поскольку мы определили новый тип <code>curl-"
"code</code> \n"
"используемый в качестве возвращаемого типа для различных функций "
"<code>libcurl</code>,\n"
"мы можем использовать его для непосредственного преобразования ошибок\n"
"<acronym>URL</acronym> в ошибки Lisp.\n"
"</p>\n"
"<p>Целью <code>defctype</code> является определение простых <code>typedef</"
"code>-подобных\n"
"псевдонимов.  Чтобы использовать <em>преобразователи типов(type "
"translators)</em> мы должны\n"
"использовать макрос <code>define-foreign-type</code>.  Итак, давайте "
"переопределим\n"
" <code>curl-code</code> используя этот макрос.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-foreign-type</span></i> curl-code-type "
"<span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"actual-type</span> <span class=\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"simple-parser</span> curl-code</span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1767
msgid ""
"<p><code>define-foreign-type</code> is a thin wrapper around <code>defclass</"
"code>.\n"
"For now, all you need to know in the context of this example is that\n"
"it does what <code>(defctype curl-code :int)</code> would do and,\n"
"additionally, defines a new class <code>curl-code-type</code> which we will\n"
"take advantage of shortly.\n"
"</p>\n"
"<p>The <code>CURLcode</code> enumeration seems to follow the typical error "
"code\n"
"convention of â<samp>0</samp>â meaning all is well, and each non-zero "
"integer\n"
"indicating a different kind of error.  We can apply that trivially to\n"
"differentiate between normal exits and error exits.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-condition</span></i> curl-code-error "
"<span class=\"paren2\">(<span class=\"lisp-bg\">error</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\">$code <span class=\"keyword\">:initarg</"
"span> <span class=\"keyword\">:curl-code</span> <span class=\"keyword\">:"
"reader</span> curl-error-code</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"report</span> <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">lambda</span></i> <span class=\"paren4\">(<span class=\"lisp-bg"
"\">c stream</span>)</span>\n"
"               <span class=\"paren4\">(<span class=\"lisp-bg\">format stream "
"<span class=\"string\">\"libcurl function returned error ~A\"</span>\n"
"                              <span class=\"paren5\">(<span class=\"lisp-bg"
"\">curl-error-code c</span>)</span></span>)</span></span>)</span></span>)</"
"span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"documentation</span> <span class=\"string\">\"Signalled when a libcurl "
"function answers\n"
"  a code other than CURLE_OK.\"</span></span>)</span></span>)</span>"
msgstr ""
"<p><code>define-foreign-type</code> это тонкая обертка вокруг "
"<code>defclass</code>.\n"
"На данный момент все, что вам нужно знать в контексте этого примера, это то, "
"что\n"
"он делает что будет делать <code>(defctype curl-code :int)</code>, и кроме "
"того,\n"
"определяет новый класс <code>curl-code-type</code>, которым мы вскоре "
"воспользуемся.\n"
"</p>\n"
"<p>Перечисление <code>CURLcode</code> по видимому, следует типичному "
"соглашению о\n"
"кодах ошибки: â<samp>0</samp>â означает, что все в порядке, и каждое не\n"
"нулевое целое число указывает на различный тип ошибок.  Применять его\n"
"очень просто, чтобы различать нормальные выходы и выходы с ошибками.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-condition</span></i> curl-code-error "
"<span class=\"paren2\">(<span class=\"lisp-bg\">error</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\">$code <span class=\"keyword\">:initarg</"
"span> <span class=\"keyword\">:curl-code</span> <span class=\"keyword\">:"
"reader</span> curl-error-code</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"report</span> <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">lambda</span></i> <span class=\"paren4\">(<span class=\"lisp-bg"
"\">c stream</span>)</span>\n"
"               <span class=\"paren4\">(<span class=\"lisp-bg\">format stream "
"<span class=\"string\">\"libcurl function returned error ~A\"</span>\n"
"                              <span class=\"paren5\">(<span class=\"lisp-bg"
"\">curl-error-code c</span>)</span></span>)</span></span>)</span></span>)</"
"span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"documentation</span> <span class=\"string\">\"Signalled when a libcurl "
"function answers\n"
"  a code other than CURLE_OK.\"</span></span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:1774
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defmethod</span></i> translate-from-foreign <span class=\"paren2\">(<span "
"class=\"lisp-bg\">value <span class=\"paren3\">(<span class=\"lisp-bg\">type "
"curl-code-type</span>)</span></span>)</span>\n"
"    <span class=\"string\">\"Raise a CURL-CODE-ERROR if VALUE, a curl-code, "
"is non-zero.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">if</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\">zerop "
"value</span>)</span>\n"
"        <span class=\"keyword\">:curle-ok</span>\n"
"        <span class=\"paren3\">(<span class=\"lisp-bg\">error 'curl-code-"
"error <span class=\"keyword\">:curl-code</span> value</span>)</span></"
"span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:1790
msgid ""
"<p>The heart of this translator is new method\n"
"<code>translate-from-foreign</code>.  By specializing the <var>type</var>\n"
"parameter on <code>curl-code-type</code>, we immediately modify the "
"behavior\n"
"of every function that returns a <code>curl-code</code> to pass the result\n"
"through this new method.\n"
"</p>\n"
"<p>To see the translator in action, try invoking a function that returns\n"
"a <code>curl-code</code>.  You need to reevaluate the respective\n"
"<code>defcfun</code> form so that it picks up the new <code>curl-code</"
"code>\n"
"definition.\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (set-curl-option-nosignal *easy-handle* "
"1)\n"
"⇒ :CURLE-OK\n"
"</pre></div>"
msgstr ""
"<p>Сердцем этого нового преобразователя является новый метод\n"
"<code>translate-from-foreign</code>.  Указывая параметр <var>type</var>\n"
"равный <code>curl-code-type</code>, мы немедленно модифицируем поведение "
"каждой\n"
"функции, которая возвращает <code>curl-code</code> чтобы передать результат\n"
"через этот новый метод.\n"
"</p>\n"
"<p>Чтобы увидеть преобразователь в действии, попробуйте вызвать функцию, "
"которая \n"
"возвращает <code>curl-code</code>.  Вам необходимо пересчитать "
"соответствующую\n"
"форму <code>defcfun</code>, чтобы она восприняла новое определение "
"<code>curl-code</code>.\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">CFFI-USER&gt; (set-curl-option-nosignal *easy-handle* "
"1)\n"
"⇒ :CURLE-OK\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:1825
msgid ""
"<p>As the result was â<samp>0</samp>â, the new method returned <code>:curle-"
"ok</code>,\n"
"just as specified.<a name=\"DOCF10\" href=\"#FOOT10\"><sup>10</sup></a>  I "
"will leave disjoining the separate\n"
"<code>CURLcode</code>s into condition types and improving the <code>:report</"
"code>\n"
"function as an exercise for you.\n"
"</p>\n"
"<p>The creation of <code>*easy-handle-cstrings*</code> and\n"
"<code>*easy-handle-errorbuffers*</code> as properties of <code>easy-handle</"
"code>s\n"
"is a kluge.  What we really want is a Lisp structure that stores these\n"
"properties along with the C pointer.  Unfortunately,\n"
"<code>easy-handle</code> is currently just a fancy name for the foreign "
"type\n"
"<code>:pointer</code>; the actual pointer object varies from Common Lisp\n"
"implementation to implementation, needing only to satisfy\n"
"<code>pointerp</code> and be returned from <code>make-pointer</code> and "
"friends.\n"
"</p>\n"
"<p>One solution that would allow us to define a new Lisp structure to\n"
"represent <code>easy-handle</code>s would be to write a wrapper around "
"every\n"
"function that currently takes an <code>easy-handle</code>; the wrapper "
"would\n"
"extract the pointer and pass it to the foreign function.  However, we\n"
"can use type translators to more elegantly integrate this\n"
"âtranslationâ into the foreign function calling framework, using\n"
"<code>translate-to-foreign</code>.\n"
"</p>\n"
"<div class=\"smalllisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defclass</span></i> easy-handle <span class="
"\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\">pointer <span class=\"keyword\">:"
"initform</span> <span class=\"paren4\">(<span class=\"lisp-bg\">curl-easy-"
"init</span>)</span>\n"
"              <span class=\"keyword\">:documentation</span> <span class="
"\"string\">\"Foreign pointer from curl_easy_init\"</span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\">error-buffer\n"
"      <span class=\"keyword\">:initform</span> <span class=\"paren4\">(<span "
"class=\"lisp-bg\">foreign-alloc <span class=\"keyword\">:char</span> <span "
"class=\"keyword\">:count</span> <span class=\"special\">*curl-error-size*</"
"span>\n"
"                               <span class=\"keyword\">:initial-element</"
"span> 0</span>)</span>\n"
"      <span class=\"keyword\">:documentation</span> <span class=\"string\">"
"\"C string describing last error\"</span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\">c-strings <span class="
"\"keyword\">:initform</span> '<span class=\"paren4\">(<span class=\"lisp-bg"
"\"></span>)</span>\n"
"                <span class=\"keyword\">:documentation</span> <span class="
"\"string\">\"C strings set as options\"</span></span>)</span></span>)</"
"span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"documentation</span> <span class=\"string\">\"I am a parameterization you "
"may pass to\n"
"  curl-easy-perform to perform a cURL network protocol request.\"</span></"
"span>)</span></span>)</span>"
msgstr ""
"<p>В результае был получен â<samp>0</samp>â, новый метод возвратил <code>:"
"curle-ok</code>,\n"
"как это было указано.<a name=\"DOCF10\" href=\"#FOOT10\"><sup>10</sup></a>  "
"Я оставлю разделение отдельных\n"
"<code>CURLcode</code> на типы условий и улучшение функции <code>:report</"
"code>\n"
"как упражнение для вас.\n"
"</p>\n"
"<p>Создание <code>*easy-handle-cstrings*</code> и\n"
"<code>*easy-handle-errorbuffers*</code> в качестве свойств <code>easy-"
"handle</code>s\n"
"является ключевым моментом.  Что нам действительно нужно, так это структура "
"Lisp, которая\n"
"хранит эти свойства вместе с указателем Си.  К сожалению,\n"
"<code>easy-handle</code> в настоящее время является просто причудливым "
"именем для внешнего\n"
"типа <code>:pointer</code>; фактический объект указатель варьируется от "
"одной реализации\n"
"Лиспа к другой, и он должен удовлетвроять предикату <code>pointerp</code> и "
"быть\n"
"возвращаемым из <code>make-pointer</code> и его друзей.\n"
"</p>\n"
"<p>Одним из решений, которое позволило бы нам определить новую структуру "
"Lisp для \n"
"представления  <code>easy-handle</code>, было бы написание обертки вокруг "
"каждой функции,\n"
"которая в настоящее время получает <code>easy-handle</code>; оболочка "
"извлечет указатель\n"
"и передаст его внешней функции.  Однако мы можем использовать "
"преобразователи типов, чтобы\n"
"более элегантно интегрировать этот âпреобразователь(translation)â в "
"конструкцию\n"
"вызова внешний функций, используя <code>translate-to-foreign</code>.\n"
"</p>\n"
"<div class=\"smalllisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defclass</span></i> easy-handle <span class="
"\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\">pointer <span class=\"keyword\">:"
"initform</span> <span class=\"paren4\">(<span class=\"lisp-bg\">curl-easy-"
"init</span>)</span>\n"
"              <span class=\"keyword\">:documentation</span> <span class="
"\"string\">\"Foreign pointer from curl_easy_init\"</span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\">error-buffer\n"
"      <span class=\"keyword\">:initform</span> <span class=\"paren4\">(<span "
"class=\"lisp-bg\">foreign-alloc <span class=\"keyword\">:char</span> <span "
"class=\"keyword\">:count</span> <span class=\"special\">*curl-error-size*</"
"span>\n"
"                               <span class=\"keyword\">:initial-element</"
"span> 0</span>)</span>\n"
"      <span class=\"keyword\">:documentation</span> <span class=\"string\">"
"\"C string describing last error\"</span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\">c-strings <span class="
"\"keyword\">:initform</span> '<span class=\"paren4\">(<span class=\"lisp-bg"
"\"></span>)</span>\n"
"                <span class=\"keyword\">:documentation</span> <span class="
"\"string\">\"C strings set as options\"</span></span>)</span></span>)</"
"span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"documentation</span> <span class=\"string\">\"I am a parameterization you "
"may pass to\n"
"  curl-easy-perform to perform a cURL network protocol request.\"</span></"
"span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:1828
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defmethod</span></i> initialize-instance <span class=\"keyword\">:after</"
"span> <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\">self easy-handle</span>)</span> &amp;"
"key</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">set-curl-option-"
"errorbuffer self <span class=\"paren3\">(<span class=\"lisp-bg\">slot-value "
"self 'error-buffer</span>)</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1832
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defun</span></i> add-curl-handle-cstring <span class=\"paren2\">(<span "
"class=\"lisp-bg\">handle cstring</span>)</span>\n"
"    <span class=\"string\">\"Add CSTRING to be freed when HANDLE is, "
"answering CSTRING.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">car <span class="
"\"paren3\">(<span class=\"lisp-bg\">push cstring <span class="
"\"paren4\">(<span class=\"lisp-bg\">slot-value handle 'c-strings</span>)</"
"span></span>)</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1837
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defun</span></i> get-easy-handle-error <span class=\"paren2\">(<span "
"class=\"lisp-bg\">handle</span>)</span>\n"
"    <span class=\"string\">\"Answer a string containing HANDLE's current "
"error message.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-string-to-lisp\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\">slot-value handle "
"'error-buffer</span>)</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1845
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defun</span></i> free-easy-handle <span class=\"paren2\">(<span class="
"\"lisp-bg\">handle</span>)</span>\n"
"    <span class=\"string\">\"Free CURL easy interface HANDLE and any C "
"strings created to\n"
"  be its options.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-slots</span></i> <span class=\"paren3\">(<span class=\"lisp-bg"
"\">pointer error-buffer c-strings</span>)</span> handle\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">curl-easy-cleanup "
"pointer</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">foreign-free error-"
"buffer</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">mapc #'foreign-string-"
"free c-strings</span>)</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1850
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">define-foreign-type</span></i> easy-handle-type <span class="
"\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"actual-type</span> <span class=\"keyword\">:pointer</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"simple-parser</span> easy-handle</span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:1855
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defmethod</span></i> translate-to-foreign <span class=\"paren2\">(<span "
"class=\"lisp-bg\">handle <span class=\"paren3\">(<span class=\"lisp-bg"
"\">type easy-handle-type</span>)</span></span>)</span>\n"
"    <span class=\"string\">\"Extract the pointer from an easy-HANDLE.\"</"
"span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">slot-value handle "
"'pointer</span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:1873
msgid ""
"<p>While we changed some of the Lisp functions defined earlier to use\n"
"<acronym>CLOS</acronym> slots rather than hash tables, the foreign "
"functions\n"
"work just as well as they did before.\n"
"</p>\n"
"<a name=\"index-limitations-of-type-translators\"></a>\n"
"<p>The greatest strength, and the greatest limitation, of the type\n"
"translator comes from its generalized interface.  As stated\n"
"previously, we could define all foreign function calls in terms of the\n"
"primitive foreign types provided by <acronym>CFFI</acronym>.  The type "
"translator\n"
"interface allows us to cleanly specify the relationship between Lisp\n"
"and C data, independent of where it appears in a function call.  This\n"
"independence comes at a price; for example, it cannot be used to\n"
"modify translation semantics based on other arguments to a function\n"
"call.  In these cases, you should rely on other features of Lisp,\n"
"rather than the powerful, yet domain-specific, type translator\n"
"interface.\n"
"</p>"
msgstr ""
"<p>В то время как мы изменили некоторые функции Lisp, оределенные ранее,\n"
"чтобы использовать слоты <acronym>CLOS</acronym> вместо хеш-таблиц, "
"внешние \n"
"функции работатют также как и раньше.\n"
"</p>\n"
"<a name=\"index-limitations-of-type-translators\"></a>\n"
"<p>Самая большая сила и самое большое ограничение преобразователей типов - "
"это\n"
"их обобщенный интерфейс.  Как указывалось ранее, мы можем определить все "
"вызовы\n"
"внешний функций в терминах примитивных внешних типов предоставляемых "
"<acronym>CFFI</acronym>.  \n"
"Интерфейс преобразователей типов позволяет нам точно определять отношения "
"между данными\n"
"Lisp и данными Си, независимо от того, где они появляются в вызове функции.\n"
"Эта независимость имеет свою цену; например, их нельзя использовать для "
"изменения семантики\n"
"преобразования базирующейся на других аргументах вызова функции.  В этих "
"случаях вам \n"
"следует полагаться на другие функции Lisp, а не на мощный, но предметно-"
"ориентированный\n"
"интерфейс преобразователей типа.\n"
"</p>"

#: in/CFFI_User_Manual.htm:1882
msgid ""
"<hr>\n"
"<a name=\"Tutorial_002dConclusion\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#Tutorial_002dTypes\" accesskey=\"p\" rel=\"prev"
"\">Tutorial-Types</a>, Up: <a href=\"#Tutorial\" accesskey=\"u\" rel=\"up"
"\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"What_0027s-next_003f\"></a>\n"
"<h3 class=\"section\">4.12 Whatâs next?</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Tutorial_002dConclusion\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#Tutorial_002dTypes\" accesskey=\"p\" rel=\"prev"
"\">Tutorial-Types</a>, Up: <a href=\"#Tutorial\" accesskey=\"u\" rel=\"up"
"\">Tutorial</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"What_0027s-next_003f\"></a>\n"
"<h3 class=\"section\">4.12 Что дальше?</h3>"

#: in/CFFI_User_Manual.htm:1896
msgid ""
"<p><acronym>CFFI</acronym> provides a rich and powerful foundation for "
"communicating with\n"
"foreign libraries; as we have seen, it is up to you to make that\n"
"experience a pleasantly Lispy one.  This tutorial does not cover all\n"
"the features of <acronym>CFFI</acronym>; please see the rest of the manual "
"for\n"
"details.  In particular, if something seems obviously missing, it is\n"
"likely that either code or a good reason for lack of code is already\n"
"present.\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Implementorâs note:</strong> <em>There are some other things in "
"<acronym>CFFI</acronym> that might deserve\n"
"tutorial sections, such as free-translated-object, or structs.  Let us\n"
"know which ones you care about.</em>\n"
"</p></blockquote>"
msgstr ""
"<p><acronym>CFFI</acronym> предоставлялет богатую и мощную основу для "
"взаимодейтсвия\n"
"с внешними библиотеками; как мы уже видели, это зависит от вас как сделать "
"этот опыт\n"
"программировани на Лисп приятными.  Этот учебник не охватывает все функции "
"<acronym>CFFI</acronym>; \n"
"пожалуйста, смотрите остальную часть руководства для получения детальной "
"инфоpмации.  \n"
"В частности, если что-то явно отсутствует, вполне вероятно, присутстует либо "
"код, либо веская\n"
"причина его отсутствия.\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Примечания разработчика:</strong> <em>В <acronym>CFFI</acronym> "
"есть и другие вещи,\n"
"которые заслуживают учебных разделов, например свободно преобразуемые "
"объекты(free-translated-object),\n"
"или структуры(structs).  Дайте нам знать, какие из них вам не безразличны.</"
"em>\n"
"</p></blockquote>"

#: in/CFFI_User_Manual.htm:1907
msgid ""
"<hr>\n"
"<a name=\"Wrapper-generators\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Foreign-Types\" accesskey=\"n\" rel=\"next\">Foreign Types</"
"a>, Previous: <a href=\"#Tutorial\" accesskey=\"p\" rel=\"prev\">Tutorial</"
"a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Wrapper-generators-1\"></a>\n"
"<h2 class=\"chapter\">5 Wrapper generators</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Wrapper-generators\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Foreign-Types\" accesskey=\"n\" rel=\"next\">Foreign Types</"
"a>, Previous: <a href=\"#Tutorial\" accesskey=\"p\" rel=\"prev\">Tutorial</"
"a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Wrapper-generators-1\"></a>\n"
"<h2 class=\"chapter\">5 Генератор оболочек</h2>"

#: in/CFFI_User_Manual.htm:1932
msgid ""
"<p><acronym>CFFI</acronym>âs interface is designed for human programmers, "
"being aimed at\n"
"aesthetic as well as technical sophistication.  However, there are a\n"
"few programs aimed at translating C and C++ header files, or\n"
"approximations thereof, into <acronym>CFFI</acronym> forms constituting a "
"foreign\n"
"interface to the symbols in those files.\n"
"</p>\n"
"<p>These wrapper generators are known to support output of <acronym>CFFI</"
"acronym> forms.\n"
"</p>\n"
"<dl compact=\"compact\">\n"
"<dt><a href=\"http://www.cliki.net/Verrazano\">Verrazano</a></dt>\n"
"<dd><p>Designed specifically for Common Lisp.  Uses <acronym>GCC</acronym>âs "
"parser\n"
"output in <acronym>XML</acronym> format to discover functions, variables, "
"and\n"
"other header file data.  This means you need <acronym>GCC</acronym> to "
"generate\n"
"forms; on the other hand, the parser employed is mostly compliant with\n"
"<acronym>ANSI</acronym> C.\n"
"</p>\n"
"</dd>\n"
"<dt><a href=\"http://www.cliki.net/SWIG\">SWIG</a></dt>\n"
"<dd><p>A foreign interface generator originally designed to generate Python\n"
"bindings, it has been ported to many other systems, including <acronym>CFFI</"
"acronym>\n"
"in version 1.3.28.  Includes its own C declaration munger, not\n"
"intended to be fully-compliant with <acronym>ANSI</acronym> C.\n"
"</p></dd>\n"
"</dl>"
msgstr ""
"<p>Интерфейс <acronym>CFFI</acronym> предназначен для программистов людей, "
"ориентированных\n"
"как на эстетическое, так и на техническое совершенство.  Однако, существует "
"несколько программ,\n"
"предназначенных для преобразования заголовочных файлов Си и Си++, или их "
"аналогов в \n"
"формы <acronym>CFFI</acronym>, представляющие собой внешний интерфейс для "
"символов в этих файлах.\n"
"</p>\n"
"<p>Известно, что эти генераторы оберток поддерживают вывод форм "
"<acronym>CFFI</acronym>.\n"
"</p>\n"
"<dl compact=\"compact\">\n"
"<dt><a href=\"http://www.cliki.net/Verrazano\">Verrazano</a></dt>\n"
"<dd><p>Разработан специально для Common Lisp.  Использует вывод "
"синтаксического\n"
"анализатора <acronym>GCC</acronym> в формате  <acronym>XML</acronym> для "
"обнаружения\n"
"функций, переменных и других данных файла заголовка.  Это означает, что вам "
"нужен\n"
"<acronym>GCC</acronym> для создания форм; с другой стороны, используемый "
"синтаксический\n"
"анализатор в основном соответствует <acronym>ANSI</acronym> C.\n"
"</p>\n"
"</dd>\n"
"<dt><a href=\"http://www.cliki.net/SWIG\">SWIG</a></dt>\n"
"<dd><p>Генератор внешних интерфейсов, изначально разработанный для генерации "
"привязок Python,\n"
"он был портирован на многие другие системы, включаяя <acronym>CFFI</"
"acronym>\n"
"в версии 1.3.28.  Включает в себя собственный модуль деклараций Си, не "
"предназначенный для\n"
"полного соответствия  <acronym>ANSI</acronym> C.\n"
"</p></dd>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:1962
msgid ""
"<p>First, this manual does not describe use of these other programs; they\n"
"have documentation of their own.  If you have problems using a\n"
"generated interface, please look at the output <acronym>CFFI</acronym> forms "
"and\n"
"verify that they are a correct <acronym>CFFI</acronym> interface to the "
"library in\n"
"question; if they are correct, contact <acronym>CFFI</acronym> developers "
"with\n"
"details, keeping in mind that they communicate in terms of those forms\n"
"rather than any particular wrapper generator.  Otherwise, contact the\n"
"maintainers of the wrapper generator you are using, provided you can\n"
"reasonably expect more accuracy from the generator.\n"
"</p>\n"
"<p>When is more accuracy an unreasonable expectation?  As described in\n"
"the tutorial (see <a href=\"#Tutorial_002dAbstraction\">Breaking the\n"
"abstraction</a>), the information in C declarations is insufficient to\n"
"completely describe every interface.  In fact, it is quite common to\n"
"run into an interface that cannot be handled automatically, and\n"
"generators should be excused from generating a complete interface in\n"
"these cases.\n"
"</p>\n"
"<p>As further described in the tutorial, the thinnest Lisp interface to a\n"
"C function is not always the most pleasant one.  In many cases, you\n"
"will want to manually write a Lispier interface to the C functions\n"
"that interest you.\n"
"</p>\n"
"<p>Wrapper generators should be treated as time-savers, not complete\n"
"automation of the full foreign interface writing job.  Reports of the\n"
"amount of work done by generators vary from 30% to 90%.  The\n"
"incremental development style enabled by <acronym>CFFI</acronym> generally "
"reduces\n"
"this proportion below that for languages like Python.\n"
"</p>"
msgstr ""
"<p>Во-первых, это руководство не описывает использовние этих сторонних "
"программ;\n"
"у них есть собственная документация.  Если у вас есть проблемы с "
"использованием\n"
"сгенерированного интерфейса, пожалуйста, посмотрите на выходные формы \n"
"<acronym>CFFI</acronym>  и убедитесь, что они являются правильным "
"интерфейсом \n"
"<acronym>CFFI</acronym> к рассматриваемой библиотеке; если они верны, "
"обратитесь\n"
"к разработчикам <acronym>CFFI</acronym> с подробностями, помня, что они "
"общаются\n"
"в терминах этих форм, а не какого-либо конкретного генератора оберток. В "
"противном\n"
"случае обратитесь к специалистам по обслуживанию генератора обертки, который "
"вы\n"
"используете, при условии, что вы можете ожидать большей точности от\n"
"генератора.\n"
"</p>\n"
"<p>Когда большая точность - это необоснованное ожидание? Как описано в\n"
"учебном пособии (см. <a href=\"#Tutorial_002dAbstraction\">Нарушение "
"Абстракции</a>), \n"
"информации в объявлениях Си недостаточно, чтобы полностью описать каждый "
"интерфейс.\n"
"На самом деле, довольно часто моно встретить интерфейс, который не может "
"быть обработан\n"
"автоматически, и в этом случае, генераторы должны быть освобождены от "
"созданиия полного интерфейса.\n"
"</p>\n"
"<p>Как описано далее в руководстве, самый тонкий интерфейс Lisp для функций\n"
"Си не всегда самый приятный.  Во многих случаях нужно будет вручную "
"написать\n"
"Lisp интерфейс для функций Си, которые вас интересуют.\n"
"</p>\n"
"<p>Генераторы оберток должны рассматриваться как экономия времени, а не "
"полная\n"
"автоматизация полного написания внешнего интерфейса.  Отчеты об объеме\n"
"работы, выполненной генераторами, варьируются от 30% до 90%.  Стиль\n"
"инкрементальной разработки поддерживаемый  <acronym>CFFI</acronym> обычно "
"уменьшает\n"
"эту пропорцию ниже, чем в таких языках как Python.\n"
"</p>"

#: in/CFFI_User_Manual.htm:1973
msgid ""
"<hr>\n"
"<a name=\"Foreign-Types\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Pointers\" accesskey=\"n\" rel=\"next\">Pointers</a>, "
"Previous: <a href=\"#Wrapper-generators\" accesskey=\"p\" rel=\"prev"
"\">Wrapper generators</a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up"
"\">Top</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel="
"\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" "
"rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Foreign-Types-1\"></a>\n"
"<h2 class=\"chapter\">6 Foreign Types</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Foreign-Types\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Pointers\" accesskey=\"n\" rel=\"next\">Pointers</a>, "
"Previous: <a href=\"#Wrapper-generators\" accesskey=\"p\" rel=\"prev"
"\">Wrapper generators</a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up"
"\">Top</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel="
"\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" "
"rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Foreign-Types-1\"></a>\n"
"<h2 class=\"chapter\">6 Внешние типы</h2>"

#: in/CFFI_User_Manual.htm:1995
msgid ""
"<p>Foreign types describe how data is translated back and forth between C\n"
"and Lisp. <acronym>CFFI</acronym> provides various built-in types and allows "
"the user to\n"
"define new types.\n"
"</p>\n"
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href=\"#Built_002dIn-Types"
"\" accesskey=\"1\">Built-In Types</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Other-Types\" accesskey="
"\"2\">Other Types</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Defining-Foreign-Types\" "
"accesskey=\"3\">Defining Foreign Types</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Foreign-Type-Translators"
"\" accesskey=\"4\">Foreign Type Translators</a>:</td><td>&nbsp;&nbsp;</"
"td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Optimizing-Type-"
"Translators\" accesskey=\"5\">Optimizing Type Translators</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Foreign-Structure-Types"
"\" accesskey=\"6\">Foreign Structure Types</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Allocating-Foreign-"
"Objects\" accesskey=\"7\">Allocating Foreign Objects</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Dictionary"
msgstr ""
"<p>Внешние типы описывают, как данные преобразуются между Си и Lisp. "
"<acronym>CFFI</acronym> предоставляет\n"
"различные встроенные типы и позволяет пользователю определять новые типы.\n"
"</p>\n"
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href=\"#Built_002dIn-Types"
"\" accesskey=\"1\">Встроенные типы(Built-In Types)</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Other-Types\" accesskey="
"\"2\">Другие типы(Other Types)</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top"
"\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Defining-Foreign-Types\" "
"accesskey=\"3\">Определение Внешних Типов(Defining Foreign Types)</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Foreign-Type-Translators"
"\" accesskey=\"4\">Преобразователи Внешних Типов(Foreign Type Translators)</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Optimizing-Type-"
"Translators\" accesskey=\"5\">Оптимизация Преобразователей типов(Optimizing "
"Type Translators)</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Foreign-Structure-Types"
"\" accesskey=\"6\">Внешние Структурные Типы(Foreign Structure Types)</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Allocating-Foreign-"
"Objects\" accesskey=\"7\">Выделение памяти для Внешних объектов(Allocating "
"Foreign Objects)</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Словарь"

#: in/CFFI_User_Manual.htm:2047
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#convert_002dfrom_002dforeign\" accesskey=\"8\">convert-from-foreign</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#convert_002dto_002dforeign\" accesskey=\"9\">convert-to-foreign</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defbitfield"
"\">defbitfield</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcstruct\">defcstruct</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcunion\">defcunion</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defctype\">defctype</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcenum\">defcenum</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#define_002dforeign_002dtype\">define-foreign-type</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#define_002dparse_002dmethod\">define-parse-method</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dbitfield_002dsymbols\">foreign-bitfield-symbols</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dbitfield_002dvalue\">foreign-bitfield-value</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002denum_002dkeyword\">foreign-enum-keyword</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002denum_002dvalue\">foreign-enum-value</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002dnames\">foreign-slot-names</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002doffset\">foreign-slot-offset</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002dpointer\">foreign-slot-pointer</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dslot_002dvalue\">foreign-slot-value</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dtype_002dalignment\">foreign-type-alignment</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#foreign_002dtype_002dsize"
"\">foreign-type-size</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#free_002dconverted_002dobject\">free-converted-object</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#free_002dtranslated_002dobject\">free-translated-object</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dfrom_002dforeign\">translate-from-foreign</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dto_002dforeign\">translate-to-foreign</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dinto_002dforeign_002dmemory\">translate-into-foreign-"
"memory</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dslots\">with-foreign-slots</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"</tbody></table>"
msgstr ""

#: in/CFFI_User_Manual.htm:2056
msgid ""
"<hr>\n"
"<a name=\"Built_002dIn-Types\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Other-Types\" accesskey=\"n\" rel=\"next\">Other Types</a>, "
"Previous: <a href=\"#Foreign-Types\" accesskey=\"p\" rel=\"prev\">Foreign "
"Types</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign "
"Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel="
"\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" "
"rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Built_002dIn-Types-1\"></a>\n"
"<h3 class=\"section\">6.1 Built-In Types</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Built_002dIn-Types\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Other-Types\" accesskey=\"n\" rel=\"next\">Other Types</a>, "
"Previous: <a href=\"#Foreign-Types\" accesskey=\"p\" rel=\"prev\">Foreign "
"Types</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign "
"Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel="
"\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" "
"rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Built_002dIn-Types-1\"></a>\n"
"<h3 class=\"section\">6.1 Встроенные типы</h3>"

#: in/CFFI_User_Manual.htm:2087
msgid ""
"<dl>\n"
"<dt><a name=\"index-_003achar\"></a>Foreign Type: <strong>:char</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aunsigned_002dchar\"></a>Foreign Type: <strong>:"
"unsigned-char</strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003ashort\"></a>Foreign Type: <strong>:short</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aunsigned_002dshort\"></a>Foreign Type: <strong>:"
"unsigned-short</strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aint\"></a>Foreign Type: <strong>:int</strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aunsigned_002dint\"></a>Foreign Type: <strong>:"
"unsigned-int</strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003along\"></a>Foreign Type: <strong>:long</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aunsigned_002dlong\"></a>Foreign Type: <strong>:"
"unsigned-long</strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003along_002dlong\"></a>Foreign Type: <strong>:long-"
"long</strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aunsigned_002dlong_002dlong\"></a>Foreign Type: "
"<strong>:unsigned-long-long</strong></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2116
msgid ""
"<p>These types correspond to the native C integer types according to the\n"
"<acronym>ABI</acronym> of the Lisp implementationâs host system.\n"
"</p>\n"
"<p><code>:long-long</code> and <code>:unsigned-long-long</code> are not "
"supported\n"
"natively on all implementations. However, they are emulated by\n"
"<code>mem-ref</code> and <code>mem-set</code>.\n"
"</p>\n"
"<p>When those types are <strong>not</strong> available, the symbol\n"
"<code>cffi-sys::no-long-long</code> is pushed into <code>*features*</code>.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003auchar\"></a>Foreign Type: <strong>:uchar</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aushort\"></a>Foreign Type: <strong>:ushort</"
"strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003auint\"></a>Foreign Type: <strong>:uint</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aulong\"></a>Foreign Type: <strong>:ulong</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003allong\"></a>Foreign Type: <strong>:llong</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aullong\"></a>Foreign Type: <strong>:ullong</"
"strong></dt>\n"
"</dl>"
msgstr ""
"<p>Эти типы соответствуют собственным целочисленным типам Си в соответствии "
"с\n"
"<acronym>ABI</acronym> хост-системы(системы на которой выполняется лисп) "
"реализации Лиспа.\n"
"</p>\n"
"<p><code>:long-long</code> и <code>:unsigned-long-long</code> изначально не "
"поддерживаются\n"
"во всех реализациях. Однако они эмулируются через\n"
"<code>mem-ref</code> и <code>mem-set</code>.\n"
"</p>\n"
"<p>Когда эти типы недоступны, в <code>*features*</code> помещается символ "
"<code>cffi-sys::no-long-long</code>.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003auchar\"></a>Foreign Type: <strong>:uchar</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aushort\"></a>Foreign Type: <strong>:ushort</"
"strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003auint\"></a>Foreign Type: <strong>:uint</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aulong\"></a>Foreign Type: <strong>:ulong</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003allong\"></a>Foreign Type: <strong>:llong</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aullong\"></a>Foreign Type: <strong>:ullong</"
"strong></dt>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:2146
msgid ""
"<p>For convenience, the above types are provided as shortcuts for\n"
"<code>unsigned-char</code>, <code>unsigned-short</code>, <code>unsigned-int</"
"code>,\n"
"<code>unsigned-long</code>, <code>long-long</code> and <code>unsigned-long-"
"long</code>,\n"
"respectively.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003aint8\"></a>Foreign Type: <strong>:int8</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003auint8\"></a>Foreign Type: <strong>:uint8</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aint16\"></a>Foreign Type: <strong>:int16</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003auint16\"></a>Foreign Type: <strong>:uint16</"
"strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aint32\"></a>Foreign Type: <strong>:int32</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003auint32\"></a>Foreign Type: <strong>:uint32</"
"strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aint64\"></a>Foreign Type: <strong>:int64</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003auint64\"></a>Foreign Type: <strong>:uint64</"
"strong></dt>\n"
"</dl>"
msgstr ""
"<p>Для удобства указанные выше типы предоставляются в виде ярлыков для \n"
"<code>unsigned-char</code>, <code>unsigned-short</code>, <code>unsigned-int</"
"code>,\n"
"<code>unsigned-long</code>, <code>long-long</code> и <code>unsigned-long-"
"long</code>,\n"
"соответственно.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003aint8\"></a>Foreign Type: <strong>:int8</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003auint8\"></a>Foreign Type: <strong>:uint8</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aint16\"></a>Foreign Type: <strong>:int16</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003auint16\"></a>Foreign Type: <strong>:uint16</"
"strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aint32\"></a>Foreign Type: <strong>:int32</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003auint32\"></a>Foreign Type: <strong>:uint32</"
"strong></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003aint64\"></a>Foreign Type: <strong>:int64</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003auint64\"></a>Foreign Type: <strong>:uint64</"
"strong></dt>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:2150
msgid ""
"<p>Foreign integer types of specific sizes, corresponding to the C types\n"
"defined in <code>stdint.h</code>.\n"
"</p>"
msgstr ""
"<p>Внешние целочисленные типы определенных размеров, соответствующие типам "
"Си, \n"
"определенным в <code>stdint.h</code>.\n"
"</p>"

#: in/CFFI_User_Manual.htm:2160
msgid ""
"<dl>\n"
"<dt><a name=\"index-_003afloat\"></a>Foreign Type: <strong>:float</strong></"
"dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-_003adouble\"></a>Foreign Type: <strong>:double</"
"strong></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2172
msgid ""
"<p>On all systems, the <code>:float</code> and <code>:double</code> types "
"represent a\n"
"C <code>float</code> and <code>double</code>, respectively. On most but not "
"all\n"
"systems, <code>:float</code> and <code>:double</code> represent a Lisp\n"
"<code>single-float</code> and <code>double-float</code>, respectively. It is "
"not\n"
"so useful to consider the relationship between Lisp types and C types\n"
"as isomorphic, as simply to recognize the relationship, and relative\n"
"precision, among each respective category.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003along_002ddouble\"></a>Foreign Type: <strong>:long-"
"double</strong></dt>\n"
"</dl>"
msgstr ""
"<p>Во всех системах типы <code>:float</code> и <code>:double</code> "
"представляют\n"
"Си <code>float</code> и <code>double</code>, соответственно. На большинстве, "
"но\n"
"не на всех системах <code>:float</code> и <code>:double</code> представляют "
"Lisp\n"
"<code>single-float</code> и <code>double-float</code>, соответственно. Не "
"очень\n"
"полезно рассматривать отношения между типами Lisp и типами Си как "
"изоморфные,\n"
"как простое отношение и относительно точное, между каждой соответствующей "
"категорией.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003along_002ddouble\"></a>Foreign Type: <strong>:long-"
"double</strong></dt>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:2178
msgid ""
"<p>This type is only supported on SCL.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003apointer\"></a>Foreign Type: <strong>:pointer</"
"strong> <em>&amp;optional type</em></dt>\n"
"</dl>"
msgstr ""
"<p>Этот тип поддерживается только в SCL.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003apointer\"></a>Foreign Type: <strong>:pointer</"
"strong> <em>&amp;optional type</em></dt>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:2187
msgid ""
"<p>A foreign pointer to an object of any type, corresponding to\n"
"<code>void *</code>.  You can optionally specify type of pointer\n"
"(e.g. <code>(:pointer :char)</code>).  Although <acronym>CFFI</acronym> "
"wonât do anything\n"
"with that information yet, it is useful for documentation purposes.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003avoid\"></a>Foreign Type: <strong>:void</strong></"
"dt>\n"
"</dl>"
msgstr ""
"<p>Внешний указатель на объект любого типа, соответствующий\n"
"<code>void *</code>.  При желании вы можете указать тип указателя\n"
"(например <code>(:pointer :char)</code>).  Хотя <acronym>CFFI</acronym> пока "
"ничего\n"
"не будет делать с этой информацией, она полезна для целей документирования.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003avoid\"></a>Foreign Type: <strong>:void</strong></"
"dt>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:2198
msgid ""
"<p>No type at all. Only valid as the return type of a function.\n"
"</p>\n"
"<hr>\n"
"<a name=\"Other-Types\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Defining-Foreign-Types\" accesskey=\"n\" rel=\"next"
"\">Defining Foreign Types</a>, Previous: <a href=\"#Built_002dIn-Types\" "
"accesskey=\"p\" rel=\"prev\">Built-In Types</a>, Up: <a href=\"#Foreign-Types"
"\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Other-Types-1\"></a>\n"
"<h3 class=\"section\">6.2 Other Types</h3>"
msgstr ""
"<p>Нет типа вообще. Действителен только в качестве типа возврата функции.\n"
"</p>\n"
"<hr>\n"
"<a name=\"Other-Types\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Defining-Foreign-Types\" accesskey=\"n\" rel=\"next"
"\">Defining Foreign Types</a>, Previous: <a href=\"#Built_002dIn-Types\" "
"accesskey=\"p\" rel=\"prev\">Built-In Types</a>, Up: <a href=\"#Foreign-Types"
"\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Other-Types-1\"></a>\n"
"<h3 class=\"section\">6.2 Другие Типы</h3>"

#: in/CFFI_User_Manual.htm:2205
msgid ""
"<p><acronym>CFFI</acronym> also provides a few useful types that arenât "
"built-in C\n"
"types.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003astring\"></a>Foreign Type: <strong>:string</"
"strong></dt>\n"
"</dl>"
msgstr ""
"<p><acronym>CFFI</acronym> также предоставляет несколько полезных типов, "
"которые не \n"
"являются встроенными Си типами.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003astring\"></a>Foreign Type: <strong>:string</"
"strong></dt>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:2222
msgid ""
"<p>The <code>:string</code> type performs automatic conversion between Lisp "
"and\n"
"C strings. Note that, in the case of functions the converted C string\n"
"will have dynamic extent (i.e. it will be automatically freed after\n"
"the foreign function returns).\n"
"</p>\n"
"<p>In addition to Lisp strings, this type will accept foreign pointers\n"
"and pass them unmodified.\n"
"</p>\n"
"<p>A method for <a href=\"#free_002dtranslated_002dobject\">free-translated-"
"object</a> is specialized for this\n"
"type. So, for example, foreign strings allocated by this type and\n"
"passed to a foreign function will be freed after the function\n"
"returns.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-funcall <span class=\"string\">\"getenv\"</span> <span class="
"\"keyword\">:string</span> <span class=\"string\">\"SHELL\"</span> <span "
"class=\"keyword\">:string</span></span>)</span>\n"
" ⇒ \"/bin/bash\""
msgstr ""
"<p>Тип <code>:string</code> выполняет автоматическое преобразование между "
"строками \n"
"Lisp и строками Си. Обратите внимание, что в случае функций преобразованная "
"строка Си\n"
"будет иметь динамическое время существования(т.е она будет автоматически "
"освобождена после\n"
"возврата внешней функции).\n"
"</p>\n"
"<p>В дополнение к строкам Lisp, этот тип будет принимать внешние указатели и "
"передавать их\n"
"без изменений.\n"
"</p>\n"
"<p>Для этого типа, адаптирован, метод для свободно преобразуемого объекта(<a "
"href=\"#free_002dtranslated_002dobject\">free-translated-object</a>). Так, "
"например,\n"
"внешние строки, выделенные этим типом и переданные внешней функции, будут\n"
"осовбождены после её возврата.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-funcall <span class=\"string\">\"getenv\"</span> <span class="
"\"keyword\">:string</span> <span class=\"string\">\"SHELL\"</span> <span "
"class=\"keyword\">:string</span></span>)</span>\n"
" ⇒ \"/bin/bash\""

#: in/CFFI_User_Manual.htm:2227
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-string</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\">str <span class=\"string\">\"abcdef\"</span></span>)</"
"span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-funcall "
"<span class=\"string\">\"strlen\"</span> <span class=\"keyword\">:string</"
"span> str <span class=\"keyword\">:int</span></span>)</span></span>)</span>\n"
" ⇒ 6\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:2231
msgid ""
"<dl>\n"
"<dt><a name=\"index-_003astring_002bptr\"></a>Foreign Type: <strong>:string"
"+ptr</strong></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2239
msgid ""
"<p>Like <code>:string</code> but returns a list with two values when "
"convert\n"
"from C to Lisp: a Lisp string and the C stringâs foreign pointer.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-funcall <span class=\"string\">\"getenv\"</span> <span class="
"\"keyword\">:string</span> <span class=\"string\">\"SHELL\"</span> <span "
"class=\"keyword\">:string+ptr</span></span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\"><span class=\"string\">"
"\"/bin/bash\"</span> #.<span class=\"paren2\">(<span class=\"lisp-bg\">SB-"
"SYS:INT-SAP #XBFFFFC6F</span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Подобен <code>:string</code> но возвращает список с двумя значениями при "
"конвертации\n"
"из Си в  Lisp: строка Lisp и внешний указатель строки Си.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-funcall <span class=\"string\">\"getenv\"</span> <span class="
"\"keyword\">:string</span> <span class=\"string\">\"SHELL\"</span> <span "
"class=\"keyword\">:string+ptr</span></span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\"><span class=\"string\">"
"\"/bin/bash\"</span> #.<span class=\"paren2\">(<span class=\"lisp-bg\">SB-"
"SYS:INT-SAP #XBFFFFC6F</span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2243
msgid ""
"<dl>\n"
"<dt><a name=\"index-_003aboolean\"></a>Foreign Type: <strong>:boolean</"
"strong> <em>&amp;optional (base-type :int)</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2254
msgid ""
"<p>The <code>:boolean</code> type converts between a Lisp boolean and a C\n"
"boolean. It canonicalizes to <var>base-type</var> which is <code>:int</code> "
"by\n"
"default.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\">convert-to-foreign nil <span class=\"keyword\">:boolean</span></span>)</"
"span>⇒ 0\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">convert-to-foreign t <span "
"class=\"keyword\">:boolean</span></span>)</span>⇒ 1\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">convert-from-foreign 0 "
"<span class=\"keyword\">:boolean</span></span>)</span>⇒ nil\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">convert-from-foreign 1 "
"<span class=\"keyword\">:boolean</span></span>)</span>⇒ t\n"
"</pre></div>"
msgstr ""
"<p>Тип <code>:boolean</code> выполняет конвертацию межд логическми "
"значениями Lisp и\n"
"логическими значениями Си. Он канонизируется к <var>base-type</var> который "
"по умолчанию\n"
"<code>:int</code>.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\">convert-to-foreign nil <span class=\"keyword\">:boolean</span></span>)</"
"span>⇒ 0\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">convert-to-foreign t <span "
"class=\"keyword\">:boolean</span></span>)</span>⇒ 1\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">convert-from-foreign 0 "
"<span class=\"keyword\">:boolean</span></span>)</span>⇒ nil\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">convert-from-foreign 1 "
"<span class=\"keyword\">:boolean</span></span>)</span>⇒ t\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2258
msgid ""
"<dl>\n"
"<dt><a name=\"index-_003abool\"></a>Foreign Type: <strong>:bool</strong></"
"dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2266
msgid ""
"<p>The <code>:bool</code> type represents the C99 <code>_Bool</code> or C++\n"
"<code>bool</code>. Its size is usually 1 byte except on OSX where itâs an\n"
"<code>int</code>.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003awrapper\"></a>Foreign Type: <strong>:wrapper</"
"strong> <em>base-type &amp;key to-c from-c</em></dt>\n"
"</dl>"
msgstr ""
"<p>Тип <code>:bool</code> представляет собой C99 <code>_Bool</code> или C++\n"
"<code>bool</code>. Его размер обычно составляет 1 байт, за исключением OSX, "
"где он\n"
"<code>int</code>.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-_003awrapper\"></a>Foreign Type: <strong>:wrapper</"
"strong> <em>base-type &amp;key to-c from-c</em></dt>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:2280
msgid ""
"<p>The <code>:wrapper</code> type stores two symbols passed to the <var>to-"
"c</var>\n"
"and <var>from-c</var> arguments. When a value is being translated to or\n"
"from C, this type <code>funcall</code>s the respective symbol.\n"
"</p>\n"
"<p><code>:wrapper</code> types will be typedefs for <var>base-type</var> and "
"will\n"
"inherit its translators, if any.\n"
"</p>\n"
"<p>Hereâs an example of how the <code>:boolean</code> type could be defined "
"in\n"
"terms of <code>:wrapper</code>.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defun</span></i> bool-c-to-lisp <span class="
"\"paren2\">(<span class=\"lisp-bg\">value</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">not <span class="
"\"paren3\">(<span class=\"lisp-bg\">zerop value</span>)</span></span>)</"
"span></span>)</span>"
msgstr ""
"<p>Тип обертка <code>:wrapper</code> хранит два символа, переданных "
"аргументами\n"
"<var>to-c</var> и <var>from-c</var>. Когда значение преобразуется в или из "
"Си, этот\n"
"тип вызывает(<code>funcall</code>) соответствующий символ.\n"
"</p>\n"
"<p>Типы <code>:wrapper</code> будут typedefs для <var>base-type</var> и "
"будут\n"
"наследовать его преобразователи, если таковые имеются.\n"
"</p>\n"
"<p>Вот пример того, как тип <code>:boolean</code> может быть определен в "
"терминах\n"
"<code>:wrapper</code>.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defun</span></i> bool-c-to-lisp <span class="
"\"paren2\">(<span class=\"lisp-bg\">value</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">not <span class="
"\"paren3\">(<span class=\"lisp-bg\">zerop value</span>)</span></span>)</"
"span></span>)</span>"

#: in/CFFI_User_Manual.htm:2283
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defun</span></i> bool-lisp-to-c <span class=\"paren2\">(<span class="
"\"lisp-bg\">value</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">if</span></i> value 1 0</span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:2286
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defctype</span></i> my-bool <span class=\"paren2\">(<span class=\"lisp-bg"
"\"><span class=\"keyword\">:wrapper</span> <span class=\"keyword\">:int</"
"span> <span class=\"keyword\">:from-c</span> bool-c-to-lisp\n"
"                                   <span class=\"keyword\">:to-c</span> bool-"
"lisp-to-c</span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:2290
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\">convert-to-foreign nil 'my-"
"bool</span>)</span>⇒ 0\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">convert-from-foreign 1 'my-"
"bool</span>)</span>⇒ t\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:2299
msgid ""
"<hr>\n"
"<a name=\"Defining-Foreign-Types\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Foreign-Type-Translators\" accesskey=\"n\" rel=\"next"
"\">Foreign Type Translators</a>, Previous: <a href=\"#Other-Types\" "
"accesskey=\"p\" rel=\"prev\">Other Types</a>, Up: <a href=\"#Foreign-Types\" "
"accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents"
"\" title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Defining-Foreign-Types-1\"></a>\n"
"<h3 class=\"section\">6.3 Defining Foreign Types</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Defining-Foreign-Types\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Foreign-Type-Translators\" accesskey=\"n\" rel=\"next"
"\">Foreign Type Translators</a>, Previous: <a href=\"#Other-Types\" "
"accesskey=\"p\" rel=\"prev\">Other Types</a>, Up: <a href=\"#Foreign-Types\" "
"accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents"
"\" title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Defining-Foreign-Types-1\"></a>\n"
"<h3 class=\"section\">6.3 Определение Внешних Типов</h3>"

#: in/CFFI_User_Manual.htm:2308
msgid ""
"<p>You can define simple C-like <code>typedef</code>s through the\n"
"<code>defctype</code> macro. Defining a typedef is as simple as giving\n"
"<code>defctype</code> a new name and the name of the type to be wrapped.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Define MY-INT as an alias "
"for the built-in type :INT.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defctype</span></i> my-int <span class=\"keyword\">:int</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Вы можете определить простые типы подобно Си <code>typedef</code> через\n"
"макрос <code>defctype</code>. Определить тип очень просто, передав в\n"
"<code>defctype</code> новое имя и имя типа которое \"оборачивается\" новым "
"типом.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Define MY-INT as an alias "
"for the built-in type :INT.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defctype</span></i> my-int <span class=\"keyword\">:int</span></"
"span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2315
msgid ""
"<p>With this type definition, one can, for instance, declare arguments to\n"
"foreign functions as having the type <code>my-int</code>, and they will be\n"
"passed as integers.\n"
"</p>\n"
"<a name=\"More-complex-types\"></a>\n"
"<h4 class=\"subheading\">More complex types</h4>"
msgstr ""
"<p>С этим определением типа можно, например, объявить аргументы внешним "
"функциям как\n"
"имеющим тип <code>my-int</code>, и они будут передаваться как целые "
"числа(integers).\n"
"</p>\n"
"<a name=\"More-complex-types\"></a>\n"
"<h4 class=\"subheading\">Более сложные типы</h4>"

#: in/CFFI_User_Manual.htm:2327
msgid ""
"<p><acronym>CFFI</acronym> offers another way to define types through\n"
"<code>define-foreign-type</code>, a thin wrapper macro around\n"
"<code>defclass</code>. As an example, letâs go through the steps needed to\n"
"define a <code>(my-string &amp;key encoding)</code> type. First, we need to\n"
"define our type class:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-foreign-type</span></i> my-string-type "
"<span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\">encoding <span class=\"keyword\">:"
"reader</span> string-type-encoding <span class=\"keyword\">:initarg</span> "
"<span class=\"keyword\">:encoding</span></span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"actual-type</span> <span class=\"keyword\">:pointer</span></span>)</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""
"<p><acronym>CFFI</acronym> предлагает и другой способ определения типов с\n"
"помощью <code>define-foreign-type</code>, тонкого макроа-обертки вокруг\n"
"<code>defclass</code>. В качестве примера, давайте пройдемся по шагам, "
"необходимым\n"
"для определения типа <code>(my-string &amp;key encoding)</code>. Во-первых, "
"нам нужно\n"
"определить наш класс типа:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-foreign-type</span></i> my-string-type "
"<span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\">encoding <span class=\"keyword\">:"
"reader</span> string-type-encoding <span class=\"keyword\">:initarg</span> "
"<span class=\"keyword\">:encoding</span></span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"actual-type</span> <span class=\"keyword\">:pointer</span></span>)</span></"
"span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2339
msgid ""
"<p>The <code>:actual-type</code> class option tells CFFI that this type "
"will\n"
"ultimately be passed to and received from foreign code as a\n"
"<code>:pointer</code>. Now you need to tell CFFI how to parse a type\n"
"specification such as <code>(my-string :encoding :utf8)</code> into an\n"
"instance of <code>my-string-type</code>.  We do that with\n"
"<code>define-parse-method</code>:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-parse-method</span></i> my-string <span "
"class=\"paren2\">(<span class=\"lisp-bg\">&amp;key <span class="
"\"paren3\">(<span class=\"lisp-bg\">encoding <span class=\"keyword\">:utf-8</"
"span></span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">make-instance 'my-string-"
"type <span class=\"keyword\">:encoding</span> encoding</span>)</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Опция класса <code>:actual-type</code> сообщает CFFI, что этот тип в \n"
"конечном итоге будет передан или получен из внешнего кода в виде указателя\n"
"<code>:pointer</code>. Теперь вам нужно рассказать CFFI как анализировать\n"
"спецификацию типа, такую как <code>(my-string :encoding :utf8)</code> в \n"
"экземпляр  <code>my-string-type</code>.  Мы делаем это с помощью\n"
"<code>define-parse-method</code>:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-parse-method</span></i> my-string <span "
"class=\"paren2\">(<span class=\"lisp-bg\">&amp;key <span class="
"\"paren3\">(<span class=\"lisp-bg\">encoding <span class=\"keyword\">:utf-8</"
"span></span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">make-instance 'my-string-"
"type <span class=\"keyword\">:encoding</span> encoding</span>)</span></"
"span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2351
msgid ""
"<p>The next section describes how make this type actually translate\n"
"between C and Lisp strings.\n"
"</p>\n"
"<hr>\n"
"<a name=\"Foreign-Type-Translators\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Optimizing-Type-Translators\" accesskey=\"n\" rel=\"next"
"\">Optimizing Type Translators</a>, Previous: <a href=\"#Defining-Foreign-"
"Types\" accesskey=\"p\" rel=\"prev\">Defining Foreign Types</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Foreign-Type-Translators-1\"></a>\n"
"<h3 class=\"section\">6.4 Foreign Type Translators</h3>"
msgstr ""
"<p>В следующем разделе описывается, как заставить этот тип фактически\n"
"преобразовывать строки между Си и Lisp.\n"
"</p>\n"
"<hr>\n"
"<a name=\"Foreign-Type-Translators\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Optimizing-Type-Translators\" accesskey=\"n\" rel=\"next"
"\">Optimizing Type Translators</a>, Previous: <a href=\"#Defining-Foreign-"
"Types\" accesskey=\"p\" rel=\"prev\">Defining Foreign Types</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Foreign-Type-Translators-1\"></a>\n"
"<h3 class=\"section\">6.4 Преобразователи Внешних Типов</h3>"

#: in/CFFI_User_Manual.htm:2362
msgid ""
"<p>Type translators are used to automatically convert Lisp values to or\n"
"from foreign values.  For example, using type translators, one can\n"
"take the <code>my-string</code> type defined in the previous section and\n"
"specify that it should:\n"
"</p>\n"
"<ul>\n"
"<li> convert C strings to Lisp strings;\n"
"</li><li> convert Lisp strings to newly allocated C strings;\n"
"</li><li> free said C strings when they are no longer needed.\n"
"</li></ul>"
msgstr ""
"<p>Преобразователи типов используются для автоматического преобразования\n"
"значений Lisp В или ИЗ внешних значений.  Например, используя "
"преобразователи\n"
"типов можно взять тип <code>my-string</code>, определенный в предыдущем "
"разделе,\n"
"и указать, что он должен:\n"
"</p>\n"
"<ul>\n"
"<li> конвертировать строки Си в стоки Lisp;\n"
"</li><li> конвертировать строки Lisp во вновь выделенные в памяти строки "
"Си;\n"
"</li><li> Освобождать памать строк Си, когда они больше не нужны.\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:2372
msgid ""
"<p>In order to tell <acronym>CFFI</acronym> how to automatically convert "
"Lisp values to\n"
"foreign values, define a specialized method for the\n"
"<code>translate-to-foreign</code> generic function:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Define a method that "
"converts Lisp strings to C strings.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defmethod</span></i> translate-to-foreign <span class="
"\"paren2\">(<span class=\"lisp-bg\">string <span class=\"paren3\">(<span "
"class=\"lisp-bg\">type my-string-type</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-string-alloc "
"string <span class=\"keyword\">:encoding</span> <span class="
"\"paren3\">(<span class=\"lisp-bg\">string-type-encoding type</span>)</"
"span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Чтобы сообщить <acronym>CFFI</acronym> как автоматически преобразовывать "
"значения\n"
"Lisp во внешние значения, определите специальный метод для "
"обобщенной(универсальной) функции\n"
"<code>translate-to-foreign</code>:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Define a method that "
"converts Lisp strings to C strings.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defmethod</span></i> translate-to-foreign <span class="
"\"paren2\">(<span class=\"lisp-bg\">string <span class=\"paren3\">(<span "
"class=\"lisp-bg\">type my-string-type</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-string-alloc "
"string <span class=\"keyword\">:encoding</span> <span class="
"\"paren3\">(<span class=\"lisp-bg\">string-type-encoding type</span>)</"
"span></span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2384
msgid ""
"<p>From now on, whenever an object is passed as a <code>my-string</code> to "
"a\n"
"foreign function, this method will be invoked to convert the Lisp\n"
"value. To perform the inverse operation, which is needed for functions\n"
"that return a <code>my-string</code>, specialize the\n"
"<code>translate-from-foreign</code> generic function in the same manner:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Define a method that "
"converts C strings to Lisp strings.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defmethod</span></i> translate-from-foreign <span class="
"\"paren2\">(<span class=\"lisp-bg\">pointer <span class=\"paren3\">(<span "
"class=\"lisp-bg\">type my-string-type</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-string-to-lisp "
"pointer <span class=\"keyword\">:encoding</span> <span class="
"\"paren3\">(<span class=\"lisp-bg\">string-type-encoding type</span>)</"
"span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>С этого момента, всякий раз, когда объект передается как <code>my-string</"
"code> \n"
"во внешнюю функию, будет вызываться этот метод для преобразования значения "
"Lisp. \n"
"Чтобы выполнить обратную операцию, которая необходима для функций, которые "
"возвращают\n"
"<code>my-string</code>, определите специальный метод обобщенной функции\n"
"<code>translate-from-foreign</code> таким же образом:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Define a method that "
"converts C strings to Lisp strings.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defmethod</span></i> translate-from-foreign <span class="
"\"paren2\">(<span class=\"lisp-bg\">pointer <span class=\"paren3\">(<span "
"class=\"lisp-bg\">type my-string-type</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-string-to-lisp "
"pointer <span class=\"keyword\">:encoding</span> <span class="
"\"paren3\">(<span class=\"lisp-bg\">string-type-encoding type</span>)</"
"span></span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2398
msgid ""
"<p>When a <code>translate-to-foreign</code> method requires allocation of\n"
"foreign memory, you must also define a <code>free-translated-object</code>\n"
"method to free the memory once the foreign object is no longer needed,\n"
"otherwise youâll be faced with memory leaks.  This generic function is\n"
"called automatically by <acronym>CFFI</acronym> when passing objects to "
"foreign\n"
"functions. Letâs do that:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Free strings allocated by "
"translate-to-foreign.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defmethod</span></i> free-translated-object <span class="
"\"paren2\">(<span class=\"lisp-bg\">pointer <span class=\"paren3\">(<span "
"class=\"lisp-bg\">type my-string-type</span>)</span> param</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">declare <span class="
"\"paren3\">(<span class=\"lisp-bg\">ignore param</span>)</span></span>)</"
"span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-string-free "
"pointer</span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Когда метод <code>translate-to-foreign</code> требует выделения внешней\n"
"памяти, вы также должны определить метод <code>free-translated-object</"
"code>\n"
"чтобы освобождить память, когда объект больше не требуется,\n"
"в противном случае вы столкнетесь с утечками памяти.  Эта обобщенная "
"функция\n"
"автоматически вызывается <acronym>CFFI</acronym> при передаче объектов во\n"
"внешние функции. Давайте сделаем это:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Free strings allocated by "
"translate-to-foreign.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defmethod</span></i> free-translated-object <span class="
"\"paren2\">(<span class=\"lisp-bg\">pointer <span class=\"paren3\">(<span "
"class=\"lisp-bg\">type my-string-type</span>)</span> param</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">declare <span class="
"\"paren3\">(<span class=\"lisp-bg\">ignore param</span>)</span></span>)</"
"span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-string-free "
"pointer</span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2426
msgid ""
"<p>In this specific example, we donât need the <var>param</var> argument, "
"so\n"
"we ignore it. See <a href=\"#free_002dtranslated_002dobject\">free-"
"translated-object</a>, for an explanation of\n"
"its purpose and how you can use it.\n"
"</p>\n"
"<p>A type translator does not necessarily need to convert the value.  For\n"
"example, one could define a typedef for <code>:pointer</code> that ensures,\n"
"in the <code>translate-to-foreign</code> method, that the value is not a\n"
"null pointer, signalling an error if a null pointer is passed.  This\n"
"would prevent some pointer errors when calling foreign functions that\n"
"cannot handle null pointers.\n"
"</p>\n"
"<p><strong>Please note:</strong> these methods are meant as extensible "
"hooks\n"
"only, and you should not call them directly.  Use\n"
"<code>convert-to-foreign</code>, <code>convert-from-foreign</code> and\n"
"<code>free-converted-object</code> instead.\n"
"</p>\n"
"<p>See <a href=\"#Tutorial_002dTypes\">Defining new types</a>, for another "
"example of\n"
"type translators.\n"
"</p>\n"
"<hr>\n"
"<a name=\"Optimizing-Type-Translators\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Foreign-Structure-Types\" accesskey=\"n\" rel=\"next"
"\">Foreign Structure Types</a>, Previous: <a href=\"#Foreign-Type-Translators"
"\" accesskey=\"p\" rel=\"prev\">Foreign Type Translators</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Optimizing-Type-Translators-1\"></a>\n"
"<h3 class=\"section\">6.5 Optimizing Type Translators</h3>"
msgstr ""
"<p>В этом конкретном примере, нам не нужен аргумент <var>param</var>, "
"поэтому\n"
"мы его игнорируем. См. <a href=\"#free_002dtranslated_002dobject\">free-"
"translated-object</a>, \n"
"для объяснения его целей и того как вы можете его использовать.\n"
"</p>\n"
"<p>Преобразователь типа не обязательно должен преобразовывать значение.  \n"
"Например, можно определить тип для <code>:pointer</code>, который "
"гарантирует\n"
"что в методе <code>translate-to-foreign</code>, значение не является "
"нулевым\n"
"указателем, сигнализируя об ошибке, если передан нулевой указатель. Это\n"
"предотвратит некоторые ошибки при вызове сторонних функций, которые не\n"
"могут обработать нулевые указатели.\n"
"</p>\n"
"<p><strong>Обратите внимание:</strong> эти методы предназначены только для \n"
"расширения хуков, и вы не должны вызвать их напрямую.  Вместо этого\n"
"используйте команды <code>convert-to-foreign</code>, <code>convert-from-"
"foreign</code> \n"
"и <code>free-converted-object</code>.\n"
"</p>\n"
"<p>См. <a href=\"#Tutorial_002dTypes\">Определение новых типов</a>, для "
"ознакомления с примером\n"
"еще одного преобразователя типа.\n"
"</p>\n"
"<hr>\n"
"<a name=\"Optimizing-Type-Translators\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Foreign-Structure-Types\" accesskey=\"n\" rel=\"next"
"\">Foreign Structure Types</a>, Previous: <a href=\"#Foreign-Type-Translators"
"\" accesskey=\"p\" rel=\"prev\">Foreign Type Translators</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Optimizing-Type-Translators-1\"></a>\n"
"<h3 class=\"section\">6.5 Оптимизация Преобразователя Типа</h3>"

#: in/CFFI_User_Manual.htm:2452
msgid ""
"<a name=\"index-type-translators_002c-optimizing\"></a>\n"
"<a name=\"index-compiler-macros-for-type-translation\"></a>\n"
"<a name=\"index-defining-type_002dtranslation-compiler-macros\"></a>\n"
"<p>Being based on generic functions, the type translation mechanism\n"
"described above can add a bit of overhead.  This is usually not\n"
"significant, but we nevertheless provide a way of getting rid of the\n"
"overhead for the cases where it matters.\n"
"</p>\n"
"<p>A good way to understand this issue is to look at the code generated\n"
"by <code>defcfun</code>. Consider the following example using the "
"previously\n"
"defined <code>my-string</code> type:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">macroexpand-1 '<span class=\"paren2\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">defcfun</span></i> foo my-string <span class="
"\"paren3\">(<span class=\"lisp-bg\">x my-string</span>)</span></span>)</"
"span></span>)</span>\n"
"  <span class=\"comment\">;; (simplified, downcased, etc...)\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defun</span></i> foo <span class=\"paren2\">(<span class=\"lisp-bg"
"\">x</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">multiple-value-bind "
"<span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">#:"
"G2019</span> <span class=\"keyword\">#:PARAM3149</span></span>)</span>\n"
"        <span class=\"paren3\">(<span class=\"lisp-bg\">translate-to-foreign "
"x #&lt;MY-STRING-TYPE {11ED5A79}&gt;</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">unwind-protect</span></i>\n"
"          <span class=\"paren4\">(<span class=\"lisp-bg\">translate-from-"
"foreign\n"
"           <span class=\"paren5\">(<span class=\"lisp-bg\">foreign-funcall "
"<span class=\"string\">\"foo\"</span> <span class=\"keyword\">:pointer</"
"span> <span class=\"keyword\">#:G2019</span> <span class=\"keyword\">:"
"pointer</span></span>)</span>\n"
"           #&lt;MY-STRING-TYPE {11ED5659}&gt;</span>)</span>\n"
"        <span class=\"paren4\">(<span class=\"lisp-bg\">free-translated-"
"object <span class=\"keyword\">#:G2019</span> #&lt;MY-STRING-TYPE {11ED51A79}"
"&gt;\n"
"                                <span class=\"keyword\">#:PARAM3149</span></"
"span>)</span></span>)</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<a name=\"index-type-translators_002c-optimizing\"></a>\n"
"<a name=\"index-compiler-macros-for-type-translation\"></a>\n"
"<a name=\"index-defining-type_002dtranslation-compiler-macros\"></a>\n"
"<p>Основанный на обобщенных функциях механизм преобразования типов, "
"описанный выше,\n"
"может добавить немного накладных расходов.  Обычно это не существенно, но "
"мы, тем \n"
"не менее, предоставляем способ избавиться от накладных расходов в тех "
"случаях, когда\n"
"это важно.\n"
"</p>\n"
"<p>Хороший способ понять эту проблему - посмотреть на код, сгенерированный\n"
"<code>defcfun</code>. Рассмотрим следующий пример с использованием ранее\n"
"определенного типа <code>my-string</code>:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">macroexpand-1 '<span class=\"paren2\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">defcfun</span></i> foo my-string <span class="
"\"paren3\">(<span class=\"lisp-bg\">x my-string</span>)</span></span>)</"
"span></span>)</span>\n"
"  <span class=\"comment\">;; (simplified, downcased, etc...)\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defun</span></i> foo <span class=\"paren2\">(<span class=\"lisp-bg"
"\">x</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">multiple-value-bind "
"<span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">#:"
"G2019</span> <span class=\"keyword\">#:PARAM3149</span></span>)</span>\n"
"        <span class=\"paren3\">(<span class=\"lisp-bg\">translate-to-foreign "
"x #&lt;MY-STRING-TYPE {11ED5A79}&gt;</span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">unwind-protect</span></i>\n"
"          <span class=\"paren4\">(<span class=\"lisp-bg\">translate-from-"
"foreign\n"
"           <span class=\"paren5\">(<span class=\"lisp-bg\">foreign-funcall "
"<span class=\"string\">\"foo\"</span> <span class=\"keyword\">:pointer</"
"span> <span class=\"keyword\">#:G2019</span> <span class=\"keyword\">:"
"pointer</span></span>)</span>\n"
"           #&lt;MY-STRING-TYPE {11ED5659}&gt;</span>)</span>\n"
"        <span class=\"paren4\">(<span class=\"lisp-bg\">free-translated-"
"object <span class=\"keyword\">#:G2019</span> #&lt;MY-STRING-TYPE {11ED51A79}"
"&gt;\n"
"                                <span class=\"keyword\">#:PARAM3149</span></"
"span>)</span></span>)</span></span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2465
msgid ""
"<p>In order to get rid of those generic function calls, <acronym>CFFI</"
"acronym> has\n"
"another set of extensible generic functions that provide functionality\n"
"similar to <acronym>CL</acronym>âs compiler macros:\n"
"<code>expand-to-foreign-dyn</code>, <code>expand-to-foreign</code> and\n"
"<code>expand-from-foreign</code>. Hereâs how one could define a\n"
"<code>my-boolean</code> with them:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-foreign-type</span></i> my-boolean-type "
"<span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"actual-type</span> <span class=\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"simple-parser</span> my-boolean</span>)</span></span>)</span>"
msgstr ""
"<p>Для того чтобы избавиться от этих вызовов обобщенных функций, \n"
"<acronym>CFFI</acronym> имеет еще один набор расширяемых обобщенных "
"функций,\n"
"которые предоставляют функциональность, аналогичную макросам\n"
"компилятора <acronym>CL</acronym>â:\n"
"<code>expand-to-foreign-dyn</code>, <code>expand-to-foreign</code> и\n"
"<code>expand-from-foreign</code>. Вот как можно определить <code>my-boolean</"
"code> \n"
"с их использованием:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-foreign-type</span></i> my-boolean-type "
"<span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"actual-type</span> <span class=\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"simple-parser</span> my-boolean</span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:2468
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defmethod</span></i> expand-to-foreign <span class=\"paren2\">(<span "
"class=\"lisp-bg\">value <span class=\"paren3\">(<span class=\"lisp-bg\">type "
"my-boolean-type</span>)</span></span>)</span>\n"
"    `<span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">if</span></i> ,value 1 0</span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:2472
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defmethod</span></i> expand-from-foreign <span class=\"paren2\">(<span "
"class=\"lisp-bg\">value <span class=\"paren3\">(<span class=\"lisp-bg\">type "
"my-boolean-type</span>)</span></span>)</span>\n"
"    `<span class=\"paren2\">(<span class=\"lisp-bg\">not <span class="
"\"paren3\">(<span class=\"lisp-bg\">zerop ,value</span>)</span></span>)</"
"span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:2483
msgid ""
"<p>And hereâs what the macroexpansion of a function using this type would\n"
"look like:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">macroexpand-1 '<span class=\"paren2\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">defcfun</span></i> bar my-boolean <span class="
"\"paren3\">(<span class=\"lisp-bg\">x my-boolean</span>)</span></span>)</"
"span></span>)</span>\n"
"  <span class=\"comment\">;; (simplified, downcased, etc...)\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defun</span></i> bar <span class=\"paren2\">(<span class=\"lisp-bg"
"\">x</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">let</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"paren4\">(<span class=\"lisp-bg\"><span class=\"keyword\">#:g3182</"
"span> <span class=\"paren5\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">if</span></i> x 1 0</span>)</span></span>)</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">not <span class="
"\"paren4\">(<span class=\"lisp-bg\">zerop <span class=\"paren5\">(<span "
"class=\"lisp-bg\">foreign-funcall <span class=\"string\">\"bar\"</span> "
"<span class=\"keyword\">:int</span> <span class=\"keyword\">#:g3182</span> "
"<span class=\"keyword\">:int</span></span>)</span></span>)</span></span>)</"
"span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>А вот как будет выглядеть макрорасширение функции использующей этот тип:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">macroexpand-1 '<span class=\"paren2\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">defcfun</span></i> bar my-boolean <span class="
"\"paren3\">(<span class=\"lisp-bg\">x my-boolean</span>)</span></span>)</"
"span></span>)</span>\n"
"  <span class=\"comment\">;; (simplified, downcased, etc...)\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defun</span></i> bar <span class=\"paren2\">(<span class=\"lisp-bg"
"\">x</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">let</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"paren4\">(<span class=\"lisp-bg\"><span class=\"keyword\">#:g3182</"
"span> <span class=\"paren5\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">if</span></i> x 1 0</span>)</span></span>)</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">not <span class="
"\"paren4\">(<span class=\"lisp-bg\">zerop <span class=\"paren5\">(<span "
"class=\"lisp-bg\">foreign-funcall <span class=\"string\">\"bar\"</span> "
"<span class=\"keyword\">:int</span> <span class=\"keyword\">#:g3182</span> "
"<span class=\"keyword\">:int</span></span>)</span></span>)</span></span>)</"
"span></span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2499
msgid ""
"<p>No generic function overhead.\n"
"</p>\n"
"<p>Letâs go back to our <code>my-string</code> type.  The expansion "
"interface\n"
"has no equivalent of <code>free-translated-object</code>; you must instead\n"
"define a method on <code>expand-to-foreign-dyn</code>, the third generic\n"
"function in this interface.  This is especially useful when you can\n"
"allocate something much more efficiently if you know the object has\n"
"dynamic extent, as is the case with function calls that donât save the\n"
"relevant allocated arguments.\n"
"</p>\n"
"<p>This exactly what we need for the <code>my-string</code> type:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defmethod</span></i> expand-from-foreign <span "
"class=\"paren2\">(<span class=\"lisp-bg\">form <span class=\"paren3\">(<span "
"class=\"lisp-bg\">type my-string-type</span>)</span></span>)</span>\n"
"    `<span class=\"paren2\">(<span class=\"lisp-bg\">foreign-string-to-lisp ,"
"form</span>)</span></span>)</span>"
msgstr ""
"<p>Нет накладных расходов на обобщенные функции.\n"
"</p>\n"
"<p>Давайте вернемся к нашему типу <code>my-string</code>.  Интерфейс "
"расширения\n"
"не имеет эквивалента <code>free-translated-object</code>; вместо этого вы "
"должны\n"
"определить метод в <code>expand-to-foreign-dyn</code>, третьей обобщенной "
"функции\n"
"в этом интерфейсе.  Это особенно полезно, когда вы можете выделить память "
"для чего-то\n"
"гораздо более эффективно, если знаете что объект имеет динамическое "
"пространство существования,\n"
"как в случае с вызовами функций, которые не сохраняют соответствующие "
"выделенные аргументы.\n"
"</p>\n"
"<p>Это именно то, что нам нужно для типа <code>my-string</code>:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defmethod</span></i> expand-from-foreign <span "
"class=\"paren2\">(<span class=\"lisp-bg\">form <span class=\"paren3\">(<span "
"class=\"lisp-bg\">type my-string-type</span>)</span></span>)</span>\n"
"    `<span class=\"paren2\">(<span class=\"lisp-bg\">foreign-string-to-lisp ,"
"form</span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:2505
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defmethod</span></i> expand-to-foreign-dyn <span class=\"paren2\">(<span "
"class=\"lisp-bg\">value var body <span class=\"paren3\">(<span class=\"lisp-"
"bg\">type my-string-type</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">let</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"paren4\">(<span class=\"lisp-bg\">encoding <span class="
"\"paren5\">(<span class=\"lisp-bg\">string-type-encoding type</span>)</"
"span></span>)</span></span>)</span>\n"
"      `<span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-string</span></i> <span class=\"paren4\">(<span "
"class=\"lisp-bg\">,var ,value <span class=\"keyword\">:encoding</span> ',"
"encoding</span>)</span>\n"
"         ,@body</span>)</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:2516
msgid ""
"<p>So letâs look at the macro expansion:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">macroexpand-1 '<span class=\"paren2\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">defcfun</span></i> foo my-string <span class="
"\"paren3\">(<span class=\"lisp-bg\">x my-string</span>)</span></span>)</"
"span></span>)</span>\n"
"  <span class=\"comment\">;; (simplified, downcased, etc...)\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defun</span></i> foo <span class=\"paren2\">(<span class=\"lisp-bg"
"\">x</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-foreign-string</span></i> <span class=\"paren3\">(<span class=\"lisp-"
"bg\"><span class=\"keyword\">#:G2021</span> X <span class=\"keyword\">:"
"encoding</span> '<span class=\"keyword\">:utf-8</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">foreign-string-to-"
"lisp\n"
"       <span class=\"paren4\">(<span class=\"lisp-bg\">foreign-funcall <span "
"class=\"string\">\"foo\"</span> <span class=\"keyword\">:pointer</span> "
"<span class=\"keyword\">#:g2021</span> <span class=\"keyword\">:pointer</"
"span></span>)</span></span>)</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Итак, давайте посмотрим на его макрорасширение:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">macroexpand-1 '<span class=\"paren2\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">defcfun</span></i> foo my-string <span class="
"\"paren3\">(<span class=\"lisp-bg\">x my-string</span>)</span></span>)</"
"span></span>)</span>\n"
"  <span class=\"comment\">;; (simplified, downcased, etc...)\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defun</span></i> foo <span class=\"paren2\">(<span class=\"lisp-bg"
"\">x</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-foreign-string</span></i> <span class=\"paren3\">(<span class=\"lisp-"
"bg\"><span class=\"keyword\">#:G2021</span> X <span class=\"keyword\">:"
"encoding</span> '<span class=\"keyword\">:utf-8</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">foreign-string-to-"
"lisp\n"
"       <span class=\"paren4\">(<span class=\"lisp-bg\">foreign-funcall <span "
"class=\"string\">\"foo\"</span> <span class=\"keyword\">:pointer</span> "
"<span class=\"keyword\">#:g2021</span> <span class=\"keyword\">:pointer</"
"span></span>)</span></span>)</span></span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2521
msgid ""
"<p>Again, no generic function overhead.\n"
"</p>\n"
"<a name=\"Other-details\"></a>\n"
"<h4 class=\"subheading\">Other details</h4>"
msgstr ""
"<p>Опять же, нет никаких накладных расходов обобщенных функций.\n"
"</p>\n"
"<a name=\"Other-details\"></a>\n"
"<h4 class=\"subheading\">Другие детали</h4>"

#: in/CFFI_User_Manual.htm:2565
msgid ""
"<p>To short-circuit expansion and use the <code>translate-*</code> "
"functions\n"
"instead, simply call the next method.  Return its result in cases\n"
"where your method cannot generate an appropriate replacement for it.\n"
"This analogous to the <code>&amp;whole form</code> mechanism compiler "
"macros\n"
"provide.\n"
"</p>\n"
"<p>The <code>expand-*</code> methods have precedence over their\n"
"<code>translate-*</code> counterparts and are guaranteed to be used in\n"
"<code>defcfun</code>, <code>foreign-funcall</code>, <code>defcvar</code> "
"and\n"
"<code>defcallback</code>.  If you define a method on each of the\n"
"<code>expand-*</code> generic functions, you are guaranteed to have full\n"
"control over the expressions generated for type translation in these\n"
"macros.\n"
"</p>\n"
"<p>They may or may not be used in other <acronym>CFFI</acronym> operators "
"that need to\n"
"translate between Lisp and C data; you may only assume that\n"
"<code>expand-*</code> methods will probably only be called during Lisp\n"
"compilation.\n"
"</p>\n"
"<p><code>expand-to-foreign-dyn</code> has precedence over\n"
"<code>expand-to-foreign</code> and is only used in <code>defcfun</code> and\n"
"<code>foreign-funcall</code>, only making sense in those contexts.\n"
"</p>\n"
"<p><strong>Important note:</strong> this set of generic functions is called "
"at\n"
"macroexpansion time.  Methods are defined when loaded or evaluated,\n"
"not compiled.  You are responsible for ensuring that your\n"
"<code>expand-*</code> methods are defined when the <code>foreign-funcall</"
"code> or\n"
"other forms that use them are compiled.  One way to do this is to put\n"
"the method definitions earlier in the file and inside an appropriate\n"
"<code>eval-when</code> form; another way is to always load a separate Lisp\n"
"or <acronym>FASL</acronym> file containing your <code>expand-*</code> "
"definitions\n"
"before compiling files with forms that ought to use them.  Otherwise,\n"
"they will not be found and the runtime translators will be used\n"
"instead.\n"
"</p>\n"
"<hr>\n"
"<a name=\"Foreign-Structure-Types\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Allocating-Foreign-Objects\" accesskey=\"n\" rel=\"next"
"\">Allocating Foreign Objects</a>, Previous: <a href=\"#Optimizing-Type-"
"Translators\" accesskey=\"p\" rel=\"prev\">Optimizing Type Translators</a>, "
"Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> "
"&nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Foreign-Structure-Types-1\"></a>\n"
"<h3 class=\"section\">6.6 Foreign Structure Types</h3>"
msgstr ""
"<p>Чтобы сократить расширение и использовать вместо него функции "
"<code>translate-*</code>,\n"
"просто вызовите следующий(next) метод.  Верните его результат в тех случаях, "
"когда\n"
"ваш метод не может создать для него подходящую замену.\n"
"Это аналог механизма компиляции макроса всей формы.\n"
"</p>\n"
"<p>Методы <code>expand-*</code> имеют приоритет перед аналогами\n"
"<code>translate-*</code> и гарантированно будут использоваться в \n"
"<code>defcfun</code>, <code>foreign-funcall</code>, <code>defcvar</code> и\n"
"<code>defcallback</code>.  Если вы определили метод для каждой из \n"
"<code>expand-*</code> обобщенных функций, вы гарантированно получите\n"
"полный контроль над выражениями, сгенерированными для преобразования\n"
"типов в этих макросах.\n"
"</p>\n"
"<p>Они могут использоваться, а могут не использоваться и в других "
"операторах\n"
" <acronym>CFFI</acronym>, которые должны преобразовывать данные между\n"
"Lisp и Си; вы можете только предполагать, что методы\n"
"<code>expand-*</code> будут использоваться только во время компиляции Lisp.\n"
"</p>\n"
"<p><code>expand-to-foreign-dyn</code> имеет приоритет над\n"
"<code>expand-to-foreign</code> и используется только в <code>defcfun</code> "
"и\n"
"<code>foreign-funcall</code> и имеет смысл только в этих контекстах.\n"
"</p>\n"
"<p><strong>Важное замечание:</strong> Этот набор обобщенных функций "
"вызывается\n"
"во время макрорасширения.  Методы определяются на стадии загрузки или "
"вычисления,\n"
"а не компиляции.  Вы несете ответственность за то, чтобы ваши методы\n"
"<code>expand-*</code> были определены при компиляции <code>foreign-funcall</"
"code> или\n"
"других форм, которые их используют.  Один из способов сделать это - "
"поместить определение\n"
"метода в файл раньше других форм и в соответствующую форму <code>eval-when</"
"code>; \n"
"другой способ - всегда загружать отдельный файл Lisp или <acronym>FASL</"
"acronym>, \n"
"содержащий ваши определения <code>expand-*</code>, прежде чем компилировать "
"файлы\n"
"с формами, которые должны их использовать. В противном случае они не будут "
"найдены, и\n"
"вместо них будут использоваться преобразователи времени выполнения..\n"
"</p>\n"
"<hr>\n"
"<a name=\"Foreign-Structure-Types\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Allocating-Foreign-Objects\" accesskey=\"n\" rel=\"next"
"\">Allocating Foreign Objects</a>, Previous: <a href=\"#Optimizing-Type-"
"Translators\" accesskey=\"p\" rel=\"prev\">Optimizing Type Translators</a>, "
"Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> "
"&nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Foreign-Structure-Types-1\"></a>\n"
"<h3 class=\"section\">6.6 Внешние Структурные Типы</h3>"

#: in/CFFI_User_Manual.htm:2579
msgid ""
"<p>For more involved C types than simple aliases to built-in types, such\n"
"as you can make with <code>defctype</code>, <acronym>CFFI</acronym> allows "
"declaration of\n"
"structures and unions with <code>defcstruct</code> and <code>defcunion</"
"code>.\n"
"</p>\n"
"<p>For example, consider this fictional C structure declaration holding\n"
"some personal information:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">struct person {\n"
"  int number;\n"
"  char* reason;\n"
"};\n"
"</pre></div>"
msgstr ""
"<p>Для типов Си более сложных, чем простые псевдонимы для встроенных типов, "
"таких которые\n"
"вы можете сделать с помощью <code>defctype</code>, <acronym>CFFI</acronym> "
"позволяет\n"
"обявлять структуры и объединения с помощью <code>defcstruct</code> и "
"<code>defcunion</code>.\n"
"</p>\n"
"<p>Например, рассмотрим это вымышленное объявление Си структуры, содержащей "
"некоторую\n"
"персональную информацию:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">struct person {\n"
"  int number;\n"
"  char* reason;\n"
"};\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2587
msgid ""
"<p>The equivalent <code>defcstruct</code> form follows:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> person\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">number <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">reason <span class="
"\"keyword\">:string</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Её эквивалентная форма <code>defcstruct</code> следующая:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> person\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">number <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">reason <span class="
"\"keyword\">:string</span></span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2614
msgid ""
"<p>By default, <a href=\"#convert_002dfrom_002dforeign\">convert-from-"
"foreign</a> (and also <a href=\"#mem_002dref\">mem-ref</a>) will\n"
"make a plist with slot names as keys, and <a href="
"\"#convert_002dto_002dforeign\">convert-to-foreign</a> will\n"
"translate such a plist to a foreign structure.  A user wishing to define\n"
"other translations should use the <code>:class</code> argument to\n"
"<a href=\"#defcstruct\">defcstruct</a>, and then define methods for\n"
"<a href=\"#translate_002dfrom_002dforeign\">translate-from-foreign</a> and\n"
"<a href=\"#translate_002dinto_002dforeign_002dmemory\">translate-into-"
"foreign-memory</a> that specialize on this class,\n"
"possibly calling <code>call-next-method</code> to translate from and to the\n"
"plists rather than provide a direct interface to the foreign object.\n"
"The macro <code>translation-forms-for-class</code> will generate the forms\n"
"necessary to translate a Lisp class into a foreign structure and vice\n"
"versa.\n"
"</p>\n"
"<p>Please note that this interface is only for those that must know about\n"
"the values contained in a relevant struct.  If the library you are\n"
"interfacing returns an opaque pointer that needs only be passed to\n"
"other C library functions, by all means just use <code>:pointer</code> or a\n"
"type-safe definition munged together with <code>defctype</code> and type\n"
"translation.  To pass or return a structure by value to a function, load\n"
"the cffi-libffi system and specify the structure as <code>(:struct\n"
"<var>structure-name</var>)</code>.  To pass or return the pointer, you can "
"use\n"
"either <code>:pointer</code> or <code>(:pointer (:struct\n"
"<var>structure-name</var>))</code>.\n"
"</p>\n"
"<a name=\"Optimizing-translate_002dinto_002dforeign_002dmemory\"></a>\n"
"<h4 class=\"subheading\">Optimizing translate-into-foreign-memory</h4>"
msgstr ""
"<p>По умолчанию, <a href=\"#convert_002dfrom_002dforeign\">convert-from-"
"foreign</a> (а также <a href=\"#mem_002dref\">mem-ref</a>) создадет список с "
"именами слотов в качестве ключей,  <a href=\"#convert_002dto_002dforeign"
"\">convert-to-foreign</a> преобразует этот\n"
"список(plist) во внешнюю структуру.  Пользователь, желающий определить "
"другие\n"
"преобразования должен использовать аргумент <code>:class</code> в\n"
"<a href=\"#defcstruct\">defcstruct</a>, а затем определить методы для\n"
"<a href=\"#translate_002dfrom_002dforeign\">translate-from-foreign</a> и\n"
"<a href=\"#translate_002dinto_002dforeign_002dmemory\">translate-into-"
"foreign-memory</a>, которые\n"
"специализируются на этом классе, возможно вызывая <code>call-next-method</"
"code> \n"
"для преобразования из и в plists, а не для обеспечения прямого интерфейса с "
"внешним объектом.\n"
"Макрос <code>translation-forms-for-class</code> будет генерировать формы, "
"необходимые\n"
"для преобразования класс Lisp во внешнюю структуру и наоборот.\n"
"</p>\n"
"<p>Обратите внимание, что этот интерфейс предназначен только для тех, кто "
"должен знать о\n"
"значениях содержащихся в соответствующей структуре.  Если библиотека, с "
"которой \n"
"вы взаимодействуете, возвращает непрозрачный указатель(т.е гарантировано не "
"известно, на\n"
"что он указывает), который нужно только передать другим функциям библиотеки "
"Си, во что бы то\n"
"ни стало просто используйте <code>:pointer</code> или определение "
"безопасного типа,\n"
"объединенное с <code>defctype</code> и преобразование типа.  Чтобы передать "
"или вернуть\n"
"структуру по значению в функцию, загрузите систему cffi-libffi и определите "
"структуру\n"
"как <code>(:struct <var>structure-name</var>)</code>.  Чтобы передать или "
"вернуть указатель,\n"
"вы может использовать либо <code>:pointer</code> или <code>(:pointer (:"
"struct\n"
"<var>structure-name</var>))</code>.\n"
"</p>\n"
"<a name=\"Optimizing-translate_002dinto_002dforeign_002dmemory\"></a>\n"
"<h4 class=\"subheading\">Оптимизация преобразования во внешнюю "
"память(translate-into-foreign-memory)</h4>"

#: in/CFFI_User_Manual.htm:2632
msgid ""
"<p>Just like how <a href=\"#translate_002dfrom_002dforeign\">translate-from-"
"foreign</a> had\n"
"<code>expand-from-foreign</code> to optimize away the generic function call\n"
"and <a href=\"#translate_002dto_002dforeign\">translate-to-foreign</a> had "
"the same in\n"
"<code>expand-to-foreign</code>, <a href="
"\"#translate_002dinto_002dforeign_002dmemory\">translate-into-foreign-"
"memory</a> has\n"
"<code>expand-into-foreign-memory</code>.\n"
"</p>\n"
"<p>Letâs use our <code>person</code> struct in an example. However, we are\n"
"going to spice it up by using a lisp struct rather than a plist to\n"
"represent the person in lisp.\n"
"</p>\n"
"<p>First we redefine <code>person</code> very slightly.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> <span class="
"\"paren2\">(<span class=\"lisp-bg\">person <span class=\"keyword\">:class</"
"span> c-person</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">number <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">reason <span class="
"\"keyword\">:string</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Точно так же, как  <a href=\"#translate_002dfrom_002dforeign\">translate-"
"from-foreign</a> использовал\n"
"<code>expand-from-foreign</code>, чтобы оптимизировать вызов обобщенных "
"функций  и \n"
"<a href=\"#translate_002dto_002dforeign\">translate-to-foreign</a> делал "
"тоже самое в\n"
"<code>expand-to-foreign</code>, <a href="
"\"#translate_002dinto_002dforeign_002dmemory\">translate-into-foreign-"
"memory</a> использует для этого\n"
"<code>expand-into-foreign-memory</code>.\n"
"</p>\n"
"<p>Давайте использовать нашу структуру <code>person</code> в качестве "
"примера. Тем не менее,\n"
"мы собираемся приправить его(пример) использованием структуры lisp, а не "
"plist \n"
"для представления person(человека) в lisp.\n"
"</p>\n"
"<p>Сначала мы чуть чуть переопределим <code>person</code>.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> <span class="
"\"paren2\">(<span class=\"lisp-bg\">person <span class=\"keyword\">:class</"
"span> c-person</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">number <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">reason <span class="
"\"keyword\">:string</span></span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2643
msgid ""
"<p>By adding <code>:class</code> we can specialize the <code>translate-*</"
"code>\n"
"methods on the type <code>c-person</code>.\n"
"</p>\n"
"<p>Next we define a lisp struct to use instead of the plists.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defstruct</span></i> lisp-person\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">number 0 <span class="
"\"keyword\">:type</span> integer</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">reason <span class="
"\"string\">\"\"</span> <span class=\"keyword\">:type</span> string</span>)</"
"span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Добавив <code>:class</code> мы можем специализировать методы "
"<code>translate-*</code>\n"
"для типа <code>c-person</code>.\n"
"</p>\n"
"<p>Далее мы определяем структуру lisp для использования вместо plists.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defstruct</span></i> lisp-person\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">number 0 <span class="
"\"keyword\">:type</span> integer</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">reason <span class="
"\"string\">\"\"</span> <span class=\"keyword\">:type</span> string</span>)</"
"span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2650
msgid ""
"<p>And now letâs define the type translators we know already:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defmethod</span></i> translate-from-foreign "
"<span class=\"paren2\">(<span class=\"lisp-bg\">ptr <span class="
"\"paren3\">(<span class=\"lisp-bg\">type c-person</span>)</span></span>)</"
"span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-foreign-slots</span></i> <span class=\"paren3\">(<span class=\"lisp-"
"bg\"><span class=\"paren4\">(<span class=\"lisp-bg\">number reason</span>)</"
"span> ptr <span class=\"paren4\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:struct</span> person</span>)</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">make-lisp-person <span "
"class=\"keyword\">:number</span> number <span class=\"keyword\">:reason</"
"span> reason</span>)</span></span>)</span></span>)</span>"
msgstr ""
"<p>И теперь давайте определим преобразователи типа, которые мы уже знаем:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defmethod</span></i> translate-from-foreign "
"<span class=\"paren2\">(<span class=\"lisp-bg\">ptr <span class="
"\"paren3\">(<span class=\"lisp-bg\">type c-person</span>)</span></span>)</"
"span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-foreign-slots</span></i> <span class=\"paren3\">(<span class=\"lisp-"
"bg\"><span class=\"paren4\">(<span class=\"lisp-bg\">number reason</span>)</"
"span> ptr <span class=\"paren4\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:struct</span> person</span>)</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">make-lisp-person <span "
"class=\"keyword\">:number</span> number <span class=\"keyword\">:reason</"
"span> reason</span>)</span></span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:2654
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defmethod</span></i> expand-from-foreign <span class=\"paren2\">(<span "
"class=\"lisp-bg\">ptr <span class=\"paren3\">(<span class=\"lisp-bg\">type c-"
"person</span>)</span></span>)</span>\n"
"    `<span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-foreign-slots</span></i> <span class=\"paren3\">(<span class=\"lisp-"
"bg\"><span class=\"paren4\">(<span class=\"lisp-bg\">number reason</span>)</"
"span> ,ptr <span class=\"paren4\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:struct</span> person</span>)</span></span>)</span>\n"
"       <span class=\"paren3\">(<span class=\"lisp-bg\">make-lisp-person "
"<span class=\"keyword\">:number</span> number <span class=\"keyword\">:"
"reason</span> reason</span>)</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:2660
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defmethod</span></i> translate-into-foreign-memory <span class="
"\"paren2\">(<span class=\"lisp-bg\">value <span class=\"paren3\">(<span "
"class=\"lisp-bg\">type c-person</span>)</span> ptr</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-foreign-slots</span></i> <span class=\"paren3\">(<span class=\"lisp-"
"bg\"><span class=\"paren4\">(<span class=\"lisp-bg\">number reason</span>)</"
"span> ptr <span class=\"paren4\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:struct</span> person</span>)</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">setf number <span "
"class=\"paren4\">(<span class=\"lisp-bg\">lisp-person-number value</span>)</"
"span>\n"
"            reason <span class=\"paren4\">(<span class=\"lisp-bg\">lisp-"
"person-reason value</span>)</span></span>)</span></span>)</span></span>)</"
"span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:2667
msgid ""
"<p>At this point everything works, we can convert to and from our\n"
"<code>lisp-person</code> and foreign <code>person</code>. If we macroexpand\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">setf "
"<span class=\"paren2\">(<span class=\"lisp-bg\">mem-aref ptr '<span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:struct</span> "
"person</span>)</span></span>)</span> x</span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>На данный момент все работает, мы можем преобразовать В и ИЗ нашего\n"
"<code>lisp-person</code> и внешнего <code>person</code>. Если мы выполним "
"macroexpand\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">setf "
"<span class=\"paren2\">(<span class=\"lisp-bg\">mem-aref ptr '<span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:struct</span> "
"person</span>)</span></span>)</span> x</span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2676
msgid ""
"<p>we get something like:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">let</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\"><span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"keyword\">#:store879</span> x</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">translate-into-foreign-"
"memory <span class=\"keyword\">#:store879</span> #&lt;c-person person&gt;\n"
"                                   <span class=\"paren3\">(<span class="
"\"lisp-bg\">inc-pointer ptr 0</span>)</span></span>)</span>\n"
"    <span class=\"keyword\">#:store879</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>мы получим что-то вроде:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">let</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\"><span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"keyword\">#:store879</span> x</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">translate-into-foreign-"
"memory <span class=\"keyword\">#:store879</span> #&lt;c-person person&gt;\n"
"                                   <span class=\"paren3\">(<span class="
"\"lisp-bg\">inc-pointer ptr 0</span>)</span></span>)</span>\n"
"    <span class=\"keyword\">#:store879</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2686
msgid ""
"<p>Which is good, but now we can do better and get rid of that generic\n"
"function call to <code>translate-into-foreign-memory</code>.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defmethod</span></i> expand-into-foreign-memory "
"<span class=\"paren2\">(<span class=\"lisp-bg\">value <span class="
"\"paren3\">(<span class=\"lisp-bg\">type c-person</span>)</span> ptr</"
"span>)</span>\n"
"    `<span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-foreign-slots</span></i> <span class=\"paren3\">(<span class=\"lisp-"
"bg\"><span class=\"paren4\">(<span class=\"lisp-bg\">number reason</span>)</"
"span> ,ptr <span class=\"paren4\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:struct</span> person</span>)</span></span>)</span>\n"
"       <span class=\"paren3\">(<span class=\"lisp-bg\">setf number <span "
"class=\"paren4\">(<span class=\"lisp-bg\">lisp-person-number ,value</span>)</"
"span>\n"
"             reason <span class=\"paren4\">(<span class=\"lisp-bg\">lisp-"
"person-reason ,value</span>)</span></span>)</span></span>)</span></span>)</"
"span>\n"
"</pre></div>"
msgstr ""
"<p>Это хорошо, но теперь мы можем сделать лучше и избавиться от вызова\n"
"обобщенной функции <code>translate-into-foreign-memory</code>.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defmethod</span></i> expand-into-foreign-memory "
"<span class=\"paren2\">(<span class=\"lisp-bg\">value <span class="
"\"paren3\">(<span class=\"lisp-bg\">type c-person</span>)</span> ptr</"
"span>)</span>\n"
"    `<span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-foreign-slots</span></i> <span class=\"paren3\">(<span class=\"lisp-"
"bg\"><span class=\"paren4\">(<span class=\"lisp-bg\">number reason</span>)</"
"span> ,ptr <span class=\"paren4\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:struct</span> person</span>)</span></span>)</span>\n"
"       <span class=\"paren3\">(<span class=\"lisp-bg\">setf number <span "
"class=\"paren4\">(<span class=\"lisp-bg\">lisp-person-number ,value</span>)</"
"span>\n"
"             reason <span class=\"paren4\">(<span class=\"lisp-bg\">lisp-"
"person-reason ,value</span>)</span></span>)</span></span>)</span></span>)</"
"span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:2692
msgid ""
"<p>Now we can expand again so see the changes:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;; this:\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\">setf <span class="
"\"paren2\">(<span class=\"lisp-bg\">mem-aref ptr '<span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:struct</span> "
"person</span>)</span></span>)</span> x</span>)</span>"
msgstr ""
"<p>Теперь мы можем снова выполнить макрорасширение, чтобы увидеть "
"изменения:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;; this:\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\">setf <span class="
"\"paren2\">(<span class=\"lisp-bg\">mem-aref ptr '<span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:struct</span> "
"person</span>)</span></span>)</span> x</span>)</span>"

#: in/CFFI_User_Manual.htm:2700
msgid ""
"  <span class=\"comment\">;; expands to this\n"
"  </span><span class=\"comment\">;; (simplified, downcased, etc..)\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">let</span></i> <span class=\"paren2\">(<span class=\"lisp-bg"
"\"><span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">#:"
"store887</span> x</span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">with-foreign-slots</span></i> <span class=\"paren3\">(<span class=\"lisp-"
"bg\"><span class=\"paren4\">(<span class=\"lisp-bg\">number reason</span>)</"
"span> <span class=\"paren4\">(<span class=\"lisp-bg\">inc-pointer ptr 0</"
"span>)</span> <span class=\"paren4\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:struct</span> person</span>)</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\">setf number <span "
"class=\"paren4\">(<span class=\"lisp-bg\">lisp-person-number <span class="
"\"keyword\">#:store887</span></span>)</span>\n"
"            reason <span class=\"paren4\">(<span class=\"lisp-bg\">lisp-"
"person-reason <span class=\"keyword\">#:store887</span></span>)</span></"
"span>)</span></span>)</span> <span class=\"keyword\">#:store887</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:2705
msgid ""
"<p>And there we are, no generic function overhead.\n"
"</p>\n"
"<a name=\"Compatibility-note\"></a>\n"
"<h4 class=\"subheading\">Compatibility note</h4>"
msgstr ""
"<p>И вот здесь, мы уже невидим никаких накладных расходов на обобщенные "
"функции!\n"
"</p>\n"
"<a name=\"Compatibility-note\"></a>\n"
"<h4 class=\"subheading\">Замечания о совместимости</h4>"

#: in/CFFI_User_Manual.htm:2728
msgid ""
"<p>Previous versions of CFFI accepted the\n"
"âbareâ <var>structure-name</var> as a type specification, which was\n"
"interpreted as a pointer to the structure.  This is deprecated and\n"
"produces a style warning.  Using this deprecated form means that\n"
"<a href=\"#mem_002daref\">mem-aref</a> retains its prior meaning and returns "
"a pointer.  Using\n"
"the <code>(:struct <var>structure-name</var>)</code> form for the type,\n"
"<a href=\"#mem_002daref\">mem-aref</a> provides a Lisp object translated "
"from the\n"
"structure (by default a plist).  Thus the semantics are consistent with all\n"
"types in returning the object as represented in Lisp, and not a pointer,\n"
"with the exception of the âbareâ structure compatibility retained.\n"
"In order to obtain the pointer, you should use the function <a href="
"\"#mem_002daptr\">mem-aptr</a>.\n"
"</p>\n"
"<p>See <a href=\"#defcstruct\">defcstruct</a> for more details.\n"
"</p>\n"
"<hr>\n"
"<a name=\"Allocating-Foreign-Objects\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#convert_002dfrom_002dforeign\" accesskey=\"n\" rel=\"next"
"\">convert-from-foreign</a>, Previous: <a href=\"#Foreign-Structure-Types\" "
"accesskey=\"p\" rel=\"prev\">Foreign Structure Types</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Allocating-Foreign-Objects-1\"></a>\n"
"<h3 class=\"section\">6.7 Allocating Foreign Objects</h3>"
msgstr ""
"<p>Предыдущие версии CFFI принимали âголоеâ <var>structure-name</var> как\n"
"спецификацию типа, что интерпретировалось как указатель на структуру.\n"
"Теперь это устарело и выдается предупреждение о стиле. Использование этой\n"
"устаревшей формы означает, что <a href=\"#mem_002daref\">mem-aref</a> "
"сохраняет\n"
"свое прежнее значение и возвращает указатель.  Используя форму\n"
"<code>(:struct <var>structure-name</var>)</code> для типа,\n"
"<a href=\"#mem_002daref\">mem-aref</a> предоставляет объект Lisp "
"преобразованный\n"
"из структуры (по умолчанию plist).  Таким образом, семантика согласуется со "
"всеми\n"
"типами при возвращении объекта, представленного в Lisp, а не указателя,\n"
"за исключением сохранения совместимости с âголойâ структурой.\n"
"Чтобы получить указатель, вы должны использовать функцию <a href="
"\"#mem_002daptr\">mem-aptr</a>.\n"
"</p>\n"
"<p>См. <a href=\"#defcstruct\">defcstruct</a> для получения более подробной "
"информации.\n"
"</p>\n"
"<hr>\n"
"<a name=\"Allocating-Foreign-Objects\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#convert_002dfrom_002dforeign\" accesskey=\"n\" rel=\"next"
"\">convert-from-foreign</a>, Previous: <a href=\"#Foreign-Structure-Types\" "
"accesskey=\"p\" rel=\"prev\">Foreign Structure Types</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Allocating-Foreign-Objects-1\"></a>\n"
"<h3 class=\"section\">6.7 Размещение в памяти Внешних Объектов</h3>"

#: in/CFFI_User_Manual.htm:2732
msgid ""
"<p>See <a href=\"#Allocating-Foreign-Memory\">Allocating Foreign Memory</"
"a>.\n"
"</p>"
msgstr ""
"<p>См. <a href=\"#Allocating-Foreign-Memory\">Распределение Внешней Памяти</"
"a>.\n"
"</p>"

#: in/CFFI_User_Manual.htm:2748
msgid ""
"<hr>\n"
"<a name=\"convert_002dfrom_002dforeign\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#convert_002dto_002dforeign\" accesskey=\"n\" rel=\"next"
"\">convert-to-foreign</a>, Previous: <a href=\"#Allocating-Foreign-Objects\" "
"accesskey=\"p\" rel=\"prev\">Allocating Foreign Objects</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">convert-from-foreign</h4>\n"
"<a name=\"convert_002dfrom_002dforeign-1\"></a>\n"
"<h3 class=\"heading\">convert-from-foreign</h3>\n"
"<a name=\"Syntax\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-convert_002dfrom_002dforeign\"></a>Function: "
"<strong>convert-from-foreign</strong> <em>foreign-value type⇒ value</em></"
"dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2751
msgid ""
"<a name=\"Arguments-and-Values\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:2766
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>foreign-value</var></dt>\n"
"<dd><p>The primitive C value as returned from a primitive foreign function "
"or\n"
"from <code>convert-to-foreign</code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A <acronym>CFFI</acronym> type specifier.\n"
"</p>\n"
"</dd>\n"
"<dt><var>value</var></dt>\n"
"<dd><p>The Lisp value translated from <var>foreign-value</var>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2769
msgid ""
"<a name=\"Description\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:2784
msgid ""
"<p>This is an external interface to the type translation facility.  In\n"
"the implementation, all foreign functions are ultimately defined as\n"
"type translation wrappers around primitive foreign function\n"
"invocations.\n"
"</p>\n"
"<p>This function is available mostly for inspection of the type\n"
"translation process, and possibly optimization of special cases of\n"
"your foreign function calls.\n"
"</p>\n"
"<p>Its behavior is better described under <code>translate-from-foreign</"
"code>âs\n"
"documentation.\n"
"</p>\n"
"<a name=\"Examples\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<p>Это внешний интерфейс для функции преобразования типа.  В реализации\n"
"все внешние функции в конечном итоге определяются как обертки вокруг\n"
"примитивных вызовов внешних функций.\n"
"</p>\n"
"<p>Эта функция доступна в основном для проверки процесса преобразования "
"типа,\n"
"и возможно, для оптимизации специальных случаев вызовов ваших внешних "
"функций.\n"
"</p>\n"
"<p>Её поведение лучше описано в документации <code>translate-from-foreign</"
"code>.\n"
"</p>\n"
"<a name=\"Examples\"></a>\n"
"<h4 class=\"subheading\">Примеры</h4>"

#: in/CFFI_User_Manual.htm:2792
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI-USER&gt; <span class=\"paren1\">(<span class="
"\"lisp-bg\">convert-to-foreign <span class=\"string\">\"a boat\"</span> "
"<span class=\"keyword\">:string</span></span>)</span>\n"
" ⇒ #&lt;FOREIGN-ADDRESS #x097ACDC0&gt;\n"
" ⇒ T\n"
"  CFFI-USER&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">convert-from-"
"foreign * <span class=\"keyword\">:string</span></span>)</span>\n"
" ⇒ \"a boat\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:2799
msgid ""
"<a name=\"See-Also\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#convert_002dto_002dforeign\">convert-to-foreign</a> <br>\n"
"<a href=\"#free_002dconverted_002dobject\">free-converted-object</a> <br>\n"
"<a href=\"#translate_002dfrom_002dforeign\">translate-from-foreign</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:2815
msgid ""
"<hr>\n"
"<a name=\"convert_002dto_002dforeign\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#defbitfield\" accesskey=\"n\" rel=\"next\">defbitfield</a>, "
"Previous: <a href=\"#convert_002dfrom_002dforeign\" accesskey=\"p\" rel="
"\"prev\">convert-from-foreign</a>, Up: <a href=\"#Foreign-Types\" accesskey="
"\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title="
"\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">convert-to-foreign</h4>\n"
"<a name=\"convert_002dto_002dforeign-1\"></a>\n"
"<h3 class=\"heading\">convert-to-foreign</h3>\n"
"<a name=\"Syntax-1\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-convert_002dto_002dforeign\"></a>Function: "
"<strong>convert-to-foreign</strong> <em>value type⇒ foreign-value, alloc-"
"params</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2818
msgid ""
"<a name=\"Arguments-and-Values-1\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:2839
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>value</var></dt>\n"
"<dd><p>The Lisp object to be translated to a foreign object.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A <acronym>CFFI</acronym> type specifier.\n"
"</p>\n"
"</dd>\n"
"<dt><var>foreign-value</var></dt>\n"
"<dd><p>The primitive C value, ready to be passed to a primitive foreign\n"
"function.\n"
"</p>\n"
"</dd>\n"
"<dt><var>alloc-params</var></dt>\n"
"<dd><p>Something of a translation state; you must pass it to\n"
"<code>free-converted-object</code> along with the foreign value for that to\n"
"work.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2842
msgid ""
"<a name=\"Description-1\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:2857
msgid ""
"<p>This is an external interface to the type translation facility.  In\n"
"the implementation, all foreign functions are ultimately defined as\n"
"type translation wrappers around primitive foreign function\n"
"invocations.\n"
"</p>\n"
"<p>This function is available mostly for inspection of the type\n"
"translation process, and possibly optimization of special cases of\n"
"your foreign function calls.\n"
"</p>\n"
"<p>Its behavior is better described under <code>translate-to-foreign</"
"code>âs\n"
"documentation.\n"
"</p>\n"
"<a name=\"Examples-1\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<p>Это внешний интерфейс для функциональности преобразования типа.  В "
"реализации,\n"
"все внешние функции в конечном итоге определяются как обертки преобразования "
"типа \n"
"вокруг примитивных вызов внешних функций.\n"
"</p>\n"
"<p>Эта функция доступна в основном для проверки процесса преобразования типа "
"и, возможно,\n"
"для оптимизации особых случаев вызовов ваших внешних функций.\n"
"</p>\n"
"<p>Ее поведение лучше описано в документации по <code>translate-to-foreign</"
"code>.\n"
"</p>\n"
"<a name=\"Examples-1\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:2868
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI-USER&gt; <span class=\"paren1\">(<span class="
"\"lisp-bg\">convert-to-foreign t <span class=\"keyword\">:boolean</span></"
"span>)</span>\n"
" ⇒ 1\n"
" ⇒ NIL\n"
"  CFFI-USER&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">convert-to-"
"foreign <span class=\"string\">\"hello, world\"</span> <span class=\"keyword"
"\">:string</span></span>)</span>\n"
" ⇒ #&lt;FOREIGN-ADDRESS #x097C5F80&gt;\n"
" ⇒ T\n"
"  CFFI-USER&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">code-char "
"<span class=\"paren2\">(<span class=\"lisp-bg\">mem-aref * <span class="
"\"keyword\">:char</span> 5</span>)</span></span>)</span>\n"
" ⇒ #\\,\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:2875
msgid ""
"<a name=\"See-Also-1\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#convert_002dfrom_002dforeign\">convert-from-foreign</a> <br>\n"
"<a href=\"#free_002dconverted_002dobject\">free-converted-object</a> <br>\n"
"<a href=\"#translate_002dto_002dforeign\">translate-to-foreign</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:2891
msgid ""
"<hr>\n"
"<a name=\"defbitfield\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#defcstruct\" accesskey=\"n\" rel=\"next\">defcstruct</a>, "
"Previous: <a href=\"#convert_002dto_002dforeign\" accesskey=\"p\" rel=\"prev"
"\">convert-to-foreign</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" "
"rel=\"up\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table "
"of contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index"
"\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">defbitfield</h4>\n"
"<a name=\"defbitfield-1\"></a>\n"
"<h3 class=\"heading\">defbitfield</h3>\n"
"<a name=\"Syntax-2\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-defbitfield\"></a>Macro: <strong>defbitfield</strong> "
"<em>name-and-options &amp;body masks</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2897
msgid ""
"<p>masks ::= [docstring] { (symbol value) }* <br>\n"
"name-and-options ::= name | (name &amp;optional (base-type :int))\n"
"</p>\n"
"<a name=\"Arguments-and-Values-2\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:2919
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>name</var></dt>\n"
"<dd><p>The name of the new bitfield type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>docstring</var></dt>\n"
"<dd><p>A documentation string, ignored.\n"
"</p>\n"
"</dd>\n"
"<dt><var>base-type</var></dt>\n"
"<dd><p>A symbol denoting a foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>symbol</var></dt>\n"
"<dd><p>A Lisp symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>value</var></dt>\n"
"<dd><p>An integer representing a bitmask.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2951
msgid ""
"<a name=\"Description-2\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>defbitfield</code> macro is used to define foreign types that "
"map\n"
"lists of symbols to integer values.\n"
"</p>\n"
"<p>If <var>value</var> is omitted, it will be computed as follows: find the\n"
"greatest <var>value</var> previously used, including those so computed,\n"
"with only a single 1-bit in its binary representation (that is, powers\n"
"of two), and left-shift it by one.  This rule guarantees that a\n"
"computed <var>value</var> cannot clash with previous values, but may clash\n"
"with future explicitly specified values.\n"
"</p>\n"
"<p>Symbol lists will be automatically converted to values and vice versa\n"
"when being passed as arguments to or returned from foreign functions,\n"
"respectively. The same applies to any other situations where an object\n"
"of a bitfield type is expected.\n"
"</p>\n"
"<p>Types defined with <code>defbitfield</code> canonicalize to <var>base-"
"type</var>\n"
"which is <code>:int</code> by default.\n"
"</p>\n"
"<a name=\"Examples-2\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defbitfield</span></i> open-flags\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"rdonly</span> #x0000</span>)</span>\n"
"    <span class=\"keyword\">:wronly</span>               <span class="
"\"comment\">;#x0001\n"
"  </span>  <span class=\"keyword\">:rdwr</span>                 <span class="
"\"comment\">;&amp;hellip;\n"
"  </span>  <span class=\"keyword\">:nonblock</span>\n"
"    <span class=\"keyword\">:append</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"creat</span>  #x0200</span>)</span></span>)</span>\n"
"    ;; etc&amp;hellip;"
msgstr ""
"<a name=\"Description-2\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>defbitfield</code> используется для определения внешних "
"типов,\n"
"которые отображают списки символов в целочисленные значения.\n"
"</p>\n"
"<p>Если значение <var>value</var> опущено, оно будет вычислено следующим "
"образом: \n"
"ищется наибольшее ранее использованное значение <var>value</var>, включая "
"и \n"
"вычисленные, только с одним 1-bit в его двоичном представлении (это степень\n"
"двойки), и сдвигается влево на одну позицию(в бинарном представлении).  Это "
"правило\n"
"гарантирует, что вычисленное значение не может конфликтовать с предыдущими "
"значениями,\n"
"но может конфликтовать с будущими явно указанными значениями.\n"
"</p>\n"
"<p>Списки символов будут автоматически преобразованы в значения и наоборот,\n"
"если они передаются в качестве аргументов или возвращаются из внешних "
"функций,\n"
"соответственно. Тоже относится и к любым ситуациям, когда ожидается объект "
"типа битового\n"
"поля(bitfield).\n"
"</p>\n"
"<p>Типы, определенные с помощью <code>defbitfield</code> канонизируются с "
"<var>base-type</var>,\n"
"который по умолчанию является <code>:int</code>.\n"
"</p>\n"
"<a name=\"Examples-2\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defbitfield</span></i> open-flags\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"rdonly</span> #x0000</span>)</span>\n"
"    <span class=\"keyword\">:wronly</span>               <span class="
"\"comment\">;#x0001\n"
"  </span>  <span class=\"keyword\">:rdwr</span>                 <span class="
"\"comment\">;&amp;hellip;\n"
"  </span>  <span class=\"keyword\">:nonblock</span>\n"
"    <span class=\"keyword\">:append</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"creat</span>  #x0200</span>)</span></span>)</span>\n"
"    ;; etc&amp;hellip;"

#: in/CFFI_User_Manual.htm:2954
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-bitfield-"
"symbols 'open-flags #b1101</span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"WRONLY</span> <span class=\"keyword\">:NONBLOCK</span> <span class=\"keyword"
"\">:APPEND</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:2957
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-bitfield-"
"value 'open-flags '<span class=\"paren2\">(<span class=\"lisp-bg\"><span "
"class=\"keyword\">:rdwr</span> <span class=\"keyword\">:creat</span></"
"span>)</span></span>)</span>\n"
" ⇒ 514   ; #x0202"
msgstr ""

#: in/CFFI_User_Manual.htm:2962
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defcfun</span></i> <span class=\"paren2\">(<span class=\"lisp-bg\"><span "
"class=\"string\">\"open\"</span> unix-open</span>)</span> <span class="
"\"keyword\">:int</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">path <span class="
"\"keyword\">:string</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flags open-flags</"
"span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">mode <span class="
"\"keyword\">:uint16</span></span>)</span></span>)</span> ; unportable"
msgstr ""

#: in/CFFI_User_Manual.htm:2965
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">unix-open <span "
"class=\"string\">\"/tmp/foo\"</span> '<span class=\"paren2\">(<span class="
"\"lisp-bg\"><span class=\"keyword\">:wronly</span> <span class=\"keyword\">:"
"creat</span></span>)</span> #o644</span>)</span>\n"
" ⇒ #&lt;an fd&gt;"
msgstr ""

#: in/CFFI_User_Manual.htm:2970
msgid ""
"  <span class=\"comment\">;;; Consider also the following lispier wrapper "
"around open()\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defun</span></i> lispier-open <span class=\"paren2\">(<span class="
"\"lisp-bg\">path mode &amp;rest flags</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">unix-open path flags "
"mode</span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:2976
msgid ""
"<a name=\"See-Also-2\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dbitfield_002dvalue\">foreign-bitfield-value</a> "
"<br>\n"
"<a href=\"#foreign_002dbitfield_002dsymbols\">foreign-bitfield-symbols</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:2992
msgid ""
"<hr>\n"
"<a name=\"defcstruct\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#defcunion\" accesskey=\"n\" rel=\"next\">defcunion</a>, "
"Previous: <a href=\"#defbitfield\" accesskey=\"p\" rel=\"prev\">defbitfield</"
"a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</"
"a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel="
"\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" "
"rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">defcstruct</h4>\n"
"<a name=\"defcstruct-1\"></a>\n"
"<h3 class=\"heading\">defcstruct</h3>\n"
"<a name=\"Syntax-3\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-defcstruct\"></a>Macro: <strong>defcstruct</strong> "
"<em>name-and-options &amp;body doc-and-slots⇒ name</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:2999
msgid ""
"<p>name-and-options ::= structure-name | (structure-name &amp;key size)\n"
"</p>\n"
"<p>doc-and-slots ::= [docstring] { (slot-name slot-type &amp;key count "
"offset) }*\n"
"</p>\n"
"<a name=\"Arguments-and-Values-3\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3033
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>structure-name</var></dt>\n"
"<dd><p>The name of new structure type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>docstring</var></dt>\n"
"<dd><p>A documentation string, ignored.\n"
"</p>\n"
"</dd>\n"
"<dt><var>slot-name</var></dt>\n"
"<dd><p>A symbol naming the slot.  It must be unique among slot names in "
"this\n"
"structure.\n"
"</p>\n"
"</dd>\n"
"<dt><var>size</var></dt>\n"
"<dd><p>Use this option to override the size (in bytes) of the struct.\n"
"</p>\n"
"</dd>\n"
"<dt><var>slot-type</var></dt>\n"
"<dd><p>The type specifier for the slot.\n"
"</p>\n"
"</dd>\n"
"<dt><var>count</var></dt>\n"
"<dd><p>Used to declare an array of size <var>count</var> inside the\n"
"structure.  Defaults to <code>1</code> as such an array and a single "
"element\n"
"are semantically equivalent.\n"
"</p>\n"
"</dd>\n"
"<dt><var>offset</var></dt>\n"
"<dd><p>Overrides the slotâs offset. The next slotâs offset is calculated\n"
"based on this one.\n"
"</p></dd>\n"
"</dl>"
msgstr ""
"<dl compact=\"compact\">\n"
"<dt><var>structure-name</var></dt>\n"
"<dd><p>Имя нового структурного типа.\n"
"</p>\n"
"</dd>\n"
"<dt><var>docstring</var></dt>\n"
"<dd><p>Строка документации, игнорируется.\n"
"</p>\n"
"</dd>\n"
"<dt><var>slot-name</var></dt>\n"
"<dd><p>Символ обозначающий имя слота.  Он должен быть уникальным среди имен "
"слотов\n"
"в данной структуре.\n"
"</p>\n"
"</dd>\n"
"<dt><var>size</var></dt>\n"
"<dd><p>Использование этой опции переопределяет размер(в байтах) структуры.\n"
"</p>\n"
"</dd>\n"
"<dt><var>slot-type</var></dt>\n"
"<dd><p>Указывает тип слота.\n"
"</p>\n"
"</dd>\n"
"<dt><var>count</var></dt>\n"
"<dd><p>Используется для объявления массивов размером <var>count</var> внутри "
"структуры.  \n"
"По умолчанию равен <code>1</code> как массив из одного элемента, "
"семантически\n"
"эквивалентен единичному элементу.\n"
"</p>\n"
"</dd>\n"
"<dt><var>offset</var></dt>\n"
"<dd><p>Переопределяет смещение слота. Смещение следующего слота вычисляется\n"
"опираясь на этот параметр.\n"
"</p></dd>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:3063
msgid ""
"<a name=\"Description-3\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>This defines a new <acronym>CFFI</acronym> aggregate type akin to C "
"<code>struct</code>s.\n"
"In other words, it specifies that foreign objects of the type\n"
"<var>structure-name</var> are groups of different pieces of data, or\n"
"âslotsâ, of the <var>slot-type</var>s, distinguished from each other by\n"
"the <var>slot-name</var>s.  Each structure is located in memory at a\n"
"position, and the slots are allocated sequentially beginning at that\n"
"point in memory (with some padding allowances as defined by the C\n"
"<acronym>ABI</acronym>, unless otherwise requested by specifying an\n"
"<var>offset</var> from the beginning of the structure (offset 0).\n"
"</p>\n"
"<p>In other words, it is isomorphic to the C <code>struct</code>, giving\n"
"several extra features.\n"
"</p>\n"
"<p>There are two kinds of slots, for the two kinds of <acronym>CFFI</"
"acronym> types:\n"
"</p>\n"
"<dl compact=\"compact\">\n"
"<dt><em>Simple</em></dt>\n"
"<dd><p>Contain a single instance of a type that canonicalizes to a built-in\n"
"type, such as <code>:long</code> or <code>:pointer</code>.  Used for simple\n"
"<acronym>CFFI</acronym> types.\n"
"</p>\n"
"</dd>\n"
"<dt><em>Aggregate</em></dt>\n"
"<dd><p>Contain an embedded structure or union, or an array of objects.  "
"Used\n"
"for aggregate <acronym>CFFI</acronym> types.\n"
"</p></dd>\n"
"</dl>"
msgstr ""
"<a name=\"Description-3\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Здесь определяется новый агрегатный(составной) тип <acronym>CFFI</"
"acronym>,\n"
"сродни структурам(<code>struct</code>) Си.\n"
"Другими словами, он указывает, что внешние объекты типа <var>structure-name</"
"var> \n"
"являются группой из разных частей данных, или âслотов(slots)â, имеющих тип\n"
" <var>slot-type</var>s, отличающихся друг от друга именами\n"
"<var>slot-name</var>.  Каждая структура располагается в памяти в "
"определенном месте,\n"
"и слоты распределяются последовательно, начиная с позиции выделения памяти \n"
"(с некоторыми допускаемыми заполнениями, как определено в Си <acronym>ABI</"
"acronym>, \n"
"если иное не определяется путем указания смещения(<var>offset</var> от "
"начал\n"
"структуры (offset 0).\n"
"</p>\n"
"<p>Другими словами, он изоморфен структуре(<code>struct</code>) в Си, что "
"дает\n"
"несколько дополнительных возможностей.\n"
"</p>\n"
"<p>Существует два вида слотов, для двух видов типов <acronym>CFFI</"
"acronym>:\n"
"</p>\n"
"<dl compact=\"compact\">\n"
"<dt><em>Простой</em></dt>\n"
"<dd><p>Содержит один экземпляр типа, который канонизируется встроенным "
"типом, \n"
"таким как <code>:long</code> или <code>:pointer</code>.  Используется для\n"
"простых типов  <acronym>CFFI</acronym>.\n"
"</p>\n"
"</dd>\n"
"<dt><em>Сложный</em></dt>\n"
"<dd><p>Содержит встроенную структуру или объединение, или массив объектов. "
"Используется для\n"
"агрегатных типов <acronym>CFFI</acronym>.\n"
"</p></dd>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:3075
msgid ""
"<p>The use of <acronym>CLOS</acronym> terminology for the structure-related\n"
"features is intentional; structure definitions are very much like\n"
"classes with (far) fewer features.\n"
"</p>\n"
"<a name=\"Examples-3\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> point\n"
"    <span class=\"string\">\"Point structure.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">x <span class=\"keyword"
"\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">y <span class=\"keyword"
"\">:int</span></span>)</span></span>)</span>"
msgstr ""
"<p>Использование терминологии <acronym>CLOS</acronym> для функций, связанных "
"со\n"
"структурой, является преднамеренным; определения структуры очень похожи на "
"классы\n"
"с гораздо меньшим количеством возможностей.\n"
"</p>\n"
"<a name=\"Examples-3\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> point\n"
"    <span class=\"string\">\"Point structure.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">x <span class=\"keyword"
"\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">y <span class=\"keyword"
"\">:int</span></span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:3085
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-object</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\">ptr 'point</span>)</span>\n"
"          <span class=\"comment\">;; Initialize the slots\n"
"  </span>        <span class=\"paren2\">(<span class=\"lisp-bg\">setf <span "
"class=\"paren3\">(<span class=\"lisp-bg\">foreign-slot-value ptr 'point 'x</"
"span>)</span> 42\n"
"                <span class=\"paren3\">(<span class=\"lisp-bg\">foreign-slot-"
"value ptr 'point 'y</span>)</span> 42</span>)</span>\n"
"          <span class=\"comment\">;; Return a list with the coordinates\n"
"  </span>        <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">with-foreign-slots</span></i> <span class=\"paren3\">(<span "
"class=\"lisp-bg\"><span class=\"paren4\">(<span class=\"lisp-bg\">x y</"
"span>)</span> ptr point</span>)</span>\n"
"            <span class=\"paren3\">(<span class=\"lisp-bg\">list x y</"
"span>)</span></span>)</span></span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\">42 42</span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3099
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;; Using the :size and :offset "
"options to define a partial structure.\n"
"  </span><span class=\"comment\">;; (this is useful when you are interested "
"in only a few slots\n"
"  </span><span class=\"comment\">;; of a big foreign structure)\n"
"  </span> \n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defcstruct</span></i> <span class=\"paren2\">(<span class=\"lisp-bg\">foo "
"<span class=\"keyword\">:size</span> 32</span>)</span>\n"
"    <span class=\"string\">\"Some struct with 32 bytes.\"</span>\n"
"                          <span class=\"comment\">; &lt;16 bytes we don't "
"care about&gt;\n"
"  </span>  <span class=\"paren2\">(<span class=\"lisp-bg\">x <span class="
"\"keyword\">:int</span> <span class=\"keyword\">:offset</span> 16</span>)</"
"span>   <span class=\"comment\">; an int at offset 16\n"
"  </span>  <span class=\"paren2\">(<span class=\"lisp-bg\">y <span class="
"\"keyword\">:int</span></span>)</span>              <span class=\"comment"
"\">; another int at offset 16+sizeof(int)\n"
"  </span>                        <span class=\"comment\">; &lt;a couple more "
"bytes we don't care about&gt;\n"
"  </span>  <span class=\"paren2\">(<span class=\"lisp-bg\">z <span class="
"\"keyword\">:char</span> <span class=\"keyword\">:offset</span> 24</span>)</"
"span></span>)</span> ; a char at offset 24\n"
"                          ; &lt;7 more bytes ignored <span class="
"\"paren1\">(<span class=\"lisp-bg\">since size is 32</span>)</span>&gt;"
msgstr ""

#: in/CFFI_User_Manual.htm:3103
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-type-size "
"'foo</span>)</span>\n"
" ⇒ 32\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3109
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Using :count to define "
"arrays inside of a struct.\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defcstruct</span></i> video_tuner\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">name <span class="
"\"keyword\">:char</span> <span class=\"keyword\">:count</span> 32</span>)</"
"span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3116
msgid ""
"<a name=\"See-Also-3\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dslot_002dpointer\">foreign-slot-pointer</a> <br>\n"
"<a href=\"#foreign_002dslot_002dvalue\">foreign-slot-value</a> <br>\n"
"<a href=\"#with_002dforeign_002dslots\">with-foreign-slots</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3132
msgid ""
"<hr>\n"
"<a name=\"defcunion\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#defctype\" accesskey=\"n\" rel=\"next\">defctype</a>, "
"Previous: <a href=\"#defcstruct\" accesskey=\"p\" rel=\"prev\">defcstruct</"
"a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</"
"a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel="
"\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" "
"rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">defcunion</h4>\n"
"<a name=\"defcunion-1\"></a>\n"
"<h3 class=\"heading\">defcunion</h3>\n"
"<a name=\"Syntax-4\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-defcunion\"></a>Macro: <strong>defcunion</strong> "
"<em>name &amp;body doc-and-slots⇒ name</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3137
msgid ""
"<p>doc-and-slots ::= [docstring] { (slot-name slot-type &amp;key count) }*\n"
"</p>\n"
"<a name=\"Arguments-and-Values-4\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3160
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>name</var></dt>\n"
"<dd><p>The name of new union type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>docstring</var></dt>\n"
"<dd><p>A documentation string, ignored.\n"
"</p>\n"
"</dd>\n"
"<dt><var>slot-name</var></dt>\n"
"<dd><p>A symbol naming the slot.\n"
"</p>\n"
"</dd>\n"
"<dt><var>slot-type</var></dt>\n"
"<dd><p>The type specifier for the slot.\n"
"</p>\n"
"</dd>\n"
"<dt><var>count</var></dt>\n"
"<dd><p>Used to declare an array of size <var>count</var> inside the\n"
"structure.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3174
msgid ""
"<a name=\"Description-4\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>A union is a structure in which all slots have an offset of zero.  It\n"
"is isomorphic to the C <code>union</code>.  Therefore, you should use the\n"
"usual foreign structure operations for accessing a unionâs slots.\n"
"</p>\n"
"<a name=\"Examples-4\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcunion</span></i> uint32-bytes\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">int-value <span class="
"\"keyword\">:unsigned-int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">bytes <span class="
"\"keyword\">:unsigned-char</span> <span class=\"keyword\">:count</span> 4</"
"span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<a name=\"Description-4\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Объединение это структура, в которой все слоты имеют нулевое смещение.\n"
"Оно изоморфно объединению(<code>union</code>) в Си.  Поэтому вы должны\n"
"использовать обычные операции над внешними структурами для доступа к слотам\n"
"объединения.\n"
"</p>\n"
"<a name=\"Examples-4\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcunion</span></i> uint32-bytes\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">int-value <span class="
"\"keyword\">:unsigned-int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">bytes <span class="
"\"keyword\">:unsigned-char</span> <span class=\"keyword\">:count</span> 4</"
"span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:3180
msgid ""
"<a name=\"See-Also-4\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dslot_002dpointer\">foreign-slot-pointer</a> <br>\n"
"<a href=\"#foreign_002dslot_002dvalue\">foreign-slot-value</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3196
msgid ""
"<hr>\n"
"<a name=\"defctype\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#defcenum\" accesskey=\"n\" rel=\"next\">defcenum</a>, "
"Previous: <a href=\"#defcunion\" accesskey=\"p\" rel=\"prev\">defcunion</a>, "
"Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> "
"&nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">defctype</h4>\n"
"<a name=\"defctype-1\"></a>\n"
"<h3 class=\"heading\">defctype</h3>\n"
"<a name=\"Syntax-5\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-defctype\"></a>Macro: <strong>defctype</strong> <em>name "
"base-type &amp;optional documentation</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3199
msgid ""
"<a name=\"Arguments-and-Values-5\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3213
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>name</var></dt>\n"
"<dd><p>The name of the new foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>base-type</var></dt>\n"
"<dd><p>A symbol or a list defining the new type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>documentation</var></dt>\n"
"<dd><p>A documentation string, currently ignored.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3227
msgid ""
"<a name=\"Description-5\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>defctype</code> macro provides a mechanism similar to Câs\n"
"<code>typedef</code> to define new types. The new type inherits\n"
"<var>base-type</var>âs translators, if any. There is no way to define\n"
"translations for types defined with <code>defctype</code>.  For that,\n"
"you should use <a href=\"#define_002dforeign_002dtype\">define-foreign-type</"
"a>.\n"
"</p>\n"
"<a name=\"Examples-5\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defctype</span></i> my-string <span class="
"\"keyword\">:string</span>\n"
"    <span class=\"string\">\"My own string type.\"</span></span>)</span>"
msgstr ""
"<a name=\"Description-5\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>defctype</code> предоставляет механизм, аналогичный\n"
"<code>typedef</code> в Си, для определения новых типов. новый тип\n"
"наследует преобразователи базового типа(<var>base-type</var>),\n"
"если они есть. Невозможно определить преобразователи для типов,\n"
"определенных с помощью <code>defctype</code>.  Для этого вы должны\n"
"использовать <a href=\"#define_002dforeign_002dtype\">define-foreign-type</"
"a>.\n"
"</p>\n"
"<a name=\"Examples-5\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defctype</span></i> my-string <span class="
"\"keyword\">:string</span>\n"
"    <span class=\"string\">\"My own string type.\"</span></span>)</span>"

#: in/CFFI_User_Manual.htm:3231
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defctype</span></i> long-bools <span class=\"paren2\">(<span class=\"lisp-"
"bg\"><span class=\"keyword\">:boolean</span> <span class=\"keyword\">:long</"
"span></span>)</span>\n"
"    <span class=\"string\">\"Booleans that map to C longs.\"</span></span>)</"
"span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3236
msgid ""
"<a name=\"See-Also-5\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#define_002dforeign_002dtype\">define-foreign-type</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3252
msgid ""
"<hr>\n"
"<a name=\"defcenum\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#define_002dforeign_002dtype\" accesskey=\"n\" rel=\"next"
"\">define-foreign-type</a>, Previous: <a href=\"#defctype\" accesskey=\"p\" "
"rel=\"prev\">defctype</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" "
"rel=\"up\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table "
"of contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index"
"\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">defcenum</h4>\n"
"<a name=\"defcenum-1\"></a>\n"
"<h3 class=\"heading\">defcenum</h3>\n"
"<a name=\"Syntax-6\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-defcenum\"></a>Macro: <strong>defcenum</strong> <em>name-"
"and-options &amp;body enum-list</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3258
msgid ""
"<p>enum-list ::= [docstring] { keyword | (keyword value) }*\n"
"name-and-options ::= name | (name &amp;optional (base-type :int))\n"
"</p>\n"
"<a name=\"Arguments-and-Values-6\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3280
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>name</var></dt>\n"
"<dd><p>The name of the new enum type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>docstring</var></dt>\n"
"<dd><p>A documentation string, ignored.\n"
"</p>\n"
"</dd>\n"
"<dt><var>base-type</var></dt>\n"
"<dd><p>A symbol denoting a foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>keyword</var></dt>\n"
"<dd><p>A keyword symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>value</var></dt>\n"
"<dd><p>An index value for a keyword.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3304
msgid ""
"<a name=\"Description-6\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>defcenum</code> macro is used to define foreign types that map\n"
"keyword symbols to integer values, similar to the C <code>enum</code> type.\n"
"</p>\n"
"<p>If <var>value</var> is omitted its value will either be 0, if itâs the\n"
"first entry, or it it will continue the progression from the last\n"
"specified value.\n"
"</p>\n"
"<p>Keywords will be automatically converted to values and vice-versa when\n"
"being passed as arguments to or returned from foreign functions,\n"
"respectively. The same applies to any other situations where an object\n"
"of an <code>enum</code> type is expected.\n"
"</p>\n"
"<p>Types defined with <code>defcenum</code> canonicalize to <var>base-type</"
"var>\n"
"which is <code>:int</code> by default.\n"
"</p>\n"
"<a name=\"Examples-6\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcenum</span></i> boolean\n"
"    <span class=\"keyword\">:no</span>\n"
"    <span class=\"keyword\">:yes</span></span>)</span>"
msgstr ""
"<a name=\"Description-6\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>defcenum</code> используется для определения внешних типов,\n"
"которые отображают символы ключевые слова на целочисленные значения,\n"
"аналогично типу <code>enum</code> в Си.\n"
"</p>\n"
"<p>Если значение(<var>value</var>) опущено, его значение будет равно 0, "
"если\n"
"это первая запись, или оно будет продолжать програссию от последнего\n"
"указанного значения.\n"
"</p>\n"
"<p>Ключевые слова будут автоматически преобразовываться в значения и "
"наоборот\n"
"при передаче в качестве аргументов или возвращаемых значений из\n"
"внешних функций, соответственно. То же относится к любым другим ситуациям,\n"
"когда ожидается объект типа <code>enum</code>.\n"
"</p>\n"
"<p>Типы определенные с помощью <code>defcenum</code> канонизируются с \n"
"базовым типом(<var>base-type</var>), который по умолчанию является\n"
" <code>:int</code>.\n"
"</p>\n"
"<a name=\"Examples-6\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcenum</span></i> boolean\n"
"    <span class=\"keyword\">:no</span>\n"
"    <span class=\"keyword\">:yes</span></span>)</span>"

#: in/CFFI_User_Manual.htm:3308
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-enum-"
"value 'boolean <span class=\"keyword\">:no</span></span>)</span>\n"
" ⇒ 0\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3314
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcenum</span></i> numbers\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"one</span> 1</span>)</span>\n"
"    <span class=\"keyword\">:two</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"four</span> 4</span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:3318
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-enum-"
"keyword 'numbers 2</span>)</span>\n"
" ⇒ :TWO\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3324
msgid ""
"<a name=\"See-Also-6\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002denum_002dvalue\">foreign-enum-value</a> <br>\n"
"<a href=\"#foreign_002denum_002dkeyword\">foreign-enum-keyword</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3340
msgid ""
"<hr>\n"
"<a name=\"define_002dforeign_002dtype\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#define_002dparse_002dmethod\" accesskey=\"n\" rel=\"next"
"\">define-parse-method</a>, Previous: <a href=\"#defcenum\" accesskey=\"p\" "
"rel=\"prev\">defcenum</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" "
"rel=\"up\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table "
"of contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index"
"\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">define-foreign-type</h4>\n"
"<a name=\"define_002dforeign_002dtype-1\"></a>\n"
"<h3 class=\"heading\">define-foreign-type</h3>\n"
"<a name=\"Syntax-7\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-define_002dforeign_002dtype\"></a>Macro: <strong>define-"
"foreign-type</strong> <em>class-name supers slots &amp;rest options⇒ class-"
"name</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3345
msgid ""
"<p>options ::= (<code>:actual-type</code> <var>type</var>) | &nbsp;    "
"(<code>:simple-parser</code> <var>symbol</var>) | &nbsp;    <em>regular "
"defclass option</em>\n"
"</p>\n"
"<a name=\"Arguments-and-Values-7\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3359
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>class-name</var></dt>\n"
"<dd><p>A symbol naming the new foreign type class.\n"
"</p>\n"
"</dd>\n"
"<dt><var>supers</var></dt>\n"
"<dd><p>A list of symbols naming the super classes.\n"
"</p>\n"
"</dd>\n"
"<dt><var>slots</var></dt>\n"
"<dd><p>A list of slot definitions, passed to <code>defclass</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3362
msgid ""
"<a name=\"Description-7\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3371
msgid ""
"<p>The macro <code>define-foreign-type</code> defines a new class\n"
"<var>class-name</var>. It is a thin wrapper around <code>defclass</code>. "
"Among\n"
"other things, it ensures that <var>class-name</var> becomes a subclass of\n"
"<var>foreign-type</var>, what you need to know about that is that thereâs\n"
"an initarg <code>:actual-type</code> which serves the same purpose as\n"
"<code>defctype</code>âs <var>base-type</var> argument.\n"
"</p>"
msgstr ""
"<p>Макрос <code>define-foreign-type</code> определяет новый класс\n"
"<var>class-name</var>. Это тонкая обертка округ <code>defclass</code>. "
"Помимо\n"
"прочего, он гарантирует, что  <var>class-name</var> становиться подклассом\n"
"<var>foreign-type</var>. О чем вам необходимо знать, так это о том, что "
"есть\n"
"инициализирующий аргумент(initarg) <code>:actual-type</code>, который "
"служит\n"
"той же цели, что и аргумент  <var>base-type</var> в <code>defctype</code>.\n"
"</p>"

#: in/CFFI_User_Manual.htm:3386
msgid ""
"<a name=\"Examples-7\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<p>Taken from <acronym>CFFI</acronym>âs <code>:boolean</code> type "
"definition:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-foreign-type</span></i> <span class="
"\"keyword\">:boolean</span> <span class=\"paren2\">(<span class=\"lisp-bg"
"\">&amp;optional <span class=\"paren3\">(<span class=\"lisp-bg\">base-type "
"<span class=\"keyword\">:int</span></span>)</span></span>)</span>\n"
"    <span class=\"string\">\"Boolean type. Maps to an :int by default. Only "
"accepts integer types.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">ecase base-type\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class="
"\"paren4\">(<span class=\"lisp-bg\"><span class=\"keyword\">:char</span>\n"
"        <span class=\"keyword\">:unsigned-char</span>\n"
"        <span class=\"keyword\">:int</span>\n"
"        <span class=\"keyword\">:unsigned-int</span>\n"
"        <span class=\"keyword\">:long</span>\n"
"        <span class=\"keyword\">:unsigned-long</span></span>)</span> base-"
"type</span>)</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:3395
msgctxt "in/CFFI_User_Manual.htm:3395"
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">canonicalize-"
"foreign-type <span class=\"keyword\">:boolean</span></span>)</span>\n"
" ⇒ :INT\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">canonicalize-"
"foreign-type '<span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:boolean</span> <span class=\"keyword\">:long</span></span>)</"
"span></span>)</span>\n"
" ⇒ :LONG\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">canonicalize-"
"foreign-type '<span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:boolean</span> <span class=\"keyword\">:float</span></span>)</"
"span></span>)</span>\n"
"  <span class=\"comment\">;; error&amp;rarr; signalled by ECASE.\n"
"  </span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3401
msgid ""
"<a name=\"See-Also-7\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defctype\">defctype</a> <br>\n"
"<a href=\"#define_002dparse_002dmethod\">define-parse-method</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3417
msgid ""
"<hr>\n"
"<a name=\"define_002dparse_002dmethod\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dbitfield_002dsymbols\" accesskey=\"n\" rel="
"\"next\">foreign-bitfield-symbols</a>, Previous: <a href="
"\"#define_002dforeign_002dtype\" accesskey=\"p\" rel=\"prev\">define-foreign-"
"type</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign "
"Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel="
"\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" "
"rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">define-parse-method</h4>\n"
"<a name=\"define_002dparse_002dmethod-1\"></a>\n"
"<h3 class=\"heading\">define-parse-method</h3>\n"
"<a name=\"Syntax-8\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-define_002dparse_002dmethod\"></a>Macro: <strong>define-"
"parse-method</strong> <em>name lambda-list &amp;body body⇒ name</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3420
msgid ""
"<a name=\"Arguments-and-Values-8\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3434
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>type-name</var></dt>\n"
"<dd><p>A symbol naming the new foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>lambda-list</var></dt>\n"
"<dd><p>A lambda list which is the argument list of the new foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>body</var></dt>\n"
"<dd><p>One or more forms that provide a definition of the new foreign type.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3437
msgid ""
"<a name=\"Description-8\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3454
msgid ""
"<a name=\"Examples-8\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<p>Taken from <acronym>CFFI</acronym>âs <code>:boolean</code> type "
"definition:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-foreign-type</span></i> <span class="
"\"keyword\">:boolean</span> <span class=\"paren2\">(<span class=\"lisp-bg"
"\">&amp;optional <span class=\"paren3\">(<span class=\"lisp-bg\">base-type "
"<span class=\"keyword\">:int</span></span>)</span></span>)</span>\n"
"    <span class=\"string\">\"Boolean type. Maps to an :int by default. Only "
"accepts integer types.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">ecase base-type\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class="
"\"paren4\">(<span class=\"lisp-bg\"><span class=\"keyword\">:char</span>\n"
"        <span class=\"keyword\">:unsigned-char</span>\n"
"        <span class=\"keyword\">:int</span>\n"
"        <span class=\"keyword\">:unsigned-int</span>\n"
"        <span class=\"keyword\">:long</span>\n"
"        <span class=\"keyword\">:unsigned-long</span></span>)</span> base-"
"type</span>)</span></span>)</span></span>)</span>"
msgstr ""
"<a name=\"Examples-8\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<p>Получим из <acronym>CFFI</acronym>âs определение типа <code>:boolean</"
"code>:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-foreign-type</span></i> <span class="
"\"keyword\">:boolean</span> <span class=\"paren2\">(<span class=\"lisp-bg"
"\">&amp;optional <span class=\"paren3\">(<span class=\"lisp-bg\">base-type "
"<span class=\"keyword\">:int</span></span>)</span></span>)</span>\n"
"    <span class=\"string\">\"Boolean type. Maps to an :int by default. Only "
"accepts integer types.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">ecase base-type\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><span class="
"\"paren4\">(<span class=\"lisp-bg\"><span class=\"keyword\">:char</span>\n"
"        <span class=\"keyword\">:unsigned-char</span>\n"
"        <span class=\"keyword\">:int</span>\n"
"        <span class=\"keyword\">:unsigned-int</span>\n"
"        <span class=\"keyword\">:long</span>\n"
"        <span class=\"keyword\">:unsigned-long</span></span>)</span> base-"
"type</span>)</span></span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:3463
msgctxt "in/CFFI_User_Manual.htm:3463"
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">canonicalize-"
"foreign-type <span class=\"keyword\">:boolean</span></span>)</span>\n"
" ⇒ :INT\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">canonicalize-"
"foreign-type '<span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:boolean</span> <span class=\"keyword\">:long</span></span>)</"
"span></span>)</span>\n"
" ⇒ :LONG\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">canonicalize-"
"foreign-type '<span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:boolean</span> <span class=\"keyword\">:float</span></span>)</"
"span></span>)</span>\n"
"  <span class=\"comment\">;; error&amp;rarr; signalled by ECASE.\n"
"  </span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3468
msgid ""
"<a name=\"See-Also-8\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#define_002dforeign_002dtype\">define-foreign-type</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3496
msgid ""
"<hr>\n"
"<a name=\"foreign_002dbitfield_002dsymbols\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dbitfield_002dvalue\" accesskey=\"n\" rel=\"next"
"\">foreign-bitfield-value</a>, Previous: <a href="
"\"#define_002dparse_002dmethod\" accesskey=\"p\" rel=\"prev\">define-parse-"
"method</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up"
"\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-bitfield-symbols</h4>\n"
"<a name=\"foreign_002dbitfield_002dsymbols-1\"></a>\n"
"<h3 class=\"heading\">foreign-bitfield-symbols</h3>\n"
"<a name=\"Syntax-9\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dbitfield_002dsymbols\"></a>Function: "
"<strong>foreign-bitfield-symbols</strong> <em>type value⇒ symbols</em></"
"dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3499
msgid ""
"<a name=\"Arguments-and-Values-9\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3514
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A bitfield type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>value</var></dt>\n"
"<dd><p>An integer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>symbols</var></dt>\n"
"<dd><p>A potentially shared list of symbols.\n"
"<code>nil</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3527
msgid ""
"<a name=\"Description-9\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>foreign-bitfield-symbols</code> returns a possibly "
"shared\n"
"list of symbols that correspond to <var>value</var> in <var>type</var>.\n"
"</p>\n"
"<a name=\"Examples-9\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defbitfield</span></i> flags\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-a 1</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-b 2</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-c 4</span>)</span></"
"span>)</span>"
msgstr ""
"<a name=\"Description-9\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-bitfield-symbols</code> возвращает возможно "
"совместно\n"
"используемый список символов, которые соответствуют значению <var>value</"
"var> в <var>type</var>.\n"
"</p>\n"
"<a name=\"Examples-9\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defbitfield</span></i> flags\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-a 1</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-b 2</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-c 4</span>)</span></"
"span>)</span>"

#: in/CFFI_User_Manual.htm:3531
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-bitfield-"
"symbols 'flags #b101</span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\">FLAG-A FLAG-C</span>)</"
"span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3537
msgid ""
"<a name=\"See-Also-9\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defbitfield\">defbitfield</a> <br>\n"
"<a href=\"#foreign_002dbitfield_002dvalue\">foreign-bitfield-value</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3553
msgid ""
"<hr>\n"
"<a name=\"foreign_002dbitfield_002dvalue\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002denum_002dkeyword\" accesskey=\"n\" rel=\"next"
"\">foreign-enum-keyword</a>, Previous: <a href="
"\"#foreign_002dbitfield_002dsymbols\" accesskey=\"p\" rel=\"prev\">foreign-"
"bitfield-symbols</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up"
"\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-bitfield-value</h4>\n"
"<a name=\"foreign_002dbitfield_002dvalue-1\"></a>\n"
"<h3 class=\"heading\">foreign-bitfield-value</h3>\n"
"<a name=\"Syntax-10\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dbitfield_002dvalue\"></a>Function: "
"<strong>foreign-bitfield-value</strong> <em>type symbols⇒ value</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3556
msgid ""
"<a name=\"Arguments-and-Values-10\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3570
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A <code>bitfield</code> type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>symbol</var></dt>\n"
"<dd><p>A Lisp symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>value</var></dt>\n"
"<dd><p>An integer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3583
msgid ""
"<a name=\"Description-10\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>foreign-bitfield-value</code> returns the <var>value</"
"var> that\n"
"corresponds to the symbols in the <var>symbols</var> list.\n"
"</p>\n"
"<a name=\"Examples-10\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defbitfield</span></i> flags\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-a 1</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-b 2</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-c 4</span>)</span></"
"span>)</span>"
msgstr ""
"<a name=\"Description-10\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-bitfield-value</code> возвращает значение "
"<var>value</var> \n"
"соотвествующее списку символов(<var>symbols</var>).\n"
"</p>\n"
"<a name=\"Examples-10\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defbitfield</span></i> flags\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-a 1</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-b 2</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">flag-c 4</span>)</span></"
"span>)</span>"

#: in/CFFI_User_Manual.htm:3587
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-bitfield-"
"value 'flags '<span class=\"paren2\">(<span class=\"lisp-bg\">flag-a flag-c</"
"span>)</span></span>)</span>\n"
" ⇒ 5  ; #b101\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3593
msgid ""
"<a name=\"See-Also-10\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defbitfield\">defbitfield</a> <br>\n"
"<a href=\"#foreign_002dbitfield_002dsymbols\">foreign-bitfield-symbols</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3609
msgid ""
"<hr>\n"
"<a name=\"foreign_002denum_002dkeyword\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002denum_002dvalue\" accesskey=\"n\" rel=\"next"
"\">foreign-enum-value</a>, Previous: <a href="
"\"#foreign_002dbitfield_002dvalue\" accesskey=\"p\" rel=\"prev\">foreign-"
"bitfield-value</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up"
"\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-enum-keyword</h4>\n"
"<a name=\"foreign_002denum_002dkeyword-1\"></a>\n"
"<h3 class=\"heading\">foreign-enum-keyword</h3>\n"
"<a name=\"Syntax-11\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002denum_002dkeyword\"></a>Function: "
"<strong>foreign-enum-keyword</strong> <em>type value &amp;key errorp⇒ "
"keyword</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3612
msgid ""
"<a name=\"Arguments-and-Values-11\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3632
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>type</var></dt>\n"
"<dd><p>An <code>enum</code> type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>value</var></dt>\n"
"<dd><p>An integer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>errorp</var></dt>\n"
"<dd><p>If true (the default), signal an error if <var>value</var> is not "
"defined\n"
"in <var>type</var>.  If false, <code>foreign-enum-keyword</code> returns\n"
"<code>nil</code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>keyword</var></dt>\n"
"<dd><p>A keyword symbol.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3647
msgid ""
"<a name=\"Description-11\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>foreign-enum-keyword</code> returns the keyword "
"symbol\n"
"that corresponds to <var>value</var> in <var>type</var>.\n"
"</p>\n"
"<p>An error is signaled if <var>type</var> doesnât contain such <var>value</"
"var>\n"
"and <var>errorp</var> is true.\n"
"</p>\n"
"<a name=\"Examples-11\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcenum</span></i> boolean\n"
"    <span class=\"keyword\">:no</span>\n"
"    <span class=\"keyword\">:yes</span></span>)</span>"
msgstr ""
"<a name=\"Description-11\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-enum-keyword</code> возвращает символ ключевое "
"слово\n"
"которое соответствует значению <var>value</var> в типе <var>type</var>.\n"
"</p>\n"
"<p>Сообщение об ошибке выдается, если тип(<var>type</var>) не содержит "
"значения<var>value</var>\n"
"и <var>errorp</var> равно true.\n"
"</p>\n"
"<a name=\"Examples-11\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcenum</span></i> boolean\n"
"    <span class=\"keyword\">:no</span>\n"
"    <span class=\"keyword\">:yes</span></span>)</span>"

#: in/CFFI_User_Manual.htm:3651
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-enum-"
"keyword 'boolean 1</span>)</span>\n"
" ⇒ :YES\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3657
msgid ""
"<a name=\"See-Also-11\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcenum\">defcenum</a> <br>\n"
"<a href=\"#foreign_002denum_002dvalue\">foreign-enum-value</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3673
msgid ""
"<hr>\n"
"<a name=\"foreign_002denum_002dvalue\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dslot_002dnames\" accesskey=\"n\" rel=\"next"
"\">foreign-slot-names</a>, Previous: <a href=\"#foreign_002denum_002dkeyword"
"\" accesskey=\"p\" rel=\"prev\">foreign-enum-keyword</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-enum-value</h4>\n"
"<a name=\"foreign_002denum_002dvalue-1\"></a>\n"
"<h3 class=\"heading\">foreign-enum-value</h3>\n"
"<a name=\"Syntax-12\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002denum_002dvalue\"></a>Function: "
"<strong>foreign-enum-value</strong> <em>type keyword &amp;key errorp⇒ "
"value</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3676
msgid ""
"<a name=\"Arguments-and-Values-12\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3696
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>type</var></dt>\n"
"<dd><p>An <code>enum</code> type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>keyword</var></dt>\n"
"<dd><p>A keyword symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>errorp</var></dt>\n"
"<dd><p>If true (the default), signal an error if <var>keyword</var> is not\n"
"defined in <var>type</var>.  If false, <code>foreign-enum-value</code> "
"returns\n"
"<code>nil</code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>value</var></dt>\n"
"<dd><p>An integer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3711
msgid ""
"<a name=\"Description-12\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>foreign-enum-value</code> returns the <var>value</var> "
"that\n"
"corresponds to <var>keyword</var> in <var>type</var>.\n"
"</p>\n"
"<p>An error is signaled if <var>type</var> doesnât contain such\n"
"<var>keyword</var>, and <var>errorp</var> is true.\n"
"</p>\n"
"<a name=\"Examples-12\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcenum</span></i> boolean\n"
"    <span class=\"keyword\">:no</span>\n"
"    <span class=\"keyword\">:yes</span></span>)</span>"
msgstr ""
"<a name=\"Description-12\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-enum-value</code> возвращает значение <var>value</"
"var>,\n"
"которое соответствует ключевому слову <var>keyword</var> в типе <var>type</"
"var>.\n"
"</p>\n"
"<p>Сообщение об ошибке выдается, если тип <var>type</var> не содержит "
"такого\n"
"ключевого слова <var>keyword</var>, и <var>errorp</var> равен true.\n"
"</p>\n"
"<a name=\"Examples-12\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcenum</span></i> boolean\n"
"    <span class=\"keyword\">:no</span>\n"
"    <span class=\"keyword\">:yes</span></span>)</span>"

#: in/CFFI_User_Manual.htm:3715
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-enum-"
"value 'boolean <span class=\"keyword\">:yes</span></span>)</span>\n"
" ⇒ 1\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3721
msgid ""
"<a name=\"See-Also-12\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcenum\">defcenum</a> <br>\n"
"<a href=\"#foreign_002denum_002dkeyword\">foreign-enum-keyword</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3737
msgid ""
"<hr>\n"
"<a name=\"foreign_002dslot_002dnames\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dslot_002doffset\" accesskey=\"n\" rel=\"next"
"\">foreign-slot-offset</a>, Previous: <a href=\"#foreign_002denum_002dvalue"
"\" accesskey=\"p\" rel=\"prev\">foreign-enum-value</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-slot-names</h4>\n"
"<a name=\"foreign_002dslot_002dnames-1\"></a>\n"
"<h3 class=\"heading\">foreign-slot-names</h3>\n"
"<a name=\"Syntax-13\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dslot_002dnames\"></a>Function: "
"<strong>foreign-slot-names</strong> <em>type⇒ names</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3740
msgid ""
"<a name=\"Arguments-and-Values-13\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3750
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign struct type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>names</var></dt>\n"
"<dd><p>A list.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3763
msgid ""
"<a name=\"Description-13\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>foreign-slot-names</code> returns a potentially "
"shared\n"
"list of slot <var>names</var> for the given structure <var>type</var>. This "
"list\n"
"has no particular order.\n"
"</p>\n"
"<a name=\"Examples-13\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> timeval\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">tv-secs <span class="
"\"keyword\">:long</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">tv-usecs <span class="
"\"keyword\">:long</span></span>)</span></span>)</span>"
msgstr ""
"<a name=\"Description-13\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-slot-names</code> возвращает потенциально\n"
"совместно используемый список имен <var>names</var> слотов для данного\n"
"типа(<var>type</var>) структуры. Этот список не имеет определенного "
"порядка.\n"
"</p>\n"
"<a name=\"Examples-13\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> timeval\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">tv-secs <span class="
"\"keyword\">:long</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">tv-usecs <span class="
"\"keyword\">:long</span></span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:3767
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-slot-"
"names '<span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:struct</span> timeval</span>)</span></span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\">TV-SECS TV-USECS</"
"span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3775
msgid ""
"<a name=\"See-Also-13\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcstruct\">defcstruct</a> <br>\n"
"<a href=\"#foreign_002dslot_002doffset\">foreign-slot-offset</a> <br>\n"
"<a href=\"#foreign_002dslot_002dvalue\">foreign-slot-value</a> <br>\n"
"<a href=\"#foreign_002dslot_002dpointer\">foreign-slot-pointer</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3791
msgid ""
"<hr>\n"
"<a name=\"foreign_002dslot_002doffset\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dslot_002dpointer\" accesskey=\"n\" rel=\"next"
"\">foreign-slot-pointer</a>, Previous: <a href=\"#foreign_002dslot_002dnames"
"\" accesskey=\"p\" rel=\"prev\">foreign-slot-names</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-slot-offset</h4>\n"
"<a name=\"foreign_002dslot_002doffset-1\"></a>\n"
"<h3 class=\"heading\">foreign-slot-offset</h3>\n"
"<a name=\"Syntax-14\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dslot_002doffset\"></a>Function: "
"<strong>foreign-slot-offset</strong> <em>type slot-name⇒ offset</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3794
msgid ""
"<a name=\"Arguments-and-Values-14\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3808
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign struct type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>slot-name</var></dt>\n"
"<dd><p>A symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>offset</var></dt>\n"
"<dd><p>An integer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3820
msgid ""
"<a name=\"Description-14\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>foreign-slot-offset</code> returns the <var>offset</"
"var> in\n"
"bytes of a slot in a foreign struct type.\n"
"</p>\n"
"<a name=\"Examples-14\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> timeval\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">tv-secs <span class="
"\"keyword\">:long</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">tv-usecs <span class="
"\"keyword\">:long</span></span>)</span></span>)</span>"
msgstr ""
"<a name=\"Description-14\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-slot-offset</code> возвращает смещение(<var>offset</"
"var>)\n"
"в байтах длял слота в типе внешней структуры.\n"
"</p>\n"
"<a name=\"Examples-14\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> timeval\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">tv-secs <span class="
"\"keyword\">:long</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">tv-usecs <span class="
"\"keyword\">:long</span></span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:3826
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-slot-"
"offset '<span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:struct</span> timeval</span>)</span> 'tv-secs</span>)</span>\n"
" ⇒ 0\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-slot-"
"offset '<span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:struct</span> timeval</span>)</span> 'tv-usecs</span>)</span>\n"
" ⇒ 4\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3834
msgid ""
"<a name=\"See-Also-14\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcstruct\">defcstruct</a> <br>\n"
"<a href=\"#foreign_002dslot_002dnames\">foreign-slot-names</a> <br>\n"
"<a href=\"#foreign_002dslot_002dpointer\">foreign-slot-pointer</a> <br>\n"
"<a href=\"#foreign_002dslot_002dvalue\">foreign-slot-value</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3850
msgid ""
"<hr>\n"
"<a name=\"foreign_002dslot_002dpointer\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dslot_002dvalue\" accesskey=\"n\" rel=\"next"
"\">foreign-slot-value</a>, Previous: <a href=\"#foreign_002dslot_002doffset"
"\" accesskey=\"p\" rel=\"prev\">foreign-slot-offset</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-slot-pointer</h4>\n"
"<a name=\"foreign_002dslot_002dpointer-1\"></a>\n"
"<h3 class=\"heading\">foreign-slot-pointer</h3>\n"
"<a name=\"Syntax-15\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dslot_002dpointer\"></a>Function: "
"<strong>foreign-slot-pointer</strong> <em>ptr type slot-name⇒ pointer</em></"
"dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3853
msgid ""
"<a name=\"Arguments-and-Values-15\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3871
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>A pointer to a structure.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign structure type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>slot-names</var></dt>\n"
"<dd><p>A slot name in the <var>type</var>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>pointer</var></dt>\n"
"<dd><p>A pointer to the slot <var>slot-name</var>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3889
msgid ""
"<a name=\"Description-15\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Returns a pointer to the location of the slot <var>slot-name</var> in a\n"
"foreign object of type <var>type</var> at <var>ptr</var>. The returned "
"pointer\n"
"points inside the structure. Both the pointer and the memory it points\n"
"to have the same extent as <var>ptr</var>.\n"
"</p>\n"
"<p>For aggregate slots, this is the same value returned by\n"
"<code>foreign-slot-value</code>.\n"
"</p>\n"
"<a name=\"Examples-15\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> point\n"
"    <span class=\"string\">\"Pointer structure.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">x <span class=\"keyword"
"\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">y <span class=\"keyword"
"\">:int</span></span>)</span></span>)</span>"
msgstr ""
"<a name=\"Description-15\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Возвращает указатель на расположение слота с именем(<var>slot-name</"
"var>)\n"
"во внешнем объекте с типом(<var>type</var>) записыая его в <var>ptr</var>. \n"
"Возвращаенный указател указывает внутрь структруы. Указатель и память, на\n"
"которую он указывает имеют тоже самое время жизни, что и <var>ptr</var>.\n"
"</p>\n"
"<p>Для составных слотов это тоже самое значение, которое возвращает\n"
"<code>foreign-slot-value</code>.\n"
"</p>\n"
"<a name=\"Examples-15\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> point\n"
"    <span class=\"string\">\"Pointer structure.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">x <span class=\"keyword"
"\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">y <span class=\"keyword"
"\">:int</span></span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:3896
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-object</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\">ptr '<span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"keyword\">:struct</span> point</span>)</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-slot-"
"pointer ptr '<span class=\"paren3\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:struct</span> point</span>)</span> 'x</span>)</span></span>)</"
"span>\n"
" ⇒ #&lt;FOREIGN-ADDRESS #xBFFF6E60&gt;\n"
"  <span class=\"comment\">;; Note: the exact pointer representation varies "
"from lisp to lisp.\n"
"  </span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3904
msgid ""
"<a name=\"See-Also-15\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcstruct\">defcstruct</a> <br>\n"
"<a href=\"#foreign_002dslot_002dvalue\">foreign-slot-value</a> <br>\n"
"<a href=\"#foreign_002dslot_002dnames\">foreign-slot-names</a> <br>\n"
"<a href=\"#foreign_002dslot_002doffset\">foreign-slot-offset</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3920
msgid ""
"<hr>\n"
"<a name=\"foreign_002dslot_002dvalue\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dtype_002dalignment\" accesskey=\"n\" rel=\"next"
"\">foreign-type-alignment</a>, Previous: <a href="
"\"#foreign_002dslot_002dpointer\" accesskey=\"p\" rel=\"prev\">foreign-slot-"
"pointer</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up"
"\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-slot-value</h4>\n"
"<a name=\"foreign_002dslot_002dvalue-1\"></a>\n"
"<h3 class=\"heading\">foreign-slot-value</h3>\n"
"<a name=\"Syntax-16\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dslot_002dvalue\"></a>Accessor: "
"<strong>foreign-slot-value</strong> <em>ptr type slot-name⇒ object</em></"
"dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3923
msgid ""
"<a name=\"Arguments-and-Values-16\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:3941
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>A pointer to a structure.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign structure type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>slot-name</var></dt>\n"
"<dd><p>A symbol naming a slot in the structure type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>object</var></dt>\n"
"<dd><p>The object contained in the slot specified by <var>slot-name</var>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:3964
msgid ""
"<a name=\"Description-16\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>For simple slots, <code>foreign-slot-value</code> returns the value of "
"the\n"
"object, such as a Lisp integer or pointer. In C, this would be\n"
"expressed as <code>ptr-&gt;slot</code>.\n"
"</p>\n"
"<p>For aggregate slots, a pointer inside the structure to the beginning\n"
"of the slotâs data is returned. In C, this would be expressed as\n"
"<code>&amp;ptr-&gt;slot</code>. This pointer and the memory it points to "
"have the\n"
"same extent as <var>ptr</var>.\n"
"</p>\n"
"<p>There are compiler macros for <code>foreign-slot-value</code> and its\n"
"<code>setf</code> expansion that open code the memory access when\n"
"<var>type</var> and <var>slot-names</var> are constant at compile-time.\n"
"</p>\n"
"<a name=\"Examples-16\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> point\n"
"    <span class=\"string\">\"Pointer structure.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">x <span class=\"keyword"
"\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">y <span class=\"keyword"
"\">:int</span></span>)</span></span>)</span>"
msgstr ""
"<a name=\"Description-16\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Для простых слотов, <code>foreign-slot-value</code> возвращает значение\n"
"объекта, такое как целое Lisp или указатель. В си это будет выражаться\n"
"как <code>ptr-&gt;slot</code>.\n"
"</p>\n"
"<p>Для составных слотов возвращается указатель внутрь структуры на\n"
"начало данных слота. В Си это будет выражаться как <code>&amp;ptr-&gt;slot</"
"code>. \n"
"Этот указатель или память, на которую он указывает, имеют тоже время\n"
"существования что и <var>ptr</var>.\n"
"</p>\n"
"<p>Имеются макросы компилятора для <code>foreign-slot-value</code> и\n"
"его расширения <code>setf</code>, которые открывают код для доступа\n"
"к памяти, когда <var>type</var> и <var>slot-names</var> являются\n"
"константами во время компиляции.\n"
"</p>\n"
"<a name=\"Examples-16\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> point\n"
"    <span class=\"string\">\"Pointer structure.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">x <span class=\"keyword"
"\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">y <span class=\"keyword"
"\">:int</span></span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:3974
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-object</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\">ptr '<span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"keyword\">:struct</span> point</span>)</span></span>)</span>\n"
"          <span class=\"comment\">;; Initialize the slots\n"
"  </span>        <span class=\"paren2\">(<span class=\"lisp-bg\">setf <span "
"class=\"paren3\">(<span class=\"lisp-bg\">foreign-slot-value ptr '<span "
"class=\"paren4\">(<span class=\"lisp-bg\"><span class=\"keyword\">:struct</"
"span> point</span>)</span> 'x</span>)</span> 42\n"
"                <span class=\"paren3\">(<span class=\"lisp-bg\">foreign-slot-"
"value ptr '<span class=\"paren4\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:struct</span> point</span>)</span> 'y</span>)</span> 42</"
"span>)</span>\n"
"          <span class=\"comment\">;; Return a list with the coordinates\n"
"  </span>        <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">with-foreign-slots</span></i> <span class=\"paren3\">(<span "
"class=\"lisp-bg\"><span class=\"paren4\">(<span class=\"lisp-bg\">x y</"
"span>)</span> ptr <span class=\"paren4\">(<span class=\"lisp-bg\"><span "
"class=\"keyword\">:struct</span> point</span>)</span></span>)</span>\n"
"            <span class=\"paren3\">(<span class=\"lisp-bg\">list x y</"
"span>)</span></span>)</span></span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\">42 42</span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:3983
msgid ""
"<a name=\"See-Also-16\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcstruct\">defcstruct</a> <br>\n"
"<a href=\"#foreign_002dslot_002dnames\">foreign-slot-names</a> <br>\n"
"<a href=\"#foreign_002dslot_002doffset\">foreign-slot-offset</a> <br>\n"
"<a href=\"#foreign_002dslot_002dpointer\">foreign-slot-pointer</a> <br>\n"
"<a href=\"#with_002dforeign_002dslots\">with-foreign-slots</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:3999
msgid ""
"<hr>\n"
"<a name=\"foreign_002dtype_002dalignment\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dtype_002dsize\" accesskey=\"n\" rel=\"next"
"\">foreign-type-size</a>, Previous: <a href=\"#foreign_002dslot_002dvalue\" "
"accesskey=\"p\" rel=\"prev\">foreign-slot-value</a>, Up: <a href=\"#Foreign-"
"Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-type-alignment</h4>\n"
"<a name=\"foreign_002dtype_002dalignment-1\"></a>\n"
"<h3 class=\"heading\">foreign-type-alignment</h3>\n"
"<a name=\"Syntax-17\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dtype_002dalignment\"></a>Function: "
"<strong>foreign-type-alignment</strong> <em>type⇒ alignment</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4002
msgid ""
"<a name=\"Arguments-and-Values-17\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4012
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>alignment</var></dt>\n"
"<dd><p>An integer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4028
msgid ""
"<a name=\"Description-17\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>foreign-type-alignment</code> returns the\n"
"<var>alignment</var> of <var>type</var> in bytes.\n"
"</p>\n"
"<a name=\"Examples-17\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-type-alignment <span class=\"keyword\">:char</span></span>)</"
"span>\n"
" ⇒ 1\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-type-"
"alignment <span class=\"keyword\">:short</span></span>)</span>\n"
" ⇒ 2\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-type-"
"alignment <span class=\"keyword\">:int</span></span>)</span>\n"
" ⇒ 4\n"
"</pre></div>"
msgstr ""
"<a name=\"Description-17\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-type-alignment</code> возвращает выравнивание\n"
"(<var>alignment</var>) типа( <var>type</var>) в байтах.\n"
"</p>\n"
"<a name=\"Examples-17\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-type-alignment <span class=\"keyword\">:char</span></span>)</"
"span>\n"
" ⇒ 1\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-type-"
"alignment <span class=\"keyword\">:short</span></span>)</span>\n"
" ⇒ 2\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-type-"
"alignment <span class=\"keyword\">:int</span></span>)</span>\n"
" ⇒ 4\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:4032
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> foo\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">a <span class=\"keyword"
"\">:char</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:4036
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-type-"
"alignment '<span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:struct</span> foo</span>)</span></span>)</span>\n"
" ⇒ 1\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:4041
msgid ""
"<a name=\"See-Also-17\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dtype_002dsize\">foreign-type-size</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:4057
msgid ""
"<hr>\n"
"<a name=\"foreign_002dtype_002dsize\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#free_002dconverted_002dobject\" accesskey=\"n\" rel=\"next"
"\">free-converted-object</a>, Previous: <a href="
"\"#foreign_002dtype_002dalignment\" accesskey=\"p\" rel=\"prev\">foreign-"
"type-alignment</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up"
"\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-type-size</h4>\n"
"<a name=\"foreign_002dtype_002dsize-1\"></a>\n"
"<h3 class=\"heading\">foreign-type-size</h3>\n"
"<a name=\"Syntax-18\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dtype_002dsize\"></a>Function: "
"<strong>foreign-type-size</strong> <em>type⇒ size</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4060
msgid ""
"<a name=\"Arguments-and-Values-18\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4070
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>size</var></dt>\n"
"<dd><p>An integer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4084
msgid ""
"<a name=\"Description-18\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>foreign-type-size</code> return the <var>size</var> "
"of\n"
"<var>type</var> in bytes.  This includes any padding within and following\n"
"the in-memory representation as needed to create an array of\n"
"<var>type</var> objects.\n"
"</p>\n"
"<a name=\"Examples-18\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> foo\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">a <span class=\"keyword"
"\">:double</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">c <span class=\"keyword"
"\">:char</span></span>)</span></span>)</span>"
msgstr ""
"<a name=\"Description-18\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-type-size</code> возвращает размер(<var>size</"
"var>)\n"
"типа(<var>type</var>) в байтах.  Он включает в себя любые отступы внутри и "
"после,\n"
"представления в памяти, необходимые для создания массива объектов данного\n"
"типа(<var>type</var>).\n"
"</p>\n"
"<a name=\"Examples-18\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> foo\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">a <span class=\"keyword"
"\">:double</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">c <span class=\"keyword"
"\">:char</span></span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:4092
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-type-size "
"<span class=\"keyword\">:double</span></span>)</span>\n"
" ⇒ 8\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-type-size "
"<span class=\"keyword\">:char</span></span>)</span>\n"
" ⇒ 1\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-type-size "
"'<span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"struct</span> foo</span>)</span></span>)</span>\n"
" ⇒ 16\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:4097
msgid ""
"<a name=\"See-Also-18\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dtype_002dalignment\">foreign-type-alignment</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:4113
msgid ""
"<hr>\n"
"<a name=\"free_002dconverted_002dobject\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#free_002dtranslated_002dobject\" accesskey=\"n\" rel=\"next"
"\">free-translated-object</a>, Previous: <a href=\"#foreign_002dtype_002dsize"
"\" accesskey=\"p\" rel=\"prev\">foreign-type-size</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">free-converted-object</h4>\n"
"<a name=\"free_002dconverted_002dobject-1\"></a>\n"
"<h3 class=\"heading\">free-converted-object</h3>\n"
"<a name=\"Syntax-19\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-free_002dconverted_002dobject\"></a>Function: "
"<strong>free-converted-object</strong> <em>foreign-value type params</em></"
"dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4116
msgid ""
"<a name=\"Arguments-and-Values-19\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4131
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>foreign-value</var></dt>\n"
"<dd><p>The C object to be freed.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A <acronym>CFFI</acronym> type specifier.\n"
"</p>\n"
"</dd>\n"
"<dt><var>params</var></dt>\n"
"<dd><p>The state returned as the second value from <code>convert-to-foreign</"
"code>;\n"
"used to implement the third argument to <code>free-translated-object</"
"code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4134
msgid ""
"<a name=\"Description-19\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4151
msgid ""
"<p>The return value is unspecified.\n"
"</p>\n"
"<p>This is an external interface to the type translation facility.  In\n"
"the implementation, all foreign functions are ultimately defined as\n"
"type translation wrappers around primitive foreign function\n"
"invocations.\n"
"</p>\n"
"<p>This function is available mostly for inspection of the type\n"
"translation process, and possibly optimization of special cases of\n"
"your foreign function calls.\n"
"</p>\n"
"<p>Its behavior is better described under <code>free-translated-object</"
"code>âs\n"
"documentation.\n"
"</p>\n"
"<a name=\"Examples-19\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<p>Возвращаемое значение не указано.\n"
"</p>\n"
"<p>Это внешний интерфейс для обеспечения возможности преобразования типа.  \n"
"В реализации все внешние функции в конечном итоге определяются как обертки\n"
"преобразования типа вокруг примитивных вызовов вшнешних функций.\n"
"</p>\n"
"<p>Эта функция в основном для проверки процесса преобразования типа, и "
"возможно,\n"
"для оптимизации особых случаев вызовов ваших внешних функций.\n"
"</p>\n"
"<p>Её поведение лучше описано в документации <code>free-translated-object</"
"code>.\n"
"</p>\n"
"<a name=\"Examples-19\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:4159
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI-USER&gt; <span class=\"paren1\">(<span class="
"\"lisp-bg\">convert-to-foreign <span class=\"string\">\"a boat\"</span> "
"<span class=\"keyword\">:string</span></span>)</span>\n"
" ⇒ #&lt;FOREIGN-ADDRESS #x097ACDC0&gt;\n"
" ⇒ T\n"
"  CFFI-USER&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">free-"
"converted-object * <span class=\"keyword\">:string</span> t</span>)</span>\n"
" ⇒ NIL\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:4166
msgid ""
"<a name=\"See-Also-19\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#convert_002dfrom_002dforeign\">convert-from-foreign</a> <br>\n"
"<a href=\"#convert_002dto_002dforeign\">convert-to-foreign</a> <br>\n"
"<a href=\"#free_002dtranslated_002dobject\">free-translated-object</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:4183
msgid ""
"<hr>\n"
"<a name=\"free_002dtranslated_002dobject\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#translate_002dfrom_002dforeign\" accesskey=\"n\" rel=\"next"
"\">translate-from-foreign</a>, Previous: <a href="
"\"#free_002dconverted_002dobject\" accesskey=\"p\" rel=\"prev\">free-"
"converted-object</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up"
"\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">free-translated-object</h4>\n"
"<a name=\"free_002dtranslated_002dobject-1\"></a>\n"
"<h3 class=\"heading\">free-translated-object</h3>\n"
"<a name=\"Syntax-20\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-free_002dtranslated_002dobject\"></a>Generic Function: "
"<strong>free-translated-object</strong> <em>value type-name param</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4186
msgid ""
"<a name=\"Arguments-and-Values-20\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4200
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>pointer</var></dt>\n"
"<dd><p>The foreign value returned by <code>translate-to-foreign</code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type-name</var></dt>\n"
"<dd><p>A symbol naming a foreign type defined by <code>defctype</code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>param</var></dt>\n"
"<dd><p>The second value, if any, returned by <code>translate-to-foreign</"
"code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4216
msgid ""
"<a name=\"Description-20\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>This generic function may be specialized by user code to perform\n"
"automatic deallocation of foreign objects as they are passed to C\n"
"functions.\n"
"</p>\n"
"<p>Any methods defined on this generic function must EQL-specialize the\n"
"<var>type-name</var> parameter on a symbol defined as a foreign type by\n"
"the <code>defctype</code> macro.\n"
"</p>\n"
"<a name=\"See-Also-20\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#Foreign-Type-Translators\">Foreign Type Translators</a> <br>\n"
"<a href=\"#translate_002dto_002dforeign\">translate-to-foreign</a>\n"
"</p>"
msgstr ""
"<a name=\"Description-20\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Эта обобщенная функция может быть специализирована пользовательским\n"
"кодом для автоматического освобождения внешних объектов, когда они "
"передаются в\n"
"функции Си.\n"
"</p>\n"
"<p>Любые методы, определенные в этой обобщенной функции, должны\n"
"EQL-специализировать параметр <var>type-name</var> для символа определенного "
"как\n"
"внешний тип через макрос <code>defctype</code>.\n"
"</p>\n"
"<a name=\"See-Also-20\"></a>\n"
"<h4 class=\"subheading\">См. также</h4>\n"
"<p><a href=\"#Foreign-Type-Translators\">Foreign Type Translators</a> <br>\n"
"<a href=\"#translate_002dto_002dforeign\">translate-to-foreign</a>\n"
"</p>"

#: in/CFFI_User_Manual.htm:4233
msgid ""
"<hr>\n"
"<a name=\"translate_002dfrom_002dforeign\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#translate_002dto_002dforeign\" accesskey=\"n\" rel=\"next"
"\">translate-to-foreign</a>, Previous: <a href="
"\"#free_002dtranslated_002dobject\" accesskey=\"p\" rel=\"prev\">free-"
"translated-object</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel="
"\"up\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">translate-from-foreign</h4>\n"
"<a name=\"translate_002dfrom_002dforeign-1\"></a>\n"
"<h3 class=\"heading\">translate-from-foreign</h3>\n"
"<a name=\"Syntax-21\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-translate_002dfrom_002dforeign\"></a>Generic Function: "
"<strong>translate-from-foreign</strong> <em>foreign-value type-"
"name                                        ⇒ lisp-value</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4236
msgid ""
"<a name=\"Arguments-and-Values-21\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4250
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>foreign-value</var></dt>\n"
"<dd><p>The foreign value to convert to a Lisp object.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type-name</var></dt>\n"
"<dd><p>A symbol naming a foreign type defined by <code>defctype</code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>lisp-value</var></dt>\n"
"<dd><p>The lisp value to pass in place of <code>foreign-value</code> to Lisp "
"code.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4274
msgid ""
"<a name=\"Description-21\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>This generic function is invoked by <acronym>CFFI</acronym> to convert a "
"foreign value to\n"
"a Lisp value, such as when returning from a foreign function, passing\n"
"arguments to a callback function, or accessing a foreign variable.\n"
"</p>\n"
"<p>To extend the <acronym>CFFI</acronym> type system by performing custom "
"translations, this\n"
"method may be specialized by <small>EQL</small>-specializing <code>type-"
"name</code> on a\n"
"symbol naming a foreign type defined with <code>defctype</code>.  This\n"
"method should return the appropriate Lisp value to use in place of the\n"
"foreign value.\n"
"</p>\n"
"<p>The results are undefined if the <code>type-name</code> parameter is\n"
"specialized in any way except an <small>EQL</small> specializer on a foreign "
"type\n"
"defined with <code>defctype</code>.  Specifically, translations may not be\n"
"defined for built-in types.\n"
"</p>\n"
"<a name=\"See-Also-21\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#Foreign-Type-Translators\">Foreign Type Translators</a> <br>\n"
"<a href=\"#translate_002dto_002dforeign\">translate-to-foreign</a> <br>\n"
"<a href=\"#free_002dtranslated_002dobject\">free-translated-object</a>\n"
"</p>"
msgstr ""
"<a name=\"Description-21\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Эта обобщенная функция вызывается <acronym>CFFI</acronym> для "
"преобразования\n"
"внешнего значения в значение Lisp, например, при возврате из внешней "
"функции, \n"
"передаче аргументов в функцию обратного вызова, или доступе к внешней "
"переменной.\n"
"</p>\n"
"<p>Чтобыб расширить систему типов <acronym>CFFI</acronym>, выполняя "
"пользовательские\n"
"преобразования, этот метод может быть специализирован по <small>EQL</small>-"
"специализирующему\n"
"имени типа(<code>type-name</code>) для символа, обозначающего внешний тип "
"определенный с \n"
"помощью <code>defctype</code>.  Этот метод должен возвращать соответствующее "
"значение  Lisp\n"
"для использования внешнего значения.\n"
"</p>\n"
"<p>Результаты не определены, если параметр <code>type-name</code> "
"специализирован\n"
"каки-либо образом, кроме <small>EQL</small> специлизации для внешнего типа\n"
"определенного с помощью <code>defctype</code>.  В частности, преобразования "
"не могут \n"
"быть определены для встроенных типов.\n"
"</p>\n"
"<a name=\"See-Also-21\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#Foreign-Type-Translators\">Foreign Type Translators</a> <br>\n"
"<a href=\"#translate_002dto_002dforeign\">translate-to-foreign</a> <br>\n"
"<a href=\"#free_002dtranslated_002dobject\">free-translated-object</a>\n"
"</p>"

#: in/CFFI_User_Manual.htm:4291
msgid ""
"<hr>\n"
"<a name=\"translate_002dto_002dforeign\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#translate_002dinto_002dforeign_002dmemory\" accesskey=\"n\" "
"rel=\"next\">translate-into-foreign-memory</a>, Previous: <a href="
"\"#translate_002dfrom_002dforeign\" accesskey=\"p\" rel=\"prev\">translate-"
"from-foreign</a>, Up: <a href=\"#Foreign-Types\" accesskey=\"u\" rel=\"up"
"\">Foreign Types</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">translate-to-foreign</h4>\n"
"<a name=\"translate_002dto_002dforeign-1\"></a>\n"
"<h3 class=\"heading\">translate-to-foreign</h3>\n"
"<a name=\"Syntax-22\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-translate_002dto_002dforeign\"></a>Generic Function: "
"<strong>translate-to-foreign</strong> <em>lisp-value type-"
"name                                      ⇒ foreign-value, alloc-param</"
"em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4294
msgid ""
"<a name=\"Arguments-and-Values-22\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4313
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>lisp-value</var></dt>\n"
"<dd><p>The Lisp value to convert to foreign representation.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type-name</var></dt>\n"
"<dd><p>A symbol naming a foreign type defined by <code>defctype</code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>foreign-value</var></dt>\n"
"<dd><p>The foreign value to pass in place of <code>lisp-value</code> to "
"foreign code.\n"
"</p>\n"
"</dd>\n"
"<dt><var>alloc-param</var></dt>\n"
"<dd><p>If present, this value will be passed to\n"
"<code>free-translated-object</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4348
msgid ""
"<a name=\"Description-22\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>This generic function is invoked by <acronym>CFFI</acronym> to convert a "
"Lisp value to a\n"
"foreign value, such as when passing arguments to a foreign function,\n"
"returning a value from a callback, or setting a foreign variable.  A\n"
"âforeign valueâ is one appropriate for passing to the next-lowest\n"
"translator, including the low-level translators that are ultimately\n"
"invoked invisibly with <acronym>CFFI</acronym>.\n"
"</p>\n"
"<p>To extend the <acronym>CFFI</acronym> type system by performing custom "
"translations, this\n"
"method may be specialized by <small>EQL</small>-specializing <code>type-"
"name</code> on a\n"
"symbol naming a foreign type defined with <code>defctype</code>.  This\n"
"method should return the appropriate foreign value to use in place of\n"
"the Lisp value.\n"
"</p>\n"
"<p>In cases where <acronym>CFFI</acronym> can determine the lifetime of the "
"foreign object\n"
"returned by this method, it will invoke <code>free-translated-object</code>\n"
"on the foreign object at the appropriate time.  If\n"
"<code>translate-to-foreign</code> returns a second value, it will be passed\n"
"as the <code>param</code> argument to <code>free-translated-object</code>.  "
"This\n"
"can be used to establish communication between the allocation and\n"
"deallocation methods.\n"
"</p>\n"
"<p>The results are undefined if the <code>type-name</code> parameter is\n"
"specialized in any way except an <small>EQL</small> specializer on a foreign "
"type\n"
"defined with <code>defctype</code>.  Specifically, translations may not be\n"
"defined for built-in types.\n"
"</p>\n"
"<a name=\"See-Also-22\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#Foreign-Type-Translators\">Foreign Type Translators</a> <br>\n"
"<a href=\"#translate_002dfrom_002dforeign\">translate-from-foreign</a> <br>\n"
"<a href=\"#free_002dtranslated_002dobject\">free-translated-object</a>\n"
"</p>"
msgstr ""
"<a name=\"Description-22\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Эта обобщенная функция вызывается <acronym>CFFI</acronym> для "
"преобразования\n"
"значения Lisp во внешнее значение, например, при передаче аргументов во\n"
"внешнюю функцию, возврата значения из функции обратного вызова, или "
"установке \n"
"значения внешней переменной.  âВнешнее значение(foreign value)â это то,\n"
"которое подходит для передачи к следующему преобразователю более низкого "
"уровня,\n"
"включая преобразователей низкого уровня, которые в конечном итоге незаметно\n"
"вызываются в <acronym>CFFI</acronym>.\n"
"</p>\n"
"<p>Чтобы расширить систему типов <acronym>CFFI</acronym>, выполнением "
"пользовательских преобразований,\n"
"этот метод может быть специализирован по <small>EQL</small>-специлизирующему "
"имени типа(<code>type-name</code>)\n"
"для символа, обзначающего внешний тип, определенный с помощью "
"<code>defctype</code>.  Этот\n"
"метод дожен возвращать соответствующее значение для использования вместо "
"значения Lisp.\n"
"</p>\n"
"<p>в тех случаях, когда <acronym>CFFI</acronym> не может определить время "
"жизни внешнего\n"
"объекта, возвращаемого этим методом, он вызовет <code>free-translated-"
"object</code>\n"
"для внешнего объекта в соответствующее время.  Если <code>translate-to-"
"foreign</code> \n"
"возвращает второе значение, оно будет передано в качестве "
"аргумента(<code>param</code>) в\n"
"<code>free-translated-object</code>.  Он может быть использован для "
"установления связи\n"
"между методами выделения и освобождения памяти объекта.\n"
"</p>\n"
"<p>Результаты не определены, если параметр <code>type-name</code> "
"специализирован\n"
"каким-либо образом, кроме  <small>EQL</small> специлизатора для стороннего "
"типа\n"
"определенного с помощью <code>defctype</code>.  В частности, преобразователи "
"не могут\n"
"быть определены для встроенных типов.\n"
"</p>\n"
"<a name=\"See-Also-22\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#Foreign-Type-Translators\">Foreign Type Translators</a> <br>\n"
"<a href=\"#translate_002dfrom_002dforeign\">translate-from-foreign</a> <br>\n"
"<a href=\"#free_002dtranslated_002dobject\">free-translated-object</a>\n"
"</p>"

#: in/CFFI_User_Manual.htm:4364
msgid ""
"<hr>\n"
"<a name=\"translate_002dinto_002dforeign_002dmemory\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#with_002dforeign_002dslots\" accesskey=\"n\" rel=\"next"
"\">with-foreign-slots</a>, Previous: <a href=\"#translate_002dto_002dforeign"
"\" accesskey=\"p\" rel=\"prev\">translate-to-foreign</a>, Up: <a href="
"\"#Foreign-Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">translate-into-foreign-memory</h4>\n"
"<a name=\"translate_002dinto_002dforeign_002dmemory-1\"></a>\n"
"<h3 class=\"heading\">translate-into-foreign-memory</h3>\n"
"<a name=\"Syntax-23\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-translate_002dinto_002dforeign_002dmemory\"></a>Generic "
"Function: <strong>translate-into-foreign-memory</strong> <em>lisp-value type-"
"name pointer</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4367
msgid ""
"<a name=\"Arguments-and-Values-23\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4381
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>lisp-value</var></dt>\n"
"<dd><p>The Lisp value to convert to foreign representation.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type-name</var></dt>\n"
"<dd><p>A symbol or list <code>(:struct <var>structure-name</var>)</code> "
"naming a foreign type defined by <code>defctype</code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>pointer</var></dt>\n"
"<dd><p>The foreign pointer where the translated object should be stored.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4387
msgid ""
"<a name=\"Description-23\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Translate the Lisp value into the foreign memory location given by\n"
"pointer.  The return value is not used.\n"
"</p>"
msgstr ""
"<a name=\"Description-23\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Преобразует значение Lisp во внешнюю память, указанную указателем.  \n"
"Возвращаемое значение не используется.\n"
"</p>"

#: in/CFFI_User_Manual.htm:4402
msgid ""
"<hr>\n"
"<a name=\"with_002dforeign_002dslots\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#translate_002dinto_002dforeign_002dmemory\" accesskey="
"\"p\" rel=\"prev\">translate-into-foreign-memory</a>, Up: <a href=\"#Foreign-"
"Types\" accesskey=\"u\" rel=\"up\">Foreign Types</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<h4 class=\"node-heading\">with-foreign-slots</h4>\n"
"<a name=\"with_002dforeign_002dslots-1\"></a>\n"
"<h3 class=\"heading\">with-foreign-slots</h3>\n"
"<a name=\"Syntax-24\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-with_002dforeign_002dslots\"></a>Macro: <strong>with-"
"foreign-slots</strong> <em>(vars ptr type) &amp;body body</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4405
msgid ""
"<a name=\"Arguments-and-Values-24\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4424
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>vars</var></dt>\n"
"<dd><p>A list with each element a symbol, or list of length two with the\n"
"first element <code>:pointer</code> and the second a symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>A foreign pointer to a structure.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A structure type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>body</var></dt>\n"
"<dd><p>A list of forms to be executed.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4448
msgid ""
"<a name=\"Description-24\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>with-foreign-slots</code> macro creates local symbol macros for "
"each\n"
"var in <var>vars</var> to reference foreign slots in <var>ptr</var> of "
"<var>type</var>.\n"
"If the var is a list starting with <code>:pointer</code>, it will bind the\n"
"pointer to the slot (rather than the value). It is similar to Common\n"
"Lispâs <code>with-slots</code> macro.\n"
"</p>\n"
"<a name=\"Examples-20\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> tm\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">sec <span class=\"keyword"
"\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">min <span class=\"keyword"
"\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">hour <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">mday <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">mon  <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">year <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">wday <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">yday <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">isdst  <span class="
"\"keyword\">:boolean</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">zone   <span class="
"\"keyword\">:string</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">gmtoff <span class="
"\"keyword\">:long</span></span>)</span></span>)</span>"
msgstr ""
"<a name=\"Description-24\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>with-foreign-slots</code> создает символьные макросы для "
"каждой\n"
"переменной var из <var>vars</var> для ссылки на внешние слоты в <var>ptr</"
"var> \n"
"для типа <var>type</var>.\n"
"Если var это список, начинающийся с указателя <code>:pointer</code>, он "
"будет\n"
"привязывать этот указатель к слоту(а не значению). Он похож на макрос "
"Common\n"
"Lispâs <code>with-slots</code>.\n"
"</p>\n"
"<a name=\"Examples-20\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcstruct</span></i> tm\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">sec <span class=\"keyword"
"\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">min <span class=\"keyword"
"\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">hour <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">mday <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">mon  <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">year <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">wday <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">yday <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">isdst  <span class="
"\"keyword\">:boolean</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">zone   <span class="
"\"keyword\">:string</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">gmtoff <span class="
"\"keyword\">:long</span></span>)</span></span>)</span>"

#: in/CFFI_User_Manual.htm:4459
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-object</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\">time <span class=\"keyword\">:int</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">setf <span class="
"\"paren3\">(<span class=\"lisp-bg\">mem-ref time <span class=\"keyword\">:"
"int</span></span>)</span>\n"
"                <span class=\"paren3\">(<span class=\"lisp-bg\">foreign-"
"funcall <span class=\"string\">\"time\"</span> <span class=\"keyword\">:"
"pointer</span> <span class=\"paren4\">(<span class=\"lisp-bg\">null-pointer</"
"span>)</span> <span class=\"keyword\">:int</span></span>)</span></span>)</"
"span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-funcall "
"<span class=\"string\">\"gmtime\"</span> <span class=\"keyword\">:pointer</"
"span> time <span class=\"paren3\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:pointer</span> <span class=\"paren4\">(<span class=\"lisp-bg"
"\"><span class=\"keyword\">:struct</span> tm</span>)</span></span>)</span></"
"span>)</span></span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102A30&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-slots</span></i> <span class=\"paren2\">(<span class="
"\"lisp-bg\"><span class=\"paren3\">(<span class=\"lisp-bg\">sec min hour "
"mday mon year</span>)</span> * <span class=\"paren3\">(<span class=\"lisp-bg"
"\"><span class=\"keyword\">:struct</span> tm</span>)</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">format nil <span "
"class=\"string\">\"~A:~A:~A, ~A/~A/~A\"</span>\n"
"                  hour min sec <span class=\"paren3\">(<span class=\"lisp-bg"
"\">+ 1900 year</span>)</span> mon mday</span>)</span></span>)</span>\n"
" ⇒ \"7:22:47, 2005/8/2\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:4466
msgid ""
"<a name=\"See-Also-23\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcstruct\">defcstruct</a> <br>\n"
"<a href=\"#defcunion\">defcunion</a> <br>\n"
"<a href=\"#foreign_002dslot_002dvalue\">foreign-slot-value</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:4476
msgid ""
"<hr>\n"
"<a name=\"Pointers\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Strings\" accesskey=\"n\" rel=\"next\">Strings</a>, "
"Previous: <a href=\"#Foreign-Types\" accesskey=\"p\" rel=\"prev\">Foreign "
"Types</a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; "
"[<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Pointers-1\"></a>\n"
"<h2 class=\"chapter\">7 Pointers</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Pointers\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Strings\" accesskey=\"n\" rel=\"next\">Strings</a>, "
"Previous: <a href=\"#Foreign-Types\" accesskey=\"p\" rel=\"prev\">Foreign "
"Types</a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; "
"[<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Pointers-1\"></a>\n"
"<h2 class=\"chapter\">7 Указатели</h2>"

#: in/CFFI_User_Manual.htm:4505
msgid ""
"<p>All C data in <acronym>CFFI</acronym> is referenced through pointers.  "
"This includes\n"
"defined C variables that hold immediate values, and integers.\n"
"</p>\n"
"<p>To see why this is, consider the case of the C integer.  It is not\n"
"only an arbitrary representation for an integer, congruent to Lispâs\n"
"fixnums; the C integer has a specific bit pattern in memory defined by\n"
"the C <acronym>ABI</acronym>.  Lisp has no such constraint on its fixnums;\n"
"therefore, it only makes sense to think of fixnums as C integers if\n"
"you assume that <acronym>CFFI</acronym> converts them when necessary, such "
"as when\n"
"storing one for use in a C function call, or as the value of a C\n"
"variable.  This requires defining an area of memory<a name=\"DOCF11\" href="
"\"#FOOT11\"><sup>11</sup></a>,\n"
"represented through an effective address, and storing it there.\n"
"</p>\n"
"<p>Due to this compartmentalization, it only makes sense to manipulate\n"
"raw C data in Lisp through pointers to it.  For example, while there\n"
"may be a Lisp representation of a <code>struct</code> that is converted to "
"C\n"
"at store time, you may only manipulate its raw data through a pointer.\n"
"The C compiler does this also, albeit informally.\n"
"</p>\n"
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href=\"#Basic-Pointer-"
"Operations\" accesskey=\"1\">Basic Pointer Operations</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Allocating-Foreign-Memory"
"\" accesskey=\"2\">Allocating Foreign Memory</a>:</td><td>&nbsp;&nbsp;</"
"td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Accessing-Foreign-Memory"
"\" accesskey=\"3\">Accessing Foreign Memory</a>:</td><td>&nbsp;&nbsp;</"
"td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Dictionary"
msgstr ""
"<p>На все Си данные в <acronym>CFFI</acronym> ссылаются через "
"указатели(pointers).\n"
"Это включает в себя определённые переменные Си, которые содержат\n"
"непосредственные значения, и целые числа.\n"
"</p>\n"
"<p>Чтобы понять, почему это так, рассмотрим случай целого числа Си. Это не \n"
"только произвольное представление целого числа, совпадающее с Lisp "
"fixnums; \n"
"целое число Си(integer) имеет определенный битовый шаблон в памяти, "
"определенный\n"
"Си <acronym>ABI</acronym>.  Lisp не имеет такого ограничения на свои "
"fixnums;\n"
"поэтому имеет смысл думать о fixnums как о целых числах в Си, если вы "
"предполагаете\n"
"что <acronym>CFFI</acronym> преобразует их при необходимости, например при\n"
"сохранении для использования в вызове функии Си, или в качестве значения\n"
"переенной Си.  Для этого необходимо определить область памяти<a name="
"\"DOCF11\" href=\"#FOOT11\"><sup>11</sup></a>,\n"
"представленную через эффективный адрес, и сохранить его(значение) там.\n"
"</p>\n"
"<p>Из-за этого разделения имеет смысл манипулировать необработанными "
"данными\n"
"Си в Лиспе, только через указатели на них.  Например, хотя может "
"существовать\n"
"представление структруры(<code>struct</code>) Лисп, которое преобразуется в\n"
"Си во время хранения, вы можете манипулировать её необработанными данными\n"
"только через указатель. Компилятор Си делает это также, хотя и неформально.\n"
"</p>\n"
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href=\"#Basic-Pointer-"
"Operations\" accesskey=\"1\">Basic Pointer Operations</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Allocating-Foreign-Memory"
"\" accesskey=\"2\">Allocating Foreign Memory</a>:</td><td>&nbsp;&nbsp;</"
"td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Accessing-Foreign-Memory"
"\" accesskey=\"3\">Accessing Foreign Memory</a>:</td><td>&nbsp;&nbsp;</"
"td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Dictionary"

#: in/CFFI_User_Manual.htm:4541
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dfree\" accesskey=\"4\">foreign-free</a>:</td><td>&nbsp;&nbsp;"
"</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#foreign_002dalloc\" "
"accesskey=\"5\">foreign-alloc</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top"
"\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dsymbol_002dpointer\" accesskey=\"6\">foreign-symbol-pointer</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#inc_002dpointer\" "
"accesskey=\"7\">inc-pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#incf_002dpointer\" "
"accesskey=\"8\">incf-pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top"
"\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#make_002dpointer\" "
"accesskey=\"9\">make-pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top"
"\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#mem_002daptr\">mem-aptr</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#mem_002daref\">mem-aref</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#mem_002dref\">mem-ref</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#null_002dpointer\">null-"
"pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#null_002dpointer_002dp"
"\">null-pointer-p</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#pointerp\">pointerp</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#pointer_002daddress"
"\">pointer-address</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#pointer_002deq\">pointer-"
"eq</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dobject\">with-foreign-object</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dobjects\">with-foreign-objects</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dpointer\">with-foreign-pointer</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"</tbody></table>"
msgstr ""

#: in/CFFI_User_Manual.htm:4550
msgid ""
"<hr>\n"
"<a name=\"Basic-Pointer-Operations\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Allocating-Foreign-Memory\" accesskey=\"n\" rel=\"next"
"\">Allocating Foreign Memory</a>, Previous: <a href=\"#Pointers\" accesskey="
"\"p\" rel=\"prev\">Pointers</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" "
"rel=\"up\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Basic-Pointer-Operations-1\"></a>\n"
"<h3 class=\"section\">7.1 Basic Pointer Operations</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Basic-Pointer-Operations\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Allocating-Foreign-Memory\" accesskey=\"n\" rel=\"next"
"\">Allocating Foreign Memory</a>, Previous: <a href=\"#Pointers\" accesskey="
"\"p\" rel=\"prev\">Pointers</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" "
"rel=\"up\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Basic-Pointer-Operations-1\"></a>\n"
"<h3 class=\"section\">7.1 Базовые операции с указателями</h3>"

#: in/CFFI_User_Manual.htm:4563
msgid ""
"<p>Manipulating pointers proper can be accomplished through most of the\n"
"other operations defined in the Pointers dictionary, such as\n"
"<code>make-pointer</code>, <code>pointer-address</code>, and <code>pointer-"
"eq</code>.\n"
"When using them, keep in mind that they merely manipulate the Lisp\n"
"representation of pointers, not the values they point to.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dpointer\"></a>Lisp Type: <strong>foreign-"
"pointer</strong></dt>\n"
"<dd><p>The pointersâ representations differ from implementation to\n"
"implementation and have different types.  <code>foreign-pointer</code>\n"
"provides a portable type alias to each of these types.\n"
"</p></dd></dl>"
msgstr ""
"<p>Правильно манипулировать указателями можно с помощью большинства\n"
"других операций определенныхй в словаре указателей(Pointers dictionary),\n"
"таких как <code>make-pointer</code>, <code>pointer-address</code>, и "
"<code>pointer-eq</code>.\n"
"При их использовании имейте в виду, что они просто манипулируют "
"представлением\n"
"указателей в Lisp, а не значениями, на которые они указывают.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dpointer\"></a>Тип Lisp: <strong>foreign-"
"pointer</strong></dt>\n"
"<dd><p>Представления указателей различаются от реализации к реализации и "
"имеют\n"
"разные типы.  <code>foreign-pointer</code> представляет псевдоним\n"
"переносимого типа каждому из этих типов.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:4573
msgid ""
"<hr>\n"
"<a name=\"Allocating-Foreign-Memory\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Accessing-Foreign-Memory\" accesskey=\"n\" rel=\"next"
"\">Accessing Foreign Memory</a>, Previous: <a href=\"#Basic-Pointer-"
"Operations\" accesskey=\"p\" rel=\"prev\">Basic Pointer Operations</a>, Up: "
"<a href=\"#Pointers\" accesskey=\"u\" rel=\"up\">Pointers</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Allocating-Foreign-Memory-1\"></a>\n"
"<h3 class=\"section\">7.2 Allocating Foreign Memory</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Allocating-Foreign-Memory\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Accessing-Foreign-Memory\" accesskey=\"n\" rel=\"next"
"\">Accessing Foreign Memory</a>, Previous: <a href=\"#Basic-Pointer-"
"Operations\" accesskey=\"p\" rel=\"prev\">Basic Pointer Operations</a>, Up: "
"<a href=\"#Pointers\" accesskey=\"u\" rel=\"up\">Pointers</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Allocating-Foreign-Memory-1\"></a>\n"
"<h3 class=\"section\">7.2 Выделение внешней памяти</h3>"

#: in/CFFI_User_Manual.htm:4585
msgid ""
"<p><acronym>CFFI</acronym> provides support for stack and heap C memory "
"allocation.\n"
"Stack allocation, done with <code>with-foreign-object</code>, is sometimes\n"
"called âdynamicâ allocation in Lisp, because memory allocated as\n"
"such has dynamic extent, much as with <code>let</code> bindings of special\n"
"variables.\n"
"</p>\n"
"<p>This should not be confused with what C calls âdynamicâ allocation,\n"
"or that done with <code>malloc</code> and friends.  This sort of heap\n"
"allocation is done with <code>foreign-alloc</code>, creating objects that\n"
"exist until freed with <code>foreign-free</code>.\n"
"</p>"
msgstr ""
"<p><acronym>CFFI</acronym> обеспечивает поддержку выделение памяти для\n"
"стека и Си кучи(heap). Выделение памяти из стека, выполняемое с помощью\n"
" <code>with-foreign-object</code>, иногда назвается âдинамическим(dynamic)â\n"
"распределением в Lisp, потому что память выделенная таким образом, имеет\n"
"димнаическую протяженность существования(dynamic extent), почти как с\n"
"привязками <code>let</code> специальных переменных.\n"
"</p>\n"
"<p>Её не следует путать с тем, что в Си называется âдинамическим(dynamic  "
"allocation)â\n"
"выделением памяти, или тем, что делается с помощью <code>malloc</code> \n"
"и её друзей.  Такого рода выделение из кучи выполняется с помощью\n"
" <code>foreign-alloc</code>, создающей объекты, которые существуют пока\n"
"не будут освобождены с помощью <code>foreign-free</code>.\n"
"</p>"

#: in/CFFI_User_Manual.htm:4594
msgid ""
"<hr>\n"
"<a name=\"Accessing-Foreign-Memory\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dfree\" accesskey=\"n\" rel=\"next\">foreign-"
"free</a>, Previous: <a href=\"#Allocating-Foreign-Memory\" accesskey=\"p\" "
"rel=\"prev\">Allocating Foreign Memory</a>, Up: <a href=\"#Pointers\" "
"accesskey=\"u\" rel=\"up\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Accessing-Foreign-Memory-1\"></a>\n"
"<h3 class=\"section\">7.3 Accessing Foreign Memory</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Accessing-Foreign-Memory\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dfree\" accesskey=\"n\" rel=\"next\">foreign-"
"free</a>, Previous: <a href=\"#Allocating-Foreign-Memory\" accesskey=\"p\" "
"rel=\"prev\">Allocating Foreign Memory</a>, Up: <a href=\"#Pointers\" "
"accesskey=\"u\" rel=\"up\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Accessing-Foreign-Memory-1\"></a>\n"
"<h3 class=\"section\">7.3 Доступ к внешней памяти</h3>"

#: in/CFFI_User_Manual.htm:4611
msgid ""
"<p>When manipulating raw C data, consider that all pointers are pointing\n"
"to an array.  When you only want one C value, such as a single\n"
"<code>struct</code>, this array only has one such value.  It is worthwhile\n"
"to remember that everything is an array, though, because this is also\n"
"the semantic that C imposes natively.\n"
"</p>\n"
"<p>C values are accessed as the <code>setf</code>-able places defined by\n"
"<code>mem-aref</code> and <code>mem-ref</code>.  Given a pointer and a "
"<acronym>CFFI</acronym>\n"
"type (see <a href=\"#Foreign-Types\">Foreign Types</a>), either of these "
"will dereference the\n"
"pointer, translate the C data there back to Lisp, and return the\n"
"result of said translation, performing the reverse operation when\n"
"<code>setf</code>-ing.  To decide which one to use, consider whether you\n"
"would use the array index operator <code>[<var>n</var>]</code> or the "
"pointer\n"
"dereference <code>*</code> in C; use <code>mem-aref</code> for array "
"indexing and\n"
"<code>mem-ref</code> for pointer dereferencing.\n"
"</p>"
msgstr ""
"<p>При манипулировании необработанным данными Си, учитывайте, что все \n"
"укзатели указывают на массив.  когда вам необходимо только одно Си "
"значение.,\n"
"например одиночная структура(<code>struct</code>), этот массив имеет только\n"
"одно такое значение. Стоит помнить, что всё является массивом, потому что\n"
"это таже семантика, которую Си навязывает изначально.\n"
"</p>\n"
"<p>Доступ к значениям Си осуществляется как  <code>setf</code>-доступных "
"мест определенных\n"
"с помощью <code>mem-aref</code> и <code>mem-ref</code>.  При наличии "
"указателя и\n"
"типа <acronym>CFFI</acronym> (см. <a href=\"#Foreign-Types\">Внешние типы</"
"a>), любой из\n"
"них разименует указатель, преобразуя данные Си обратно в Lisp, и возвращая\n"
"результат указанного преобразования, выполняя обратную операцию при\n"
"<code>setf</code>(установке значения).  Чтобы решить, какой из них "
"использовать,\n"
"подумайте, будете ли вы использовать оператор индекса массива <code>[<var>n</"
"var>]</code> \n"
"или разыменовывание указателя <code>*</code> в Си; Используйте <code>mem-"
"aref</code> \n"
"для индексированных массивов и <code>mem-ref</code> для разыменовывания "
"указателя.\n"
"</p>"

#: in/CFFI_User_Manual.htm:4627
msgid ""
"<hr>\n"
"<a name=\"foreign_002dfree\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dalloc\" accesskey=\"n\" rel=\"next\">foreign-"
"alloc</a>, Previous: <a href=\"#Accessing-Foreign-Memory\" accesskey=\"p\" "
"rel=\"prev\">Accessing Foreign Memory</a>, Up: <a href=\"#Pointers\" "
"accesskey=\"u\" rel=\"up\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-free</h4>\n"
"<a name=\"foreign_002dfree-1\"></a>\n"
"<h3 class=\"heading\">foreign-free</h3>\n"
"<a name=\"Syntax-25\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dfree\"></a>Function: <strong>foreign-free</"
"strong> <em>ptr⇒ undefined</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4630
msgid ""
"<a name=\"Arguments-and-Values-25\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4636
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4645
msgid ""
"<a name=\"Description-25\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>foreign-free</code> function frees a <code>ptr</code> "
"previously\n"
"allocated by <code>foreign-alloc</code>. The consequences of freeing a "
"given\n"
"pointer twice are undefined.\n"
"</p>\n"
"<a name=\"Examples-21\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-25\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-free</code> освобождает память указываемую "
"<code>ptr</code> \n"
"ранее выделенную  <code>foreign-alloc</code>. Последствия освобождения "
"данного указателя\n"
"выполненые дважды не определены.\n"
"</p>\n"
"<a name=\"Examples-21\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:4652
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-alloc <span class=\"keyword\">:int</span></span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x1022E0&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-free *</"
"span>)</span>\n"
" ⇒ NIL\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:4658
msgid ""
"<a name=\"See-Also-24\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dalloc\">foreign-alloc</a> <br>\n"
"<a href=\"#with_002dforeign_002dpointer\">with-foreign-pointer</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:4674
msgid ""
"<hr>\n"
"<a name=\"foreign_002dalloc\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dsymbol_002dpointer\" accesskey=\"n\" rel=\"next"
"\">foreign-symbol-pointer</a>, Previous: <a href=\"#foreign_002dfree\" "
"accesskey=\"p\" rel=\"prev\">foreign-free</a>, Up: <a href=\"#Pointers\" "
"accesskey=\"u\" rel=\"up\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-alloc</h4>\n"
"<a name=\"foreign_002dalloc-1\"></a>\n"
"<h3 class=\"heading\">foreign-alloc</h3>\n"
"<a name=\"Syntax-26\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dalloc\"></a>Function: <strong>foreign-alloc</"
"strong> <em>type &amp;key initial-element initial-contents (count "
"1)                         null-terminated-p⇒ pointer</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4677
msgid ""
"<a name=\"Arguments-and-Values-26\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4704
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>initial-element</var></dt>\n"
"<dd><p>A Lisp object.\n"
"</p>\n"
"</dd>\n"
"<dt><var>initial-contents</var></dt>\n"
"<dd><p>A sequence.\n"
"</p>\n"
"</dd>\n"
"<dt><var>count</var></dt>\n"
"<dd><p>An integer. Defaults to 1 or the length of <var>initial-contents</"
"var> if\n"
"supplied.\n"
"</p>\n"
"</dd>\n"
"<dt><var>null-terminated-p</var></dt>\n"
"<dd><p>A boolean, false by default.\n"
"</p>\n"
"</dd>\n"
"<dt><var>pointer</var></dt>\n"
"<dd><p>A foreign pointer to the newly allocated memory.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4737
msgid ""
"<a name=\"Description-26\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>foreign-alloc</code> function allocates enough memory to hold\n"
"<var>count</var> objects of type <var>type</var> and returns a\n"
"<var>pointer</var>. This memory must be explicitly freed using\n"
"<code>foreign-free</code> once it is no longer needed.\n"
"</p>\n"
"<p>If <var>initial-element</var> is supplied, it is used to initialize the\n"
"<var>count</var> objects the newly allocated memory holds.\n"
"</p>\n"
"<p>If an <var>initial-contents</var> sequence is supplied, it must have a\n"
"length less than or equal to <var>count</var> and each of its elements\n"
"will be used to initialize the contents of the newly allocated\n"
"memory.\n"
"</p>\n"
"<p>If <var>count</var> is omitted and <var>initial-contents</var> is "
"specified, it\n"
"will default to <code>(length <var>initial-contents</var>)</code>.\n"
"</p>\n"
"<p><var>initial-element</var> and <var>initial-contents</var> are mutually\n"
"exclusive.\n"
"</p>\n"
"<p>When <var>null-terminated-p</var> is true,\n"
"<code>(1+ (max <var>count</var> (length <var>initial-contents</var>)))</"
"code> elements\n"
"are allocated and the last one is set to <code>NULL</code>. Note that in\n"
"this case <var>type</var> must be a pointer type (ie. a type that\n"
"canonicalizes to <code>:pointer</code>), otherwise an error is signaled.\n"
"</p>\n"
"<a name=\"Examples-22\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-alloc <span class=\"keyword\">:char</span></span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102D80&gt;     ; A pointer to 1 byte of memory."
msgstr ""
"<a name=\"Description-26\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-alloc</code> выделяет необходимую память для "
"хранения\n"
"<var>count</var> объектов типа(<var>type</var>) и возвращает\n"
"указатель(<var>pointer</var>). Эта память должна быть явно освобождена\n"
"с использованием <code>foreign-free</code>, если она более не требуется.\n"
"</p>\n"
"<p>Если указан <var>initial-element</var>, он использууется для "
"инициализации\n"
"<var>count</var> объектов, которые содержит вновь выделенная память.\n"
"</p>\n"
"<p>Если указан <var>initial-contents</var>, он должен иметь длину меньшую "
"или\n"
"равную <var>count</var> и каждый его элемент будет использоваться для \n"
"инициализации содержимого вновь выделенной памяти.\n"
"</p>\n"
"<p>Если <var>count</var> опущен, а <var>initial-contents</var> указан, по\n"
"умолчанию используется длина <code>(length <var>initial-contents</var>)</"
"code>.\n"
"</p>\n"
"<p><var>initial-element</var> и <var>initial-contents</var> являются "
"взаимоисключающими\n"
"праметрами.\n"
"</p>\n"
"<p>Когда <var>null-terminated-p</var> равно true,\n"
"Элементы <code>(1+ (max <var>count</var> (length <var>initial-contents</"
"var>)))</code> \n"
"размещаются, а последний устанавливается в ноль(<code>NULL</code>). Обратите "
"внимаение,\n"
"что в этом случае типом(<var>type</var>) должен быть тип указателя (т.е. тип "
"который\n"
"канонизируется(приводиться) к <code>:pointer</code>), oв противном случае "
"сообщается\n"
"об ошибке.\n"
"</p>\n"
"<a name=\"Examples-22\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-alloc <span class=\"keyword\">:char</span></span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102D80&gt;     ; A pointer to 1 byte of memory."

#: in/CFFI_User_Manual.htm:4740
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-alloc "
"<span class=\"keyword\">:char</span> <span class=\"keyword\">:count</span> "
"20</span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x1024A0&gt;     ; A pointer to 20 bytes of memory."
msgstr ""

#: in/CFFI_User_Manual.htm:4745
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-alloc "
"<span class=\"keyword\">:int</span> <span class=\"keyword\">:initial-"
"element</span> 12</span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x1028B0&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">mem-ref * <span "
"class=\"keyword\">:int</span></span>)</span>\n"
" ⇒ 12"
msgstr ""

#: in/CFFI_User_Manual.htm:4751
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-alloc "
"<span class=\"keyword\">:int</span> <span class=\"keyword\">:initial-"
"contents</span> '<span class=\"paren2\">(<span class=\"lisp-bg\">1 2 3</"
"span>)</span></span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102950&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">loop</span></i> for i from 0 below 3\n"
"              collect <span class=\"paren2\">(<span class=\"lisp-bg\">mem-"
"aref * <span class=\"keyword\">:int</span> i</span>)</span></span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\">1 2 3</span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:4757
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-alloc "
"<span class=\"keyword\">:int</span> <span class=\"keyword\">:initial-"
"contents</span> #<span class=\"paren2\">(<span class=\"lisp-bg\">1 2 3</"
"span>)</span></span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102960&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">loop</span></i> for i from 0 below 3\n"
"              collect <span class=\"paren2\">(<span class=\"lisp-bg\">mem-"
"aref * <span class=\"keyword\">:int</span> i</span>)</span></span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\">1 2 3</span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:4763
msgid ""
"  <span class=\"comment\">;;; Allocate a char** pointer that points to newly "
"allocated memory\n"
"  </span><span class=\"comment\">;;; by the :string type translator for the "
"string \"foo\".\n"
"  </span>CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-"
"alloc <span class=\"keyword\">:string</span> <span class=\"keyword\">:"
"initial-element</span> <span class=\"string\">\"foo\"</span></span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102C40&gt;\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:4780
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; Allocate a null-terminated "
"array of strings.\n"
"  </span><span class=\"comment\">;;; (Note: FOREIGN-STRING-TO-LISP returns "
"NIL when passed a null pointer)\n"
"  </span>CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-"
"alloc <span class=\"keyword\">:string</span>\n"
"                       <span class=\"keyword\">:initial-contents</span> "
"'<span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"string\">\"foo"
"\"</span> <span class=\"string\">\"bar\"</span> <span class=\"string\">\"baz"
"\"</span></span>)</span>\n"
"                       <span class=\"keyword\">:null-terminated-p</span> t</"
"span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102D20&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">loop</span></i> for i from 0 below 4\n"
"              collect <span class=\"paren2\">(<span class=\"lisp-bg\">mem-"
"aref * <span class=\"keyword\">:string</span> i</span>)</span></span>)</"
"span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\"><span class=\"string\">"
"\"foo\"</span> <span class=\"string\">\"bar\"</span> <span class=\"string\">"
"\"baz\"</span> NIL</span>)</span>\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">progn</span></i>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">dotimes <span "
"class=\"paren3\">(<span class=\"lisp-bg\">i 3</span>)</span>\n"
"            <span class=\"paren3\">(<span class=\"lisp-bg\">foreign-free "
"<span class=\"paren4\">(<span class=\"lisp-bg\">mem-aref ** <span class="
"\"keyword\">:pointer</span> i</span>)</span></span>)</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-free **</"
"span>)</span></span>)</span>\n"
" ⇒ nil\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:4787
msgid ""
"<a name=\"See-Also-25\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dfree\">foreign-free</a> <br>\n"
"<a href=\"#with_002dforeign_002dobject\">with-foreign-object</a> <br>\n"
"<a href=\"#with_002dforeign_002dpointer\">with-foreign-pointer</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:4803
msgid ""
"<hr>\n"
"<a name=\"foreign_002dsymbol_002dpointer\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#inc_002dpointer\" accesskey=\"n\" rel=\"next\">inc-pointer</"
"a>, Previous: <a href=\"#foreign_002dalloc\" accesskey=\"p\" rel=\"prev"
"\">foreign-alloc</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" rel=\"up"
"\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-symbol-pointer</h4>\n"
"<a name=\"foreign_002dsymbol_002dpointer-1\"></a>\n"
"<h3 class=\"heading\">foreign-symbol-pointer</h3>\n"
"<a name=\"Syntax-27\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dsymbol_002dpointer\"></a>Function: "
"<strong>foreign-symbol-pointer</strong> <em>foreign-name &amp;key library⇒ "
"pointer</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4806
msgid ""
"<a name=\"Arguments-and-Values-27\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4820
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>foreign-name</var></dt>\n"
"<dd><p>A string.\n"
"</p>\n"
"</dd>\n"
"<dt><var>pointer</var></dt>\n"
"<dd><p>A foreign pointer, or <code>nil</code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>library</var></dt>\n"
"<dd><p>A Lisp symbol or an instance of <code>foreign-library</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4842
msgid ""
"<a name=\"Description-27\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>foreign-symbol-pointer</code> will return a foreign\n"
"pointer corresponding to the foreign symbol denoted by the string\n"
"<var>foreign-name</var>.  If a foreign symbol named <var>foreign-name</var>\n"
"doesnât exist, <code>nil</code> is returned.\n"
"</p>\n"
"<p>ABI name manglings will be performed on <var>foreign-name</var> by\n"
"<code>foreign-symbol-pointer</code> if necessary. (eg: adding a leading\n"
"underscore on darwin/ppc)\n"
"</p>\n"
"<p><var>library</var> should name a foreign library as defined by\n"
"<code>define-foreign-library</code>, <code>:default</code> (which is the "
"default)\n"
"or an instance of <code>foreign-library</code> as returned by\n"
"<code>load-foreign-library</code>.\n"
"</p>\n"
"<p><strong>Important note:</strong> do not keep these pointers across saved "
"Lisp\n"
"cores as the foreign-library may move across sessions.\n"
"</p>\n"
"<a name=\"Examples-23\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-27\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-symbol-pointer</code> вернет внешний указатель\n"
"соответствующий внешнему символу, обозначенному строкой\n"
"<var>foreign-name</var>.  Если внешний символ с именем <var>foreign-name</"
"var>\n"
"не существует, возвращается <code>nil</code>.\n"
"</p>\n"
"<p>Искажение ABI имени будет выполняться на <var>foreign-name</var> \n"
"с помощью <code>foreign-symbol-pointer</code>, если это необходимо. \n"
"(например: добавление нижнего подчеркивания на darwin/ppc)\n"
"</p>\n"
"<p><var>library</var> должна  именовать внешнюю библиотеку в соответствии с\n"
"определением <code>define-foreign-library</code>, <code>:default</code> "
"(которое является\n"
"значением по умолчанию) или экземпляром <code>foreign-library</code>, "
"возвращаемым\n"
"функцией <code>load-foreign-library</code>.\n"
"</p>\n"
"<p><strong>Важное примечание:</strong> не храните указатели в сохраненных "
"ядрах Lisp,\n"
"так как внешняя библиотека(foreign-library) может быть перемещена между "
"сеансами.\n"
"</p>\n"
"<a name=\"Examples-23\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:4850
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-symbol-pointer <span class=\"string\">\"errno\"</span></span>)</"
"span>\n"
" ⇒ #&lt;A Mac Pointer #xA0008130&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-symbol-"
"pointer <span class=\"string\">\"strerror\"</span></span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x9002D0F8&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-funcall-"
"pointer * <span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span> "
"<span class=\"keyword\">:int</span> <span class=\"paren2\">(<span class="
"\"lisp-bg\">mem-ref ** <span class=\"keyword\">:int</span></span>)</span> "
"<span class=\"keyword\">:string</span></span>)</span>\n"
" ⇒ \"No such file or directory\""
msgstr ""

#: in/CFFI_User_Manual.htm:4854
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-symbol-"
"pointer <span class=\"string\">\"inexistent symbol\"</span></span>)</span>\n"
" ⇒ NIL\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:4859
msgid ""
"<a name=\"See-Also-26\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcvar\">defcvar</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:4875
msgid ""
"<hr>\n"
"<a name=\"inc_002dpointer\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#incf_002dpointer\" accesskey=\"n\" rel=\"next\">incf-"
"pointer</a>, Previous: <a href=\"#foreign_002dsymbol_002dpointer\" accesskey="
"\"p\" rel=\"prev\">foreign-symbol-pointer</a>, Up: <a href=\"#Pointers\" "
"accesskey=\"u\" rel=\"up\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">inc-pointer</h4>\n"
"<a name=\"inc_002dpointer-1\"></a>\n"
"<h3 class=\"heading\">inc-pointer</h3>\n"
"<a name=\"Syntax-28\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-inc_002dpointer\"></a>Function: <strong>inc-pointer</"
"strong> <em>pointer offset⇒ new-pointer</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4878
msgid ""
"<a name=\"Arguments-and-Values-28\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4889
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>pointer</var></dt>\n"
"<dt><var>new-pointer</var></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>offset</var></dt>\n"
"<dd><p>An integer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4897
msgid ""
"<a name=\"Description-28\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>inc-pointer</code> will return a <var>new-pointer</"
"var> pointing\n"
"<var>offset</var> bytes past <var>pointer</var>.\n"
"</p>\n"
"<a name=\"Examples-24\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-28\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>inc-pointer</code> будет возвращаеть новый указатель "
"<var>new-pointer</var> \n"
"указывающий на смещенние на <var>offset</var> байт за указателем "
"<var>pointer</var>.\n"
"</p>\n"
"<a name=\"Examples-24\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:4906
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-string-alloc <span class=\"string\">\"Common Lisp\"</span></"
"span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102EA0&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">inc-pointer * 7</"
"span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102EA7&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-string-to-"
"lisp *</span>)</span>\n"
" ⇒ \"Lisp\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:4915
msgid ""
"<a name=\"See-Also-27\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#incf_002dpointer\">incf-pointer</a> <br>\n"
"<a href=\"#make_002dpointer\">make-pointer</a> <br>\n"
"<a href=\"#pointerp\">pointerp</a> <br>\n"
"<a href=\"#null_002dpointer\">null-pointer</a> <br>\n"
"<a href=\"#null_002dpointer_002dp\">null-pointer-p</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:4931
msgid ""
"<hr>\n"
"<a name=\"incf_002dpointer\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#make_002dpointer\" accesskey=\"n\" rel=\"next\">make-"
"pointer</a>, Previous: <a href=\"#inc_002dpointer\" accesskey=\"p\" rel="
"\"prev\">inc-pointer</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" rel=\"up"
"\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">incf-pointer</h4>\n"
"<a name=\"incf_002dpointer-1\"></a>\n"
"<h3 class=\"heading\">incf-pointer</h3>\n"
"<a name=\"Syntax-29\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-incf_002dpointer\"></a>Macro: <strong>incf-pointer</"
"strong> <em>place &amp;optional (offset 1)⇒ new-pointer</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4934
msgid ""
"<a name=\"Arguments-and-Values-29\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:4948
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>place</var></dt>\n"
"<dd><p>A <code>setf</code> place.\n"
"</p>\n"
"</dd>\n"
"<dt><var>new-pointer</var></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>offset</var></dt>\n"
"<dd><p>An integer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4957
msgid ""
"<a name=\"Description-29\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>incf-pointer</code> macro takes the foreign pointer from\n"
"<var>place</var> and creates a <var>new-pointer</var> incremented by\n"
"<var>offset</var> bytes and which is stored in <var>place</var>.\n"
"</p>\n"
"<a name=\"Examples-25\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-29\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>incf-pointer</code> берет внешний указатель из\n"
"<var>place</var> и создает новый указатель <var>new-pointer</var>,\n"
"величенный на <var>offset</var> байтов и сохраняет его обратно в <var>place</"
"var>.\n"
"</p>\n"
"<a name=\"Examples-25\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:4970
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defparameter</span></i> <span class=\"special"
"\">*two-words*</span> <span class=\"paren2\">(<span class=\"lisp-bg"
"\">foreign-string-alloc <span class=\"string\">\"Common Lisp\"</span></"
"span>)</span></span>)</span>\n"
" ⇒ *TWO-WORDS*\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defparameter</span></i> <span class=\"special\">*one-word*</span> "
"<span class=\"special\">*two-words*</span></span>)</span>\n"
" ⇒ *ONE-WORD*\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">incf-pointer "
"<span class=\"special\">*one-word*</span> 7</span>)</span>\n"
" ⇒ #.<span class=\"paren1\">(<span class=\"lisp-bg\">SB-SYS:INT-SAP "
"#X00600457</span>)</span>\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-string-to-"
"lisp <span class=\"special\">*one-word*</span></span>)</span>\n"
" ⇒ \"Lisp\"\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-string-to-"
"lisp <span class=\"special\">*two-words*</span></span>)</span>\n"
" ⇒ \"Common Lisp\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:4979
msgid ""
"<a name=\"See-Also-28\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#inc_002dpointer\">inc-pointer</a> <br>\n"
"<a href=\"#make_002dpointer\">make-pointer</a> <br>\n"
"<a href=\"#pointerp\">pointerp</a> <br>\n"
"<a href=\"#null_002dpointer\">null-pointer</a> <br>\n"
"<a href=\"#null_002dpointer_002dp\">null-pointer-p</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:4995
msgid ""
"<hr>\n"
"<a name=\"make_002dpointer\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#mem_002daptr\" accesskey=\"n\" rel=\"next\">mem-aptr</a>, "
"Previous: <a href=\"#incf_002dpointer\" accesskey=\"p\" rel=\"prev\">incf-"
"pointer</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" rel=\"up\">Pointers</"
"a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel="
"\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" "
"rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">make-pointer</h4>\n"
"<a name=\"make_002dpointer-1\"></a>\n"
"<h3 class=\"heading\">make-pointer</h3>\n"
"<a name=\"Syntax-30\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-make_002dpointer\"></a>Function: <strong>make-pointer</"
"strong> <em>address⇒ ptr</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:4998
msgid ""
"<a name=\"Arguments-and-Values-30\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5008
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>address</var></dt>\n"
"<dd><p>An integer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5016
msgid ""
"<a name=\"Description-30\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>make-pointer</code> will return a foreign pointer\n"
"pointing to <var>address</var>.\n"
"</p>\n"
"<a name=\"Examples-26\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-30\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>make-pointer</code> вернет внешний указатель, указывающий\n"
"на адрес <var>address</var>.\n"
"</p>\n"
"<a name=\"Examples-26\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5031
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">make-pointer 42</span>)</span>\n"
" ⇒ #&lt;FOREIGN-ADDRESS #x0000002A&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">pointerp *</"
"span>)</span>\n"
" ⇒ T\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">pointer-address "
"**</span>)</span>\n"
" ⇒ 42\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">inc-pointer <span "
"class=\"special\">***</span> -42</span>)</span>\n"
" ⇒ #&lt;FOREIGN-ADDRESS #x00000000&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">null-pointer-p *</"
"span>)</span>\n"
" ⇒ T\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">typep ** 'foreign-"
"pointer</span>)</span>\n"
" ⇒ T\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5042
msgid ""
"<a name=\"See-Also-29\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#inc_002dpointer\">inc-pointer</a> <br>\n"
"<a href=\"#null_002dpointer\">null-pointer</a> <br>\n"
"<a href=\"#null_002dpointer_002dp\">null-pointer-p</a> <br>\n"
"<a href=\"#pointerp\">pointerp</a> <br>\n"
"<a href=\"#pointer_002daddress\">pointer-address</a> <br>\n"
"<a href=\"#pointer_002deq\">pointer-eq</a> <br>\n"
"<a href=\"#mem_002dref\">mem-ref</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5058
msgid ""
"<hr>\n"
"<a name=\"mem_002daptr\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#mem_002daref\" accesskey=\"n\" rel=\"next\">mem-aref</a>, "
"Previous: <a href=\"#make_002dpointer\" accesskey=\"p\" rel=\"prev\">make-"
"pointer</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" rel=\"up\">Pointers</"
"a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel="
"\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" "
"rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">mem-aptr</h4>\n"
"<a name=\"mem_002daptr-1\"></a>\n"
"<h3 class=\"heading\">mem-aptr</h3>\n"
"<a name=\"Syntax-31\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-mem_002daptr\"></a>Accessor: <strong>mem-aptr</strong> "
"<em>ptr type &amp;optional (index 0)</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5061
msgid ""
"<a name=\"Arguments-and-Values-31\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5079
msgctxt "in/CFFI_User_Manual.htm:5079"
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>index</var></dt>\n"
"<dd><p>An integer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>new-value</var></dt>\n"
"<dd><p>A Lisp value compatible with <var>type</var>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5086
msgid ""
"<a name=\"Description-31\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>mem-aptr</code> function finds the pointer to an element of the "
"array.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">mem-"
"aptr ptr type n</span>)</span>"
msgstr ""
"<a name=\"Description-31\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>mem-aptr</code> находит указатель на элемент массива.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">mem-"
"aptr ptr type n</span>)</span>"

#: in/CFFI_User_Manual.htm:5091
msgid ""
"  <span class=\"comment\">;; is identical to:\n"
"  </span> \n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">inc-pointer ptr <span "
"class=\"paren2\">(<span class=\"lisp-bg\">* n <span class=\"paren3\">(<span "
"class=\"lisp-bg\">foreign-type-size type</span>)</span></span>)</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5094
msgid ""
"<a name=\"Examples-27\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5100
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">with-foreign-string</span></i> <span class="
"\"paren2\">(<span class=\"lisp-bg\">str <span class=\"string\">\"Hello, "
"foreign world!\"</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">mem-aptr str <span "
"class=\"keyword\">:char</span> 6</span>)</span></span>)</span>\n"
" ⇒ #.<span class=\"paren1\">(<span class=\"lisp-bg\">SB-SYS:INT-SAP "
"#X0063D4B6</span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5116
msgid ""
"<hr>\n"
"<a name=\"mem_002daref\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#mem_002dref\" accesskey=\"n\" rel=\"next\">mem-ref</a>, "
"Previous: <a href=\"#mem_002daptr\" accesskey=\"p\" rel=\"prev\">mem-aptr</"
"a>, Up: <a href=\"#Pointers\" accesskey=\"u\" rel=\"up\">Pointers</a> &nbsp; "
"[<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">mem-aref</h4>\n"
"<a name=\"mem_002daref-1\"></a>\n"
"<h3 class=\"heading\">mem-aref</h3>\n"
"<a name=\"Syntax-32\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-mem_002daref\"></a>Accessor: <strong>mem-aref</strong> "
"<em>ptr type &amp;optional (index 0)</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5121
msgid ""
"<p>(setf (<strong>mem-aref</strong> <em>ptr type &amp;optional (index 0)) "
"new-value</em>)\n"
"</p>\n"
"<a name=\"Arguments-and-Values-32\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5139
msgctxt "in/CFFI_User_Manual.htm:5139"
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>index</var></dt>\n"
"<dd><p>An integer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>new-value</var></dt>\n"
"<dd><p>A Lisp value compatible with <var>type</var>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5147
msgid ""
"<a name=\"Description-32\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>mem-aref</code> function is similar to <code>mem-ref</code> but "
"will\n"
"automatically calculate the offset from an <var>index</var>.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">mem-"
"aref ptr type n</span>)</span>"
msgstr ""
"<a name=\"Description-32\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>mem-aref</code> аналогична <code>mem-ref</code>, но "
"автоматически\n"
"рассчитывает смещение по индексу(<var>index</var>).\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">mem-"
"aref ptr type n</span>)</span>"

#: in/CFFI_User_Manual.htm:5152
msgid ""
"  <span class=\"comment\">;; is identical to:\n"
"  </span> \n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">mem-ref ptr type <span "
"class=\"paren2\">(<span class=\"lisp-bg\">* n <span class=\"paren3\">(<span "
"class=\"lisp-bg\">foreign-type-size type</span>)</span></span>)</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5155
msgid ""
"<a name=\"Examples-28\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5162
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">with-foreign-string</span></i> <span class="
"\"paren2\">(<span class=\"lisp-bg\">str <span class=\"string\">\"Hello, "
"foreign world!\"</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">mem-aref str <span "
"class=\"keyword\">:char</span> 6</span>)</span></span>)</span>\n"
" ⇒ 32\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">code-char *</"
"span>)</span>\n"
" ⇒ #\\Space"
msgstr ""

#: in/CFFI_User_Manual.htm:5169
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-object</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\">array <span class=\"keyword\">:int</span> 10</span>)</"
"span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">loop</span></i> for i below 10\n"
"                do <span class=\"paren3\">(<span class=\"lisp-bg\">setf "
"<span class=\"paren4\">(<span class=\"lisp-bg\">mem-aref array <span class="
"\"keyword\">:int</span> i</span>)</span> <span class=\"paren4\">(<span class="
"\"lisp-bg\">random 100</span>)</span></span>)</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">loop</span></i> for i below 10 collect <span class="
"\"paren3\">(<span class=\"lisp-bg\">mem-aref array <span class=\"keyword\">:"
"int</span> i</span>)</span></span>)</span></span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\">22 7 22 52 69 1 46 93 90 "
"65</span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5172
msgid ""
"<a name=\"Compatibility-Note\"></a>\n"
"<h4 class=\"subheading\">Compatibility Note</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5185
msgid ""
"<p>For compatibility with older versions of CFFI, <a href=\"#mem_002daref"
"\">mem-aref</a> will\n"
"produce a pointer for the deprecated bare structure specification, but\n"
"it is consistent with other types for the current specification form\n"
"<code>(:struct <var>structure-name</var>)</code> and provides a Lisp object\n"
"translated from the structure (by default a plist).  In order to obtain\n"
"the pointer, you should use the new function <a href=\"#mem_002daptr\">mem-"
"aptr</a>.\n"
"</p>\n"
"<a name=\"See-Also-30\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#mem_002dref\">mem-ref</a> <br>\n"
"<a href=\"#mem_002daptr\">mem-aptr</a>\n"
"</p>"
msgstr ""
"<p>Для совместимости со старыми версиями CFFI, <a href=\"#mem_002daref\">mem-"
"aref</a> будет\n"
"создавать указатель для устаревшей спецификации голой структуры, но это\n"
"согласуется с другими типами текущей формы спецификации \n"
"<code>(:struct <var>structure-name</var>)</code> и предоставляет объект "
"Lisp \n"
"преобразованный из структуры (по умолчанию plist).  Чтобы получить "
"указатель,\n"
"вы должны использовать новую функцию <a href=\"#mem_002daptr\">mem-aptr</"
"a>.\n"
"</p>\n"
"<a name=\"See-Also-30\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#mem_002dref\">mem-ref</a> <br>\n"
"<a href=\"#mem_002daptr\">mem-aptr</a>\n"
"</p>"

#: in/CFFI_User_Manual.htm:5200
msgid ""
"<hr>\n"
"<a name=\"mem_002dref\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#null_002dpointer\" accesskey=\"n\" rel=\"next\">null-"
"pointer</a>, Previous: <a href=\"#mem_002daref\" accesskey=\"p\" rel=\"prev"
"\">mem-aref</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" rel=\"up"
"\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">mem-ref</h4>\n"
"<a name=\"mem_002dref-1\"></a>\n"
"<h3 class=\"heading\">mem-ref</h3>\n"
"<a name=\"Syntax-33\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-mem_002dref\"></a>Accessor: <strong>mem-ref</strong> "
"<em>ptr type &amp;optional offset⇒ object</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5203
msgid ""
"<a name=\"Arguments-and-Values-33\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5221
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>A pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>offset</var></dt>\n"
"<dd><p>An integer (in byte units).\n"
"</p>\n"
"</dd>\n"
"<dt><var>object</var></dt>\n"
"<dd><p>The value <var>ptr</var> points to.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5226
msgid ""
"<a name=\"Description-33\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<a name=\"Examples-29\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5242
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">with-foreign-string</span></i> <span class="
"\"paren2\">(<span class=\"lisp-bg\">ptr <span class=\"string\">\"Saluton\"</"
"span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">setf <span class="
"\"paren3\">(<span class=\"lisp-bg\">mem-ref ptr <span class=\"keyword\">:"
"char</span> 3</span>)</span> <span class=\"paren3\">(<span class=\"lisp-bg"
"\">char-code <span class=\"character\">#\\a</span></span>)</span></span>)</"
"span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">loop</span></i> for i from 0 below 8\n"
"                collect <span class=\"paren3\">(<span class=\"lisp-bg\">code-"
"char <span class=\"paren4\">(<span class=\"lisp-bg\">mem-ref ptr <span class="
"\"keyword\">:char</span> i</span>)</span></span>)</span></span>)</span></"
"span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\"><span class=\"character"
"\">#\\S</span> <span class=\"character\">#\\a</span> <span class=\"character"
"\">#\\l</span> <span class=\"character\">#\\a</span> <span class=\"character"
"\">#\\t</span> <span class=\"character\">#\\o</span> <span class=\"character"
"\">#\\n</span> <span class=\"character\">#\\Null</span></span>)</span>\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">setq</span></i> ptr-to-int <span class=\"paren2\">(<span class="
"\"lisp-bg\">foreign-alloc <span class=\"keyword\">:int</span></span>)</"
"span></span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x1047D0&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">mem-ref ptr-to-"
"int <span class=\"keyword\">:int</span></span>)</span>\n"
" ⇒ 1054619\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">setf <span class="
"\"paren2\">(<span class=\"lisp-bg\">mem-ref ptr-to-int <span class=\"keyword"
"\">:int</span></span>)</span> 1984</span>)</span>\n"
" ⇒ 1984\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">mem-ref ptr-to-"
"int <span class=\"keyword\">:int</span></span>)</span>\n"
" ⇒ 1984\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5247
msgid ""
"<a name=\"See-Also-31\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#mem_002daref\">mem-aref</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5263
msgid ""
"<hr>\n"
"<a name=\"null_002dpointer\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#null_002dpointer_002dp\" accesskey=\"n\" rel=\"next\">null-"
"pointer-p</a>, Previous: <a href=\"#mem_002dref\" accesskey=\"p\" rel=\"prev"
"\">mem-ref</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" rel=\"up"
"\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">null-pointer</h4>\n"
"<a name=\"null_002dpointer-1\"></a>\n"
"<h3 class=\"heading\">null-pointer</h3>\n"
"<a name=\"Syntax-34\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-null_002dpointer\"></a>Function: <strong>null-pointer</"
"strong> <em>⇒ pointer</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5266
msgid ""
"<a name=\"Arguments-and-Values-34\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5272
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>pointer</var></dt>\n"
"<dd><p>A <code>NULL</code> pointer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5279
msgid ""
"<a name=\"Description-34\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>null-pointer</code> returns a null pointer.\n"
"</p>\n"
"<a name=\"Examples-30\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-34\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>null-pointer</code> возвращает нулевой указатель.\n"
"</p>\n"
"<a name=\"Examples-30\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5286
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">null-pointer</span>)</span>\n"
" ⇒ #&lt;A Null Mac Pointer&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">pointerp *</"
"span>)</span>\n"
" ⇒ T\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5292
msgid ""
"<a name=\"See-Also-32\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#null_002dpointer_002dp\">null-pointer-p</a> <br>\n"
"<a href=\"#make_002dpointer\">make-pointer</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5308
msgid ""
"<hr>\n"
"<a name=\"null_002dpointer_002dp\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#pointerp\" accesskey=\"n\" rel=\"next\">pointerp</a>, "
"Previous: <a href=\"#null_002dpointer\" accesskey=\"p\" rel=\"prev\">null-"
"pointer</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" rel=\"up\">Pointers</"
"a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel="
"\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" "
"rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">null-pointer-p</h4>\n"
"<a name=\"null_002dpointer_002dp-1\"></a>\n"
"<h3 class=\"heading\">null-pointer-p</h3>\n"
"<a name=\"Syntax-35\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-null_002dpointer_002dp\"></a>Function: <strong>null-"
"pointer-p</strong> <em>ptr⇒ boolean</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5311
msgid ""
"<a name=\"Arguments-and-Values-35\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5321
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>A foreign pointer that may be a null pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>boolean</var></dt>\n"
"<dd><p><code>T</code> or <code>NIL</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5329
msgid ""
"<a name=\"Description-35\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>null-pointer-p</code> returns true if <var>ptr</var> "
"is a null\n"
"pointer and false otherwise.\n"
"</p>\n"
"<a name=\"Examples-31\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-35\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>null-pointer-p</code> возвращает true, если <var>ptr</var> "
"является\n"
"нулевым указателем и false в противном случае.\n"
"</p>\n"
"<a name=\"Examples-31\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5334
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">null-pointer-p <span class=\"paren2\">(<span class=\"lisp-bg\">null-"
"pointer</span>)</span></span>)</span>\n"
" ⇒ T\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5339
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defun</span></i> contains-str-p <span class="
"\"paren2\">(<span class=\"lisp-bg\">big little</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">not <span class="
"\"paren3\">(<span class=\"lisp-bg\">null-pointer-p\n"
"          <span class=\"paren4\">(<span class=\"lisp-bg\">foreign-funcall "
"<span class=\"string\">\"strstr\"</span> <span class=\"keyword\">:string</"
"span> big <span class=\"keyword\">:string</span> little <span class=\"keyword"
"\">:pointer</span></span>)</span></span>)</span></span>)</span></span>)</"
"span>"
msgstr ""

#: in/CFFI_User_Manual.htm:5345
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">contains-str-p "
"<span class=\"string\">\"Popcorns\"</span> <span class=\"string\">\"corn\"</"
"span></span>)</span>\n"
" ⇒ T\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">contains-str-p "
"<span class=\"string\">\"Popcorns\"</span> <span class=\"string\">\"salt\"</"
"span></span>)</span>\n"
" ⇒ NIL\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5351
msgid ""
"<a name=\"See-Also-33\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#null_002dpointer\">null-pointer</a> <br>\n"
"<a href=\"#pointerp\">pointerp</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5367
msgid ""
"<hr>\n"
"<a name=\"pointerp\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#pointer_002daddress\" accesskey=\"n\" rel=\"next\">pointer-"
"address</a>, Previous: <a href=\"#null_002dpointer_002dp\" accesskey=\"p\" "
"rel=\"prev\">null-pointer-p</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" "
"rel=\"up\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">pointerp</h4>\n"
"<a name=\"pointerp-1\"></a>\n"
"<h3 class=\"heading\">pointerp</h3>\n"
"<a name=\"Syntax-36\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-pointerp\"></a>Function: <strong>pointerp</strong> "
"<em>ptr⇒ boolean</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5370
msgid ""
"<a name=\"Arguments-and-Values-36\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5380
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>An object that may be a foreign pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>boolean</var></dt>\n"
"<dd><p><code>T</code> or <code>NIL</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5393
msgid ""
"<a name=\"Description-36\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>pointerp</code> returns true if <var>ptr</var> is a "
"foreign\n"
"pointer and false otherwise.\n"
"</p>\n"
"<a name=\"Implementation_002dspecific-Notes\"></a>\n"
"<h4 class=\"subheading\">Implementation-specific Notes</h4>\n"
"<p>In Allegro CL, foreign pointers are integers thus in this\n"
"implementation <code>pointerp</code> will return true for any ordinary "
"integer.\n"
"</p>\n"
"<a name=\"Examples-32\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-36\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>pointerp</code> возвращает true, если <var>ptr</var> "
"является\n"
"внешним указателем и false в противном случае.\n"
"</p>\n"
"<a name=\"Implementation_002dspecific-Notes\"></a>\n"
"<h4 class=\"subheading\">Implementation-specific Notes</h4>\n"
"<p>В Allegro CL, внешний укзатель является целым числом, поэтому в этой "
"реализации\n"
" <code>pointerp</code> вернет true для любого обычного целого числа.\n"
"</p>\n"
"<a name=\"Examples-32\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5402
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-alloc 32</span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102D20&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">pointerp *</"
"span>)</span>\n"
" ⇒ T\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">pointerp <span "
"class=\"string\">\"this is not a pointer\"</span></span>)</span>\n"
" ⇒ NIL\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5408
msgid ""
"<a name=\"See-Also-34\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#make_002dpointer\">make-pointer</a>\n"
"<a href=\"#null_002dpointer_002dp\">null-pointer-p</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5424
msgid ""
"<hr>\n"
"<a name=\"pointer_002daddress\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#pointer_002deq\" accesskey=\"n\" rel=\"next\">pointer-eq</"
"a>, Previous: <a href=\"#pointerp\" accesskey=\"p\" rel=\"prev\">pointerp</"
"a>, Up: <a href=\"#Pointers\" accesskey=\"u\" rel=\"up\">Pointers</a> &nbsp; "
"[<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">pointer-address</h4>\n"
"<a name=\"pointer_002daddress-1\"></a>\n"
"<h3 class=\"heading\">pointer-address</h3>\n"
"<a name=\"Syntax-37\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-pointer_002daddress\"></a>Function: <strong>pointer-"
"address</strong> <em>ptr⇒ address</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5427
msgid ""
"<a name=\"Arguments-and-Values-37\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5437
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>address</var></dt>\n"
"<dd><p>An integer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5445
msgid ""
"<a name=\"Description-37\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>pointer-address</code> will return the <var>address</"
"var> of\n"
"a foreign pointer <var>ptr</var>.\n"
"</p>\n"
"<a name=\"Examples-33\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-37\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>pointer-address</code> вернет <var>address</var> \n"
"внешнего указателя <var>ptr</var>.\n"
"</p>\n"
"<a name=\"Examples-33\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5452
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">pointer-address <span class=\"paren2\">(<span class=\"lisp-bg\">null-"
"pointer</span>)</span></span>)</span>\n"
" ⇒ 0\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">pointer-address "
"<span class=\"paren2\">(<span class=\"lisp-bg\">make-pointer 123</span>)</"
"span></span>)</span>\n"
" ⇒ 123\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5463
msgid ""
"<a name=\"See-Also-35\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#make_002dpointer\">make-pointer</a> <br>\n"
"<a href=\"#inc_002dpointer\">inc-pointer</a> <br>\n"
"<a href=\"#null_002dpointer\">null-pointer</a> <br>\n"
"<a href=\"#null_002dpointer_002dp\">null-pointer-p</a> <br>\n"
"<a href=\"#pointerp\">pointerp</a> <br>\n"
"<a href=\"#pointer_002deq\">pointer-eq</a> <br>\n"
"<a href=\"#mem_002dref\">mem-ref</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5479
msgid ""
"<hr>\n"
"<a name=\"pointer_002deq\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#with_002dforeign_002dobject\" accesskey=\"n\" rel=\"next"
"\">with-foreign-object</a>, Previous: <a href=\"#pointer_002daddress\" "
"accesskey=\"p\" rel=\"prev\">pointer-address</a>, Up: <a href=\"#Pointers\" "
"accesskey=\"u\" rel=\"up\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">pointer-eq</h4>\n"
"<a name=\"pointer_002deq-1\"></a>\n"
"<h3 class=\"heading\">pointer-eq</h3>\n"
"<a name=\"Syntax-38\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-pointer_002deq\"></a>Function: <strong>pointer-eq</"
"strong> <em>ptr1 ptr2⇒ boolean</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5482
msgid ""
"<a name=\"Arguments-and-Values-38\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5493
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>ptr1</var></dt>\n"
"<dt><var>ptr2</var></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>boolean</var></dt>\n"
"<dd><p><code>T</code> or <code>NIL</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5520
msgid ""
"<a name=\"Description-38\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>pointer-eq</code> returns true if <var>ptr1</var> and\n"
"<var>ptr2</var> point to the same memory address and false otherwise.\n"
"</p>\n"
"<a name=\"Implementation_002dspecific-Notes-1\"></a>\n"
"<h4 class=\"subheading\">Implementation-specific Notes</h4>\n"
"<p>The representation of foreign pointers varies across the various Lisp\n"
"implementations as does the behaviour of the built-in Common Lisp\n"
"equality predicates. Comparing two pointers that point to the same\n"
"address with <code>EQ</code> Lisps will return true on some Lisps, others "
"require\n"
"more general predicates like <code>EQL</code> or <code>EQUALP</code> and "
"finally\n"
"some will return false using any of these predicates. Therefore, for\n"
"portability, you should use <code>POINTER-EQ</code>.\n"
"</p>\n"
"<a name=\"Examples-34\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<p>This is an example using <acronym>SBCL</acronym>, see the\n"
"implementation-specific notes above.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">eql <span class=\"paren2\">(<span class=\"lisp-bg\">null-pointer</span>)</"
"span> <span class=\"paren2\">(<span class=\"lisp-bg\">null-pointer</span>)</"
"span></span>)</span>\n"
" ⇒ NIL\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">pointer-eq <span "
"class=\"paren2\">(<span class=\"lisp-bg\">null-pointer</span>)</span> <span "
"class=\"paren2\">(<span class=\"lisp-bg\">null-pointer</span>)</span></"
"span>)</span>\n"
" ⇒ T\n"
"</pre></div>"
msgstr ""
"<a name=\"Description-38\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>pointer-eq</code> возвращает true, если <var>ptr1</var> и\n"
"<var>ptr2</var> указывают на один и тот же адрес памяти, и false в противном "
"случае.\n"
"</p>\n"
"<a name=\"Implementation_002dspecific-Notes-1\"></a>\n"
"<h4 class=\"subheading\">Примечания по реализации</h4>\n"
"<p>Представление внешних указателей различается в разных реализациях Lisp,\n"
"как и поведение встроиенных в Common Lisp предикатов их равенства.\n"
"Сравнение двух указателей, которые указывают на один и тот же адрес с "
"помощью\n"
"<code>EQ</code> Lisp вернет true на некоторых Lisp, другие требуют более\n"
"общих предикатов, таких как <code>EQL</code> или <code>EQUALP</code> и "
"наконец,\n"
"некоторые вернут false с использованием любого из этих предикатов. Поэтому, "
"для\n"
"переносимости, вы должны испольовать <code>POINTER-EQ</code>.\n"
"</p>\n"
"<a name=\"Examples-34\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>\n"
"<p>This is an example using <acronym>SBCL</acronym>, see the\n"
"implementation-specific notes above.\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">eql <span class=\"paren2\">(<span class=\"lisp-bg\">null-pointer</span>)</"
"span> <span class=\"paren2\">(<span class=\"lisp-bg\">null-pointer</span>)</"
"span></span>)</span>\n"
" ⇒ NIL\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">pointer-eq <span "
"class=\"paren2\">(<span class=\"lisp-bg\">null-pointer</span>)</span> <span "
"class=\"paren2\">(<span class=\"lisp-bg\">null-pointer</span>)</span></"
"span>)</span>\n"
" ⇒ T\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:5525
msgid ""
"<a name=\"See-Also-36\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#inc_002dpointer\">inc-pointer</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5541
msgid ""
"<hr>\n"
"<a name=\"with_002dforeign_002dobject\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#with_002dforeign_002dpointer\" accesskey=\"n\" rel=\"next"
"\">with-foreign-pointer</a>, Previous: <a href=\"#pointer_002deq\" accesskey="
"\"p\" rel=\"prev\">pointer-eq</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" "
"rel=\"up\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">with-foreign-object</h4>\n"
"<a name=\"with_002dforeign_002dobject_002c-with_002dforeign_002dobjects\"></"
"a>\n"
"<h3 class=\"heading\">with-foreign-object, with-foreign-objects</h3>\n"
"<a name=\"Syntax-39\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-with_002dforeign_002dobject\"></a>Macro: <strong>with-"
"foreign-object</strong> <em>(var type &amp;optional count) &amp;body body</"
"em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5545
msgid ""
"<a name=\"with_002dforeign_002dobjects\"></a><dl>\n"
"<dt><a name=\"index-with_002dforeign_002dobjects\"></a>Macro: <strong>with-"
"foreign-objects</strong> <em>(bindings) &amp;body body</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5550
msgid ""
"<p>bindings ::= {(var type &amp;optional count)}*\n"
"</p>\n"
"<a name=\"Arguments-and-Values-39\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5564
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>var</var></dt>\n"
"<dd><p>A symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign type, evaluated.\n"
"</p>\n"
"</dd>\n"
"<dt><var>count</var></dt>\n"
"<dd><p>An integer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5574
msgid ""
"<a name=\"Description-39\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The macros <code>with-foreign-object</code> and <code>with-foreign-"
"objects</code>\n"
"bind <var>var</var> to a pointer to <var>count</var> newly allocated "
"objects\n"
"of type <var>type</var> during <var>body</var>. The buffer has dynamic "
"extent\n"
"and may be stack allocated if supported by the host Lisp.\n"
"</p>\n"
"<a name=\"Examples-35\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-39\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>with-foreign-object</code> и <code>with-foreign-objects</"
"code>\n"
"связывают <var>var</var> с указателем(pointer) на <var>count</var> вновь "
"выделенных\n"
"объектов типа(<var>type</var>) во время выполнения кода(<var>body</var>). "
"Буфер имеет\n"
"динамическую протяженность на время выполнения кода(dynamic extent)\n"
"и может быть выделен в стеке, если это поддерживается хостом Lisp.\n"
"</p>\n"
"<a name=\"Examples-35\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5583
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">with-foreign-object</span></i> <span class="
"\"paren2\">(<span class=\"lisp-bg\">array <span class=\"keyword\">:int</"
"span> 10</span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">dotimes <span "
"class=\"paren3\">(<span class=\"lisp-bg\">i 10</span>)</span>\n"
"            <span class=\"paren3\">(<span class=\"lisp-bg\">setf <span class="
"\"paren4\">(<span class=\"lisp-bg\">mem-aref array <span class=\"keyword\">:"
"int</span> i</span>)</span> <span class=\"paren4\">(<span class=\"lisp-bg"
"\">random 100</span>)</span></span>)</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">loop</span></i> for i below 10\n"
"                collect <span class=\"paren3\">(<span class=\"lisp-bg\">mem-"
"aref array <span class=\"keyword\">:int</span> i</span>)</span></span>)</"
"span></span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\">22 7 22 52 69 1 46 93 90 "
"65</span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5588
msgid ""
"<a name=\"See-Also-37\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dalloc\">foreign-alloc</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5604
msgid ""
"<hr>\n"
"<a name=\"with_002dforeign_002dpointer\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#with_002dforeign_002dobject\" accesskey=\"p\" rel=\"prev"
"\">with-foreign-object</a>, Up: <a href=\"#Pointers\" accesskey=\"u\" rel="
"\"up\">Pointers</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">with-foreign-pointer</h4>\n"
"<a name=\"with_002dforeign_002dpointer-1\"></a>\n"
"<h3 class=\"heading\">with-foreign-pointer</h3>\n"
"<a name=\"Syntax-40\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-with_002dforeign_002dpointer\"></a>Macro: <strong>with-"
"foreign-pointer</strong> <em>(var size &amp;optional size-var) &amp;body "
"body</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5607
msgid ""
"<a name=\"Arguments-and-Values-40\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5622
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>var</var></dt>\n"
"<dt><var>size-var</var></dt>\n"
"<dd><p>A symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>size</var></dt>\n"
"<dd><p>An integer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>body</var></dt>\n"
"<dd><p>A list of forms to be executed.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5635
msgid ""
"<a name=\"Description-40\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>with-foreign-pointer</code> macro, binds <var>var</var> to "
"<var>size</var>\n"
"bytes of foreign memory during <var>body</var>. The pointer in <var>var</"
"var>\n"
"is invalid beyond the dynamic extend of <var>body</var> and may be\n"
"stack-allocated if supported by the implementation.\n"
"</p>\n"
"<p>If <var>size-var</var> is supplied, it will be bound to <var>size</var> "
"during\n"
"<var>body</var>.\n"
"</p>\n"
"<a name=\"Examples-36\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-40\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>with-foreign-pointer</code> связывает <var>var</var> с\n"
"байтами внешней памяти размером(<var>size</var>) во время выполнения\n"
"кода(<var>body</var>). Указатель в <var>var</var> не допустим\n"
"за пределами динмаической протяженности времени выполнения кода\n"
"<var>body</var> и может быть выделен в стеке, если это поддерживается\n"
"реализацией.\n"
"</p>\n"
"<p>Если указан <var>size-var</var>, он будет связан с размером(<var>size</"
"var>) \n"
"в течении выремени выполнения <var>body</var>.\n"
"</p>\n"
"<a name=\"Examples-36\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5644
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">with-foreign-pointer</span></i> <span class="
"\"paren2\">(<span class=\"lisp-bg\">string 4 size</span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">setf <span class="
"\"paren3\">(<span class=\"lisp-bg\">mem-ref string <span class=\"keyword\">:"
"char</span> <span class=\"paren4\">(<span class=\"lisp-bg\">1- size</span>)</"
"span></span>)</span> 0</span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">lisp-string-to-"
"foreign <span class=\"string\">\"Popcorns\"</span> string size</span>)</"
"span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">loop</span></i> for i from 0 below size\n"
"                collect <span class=\"paren3\">(<span class=\"lisp-bg\">code-"
"char <span class=\"paren4\">(<span class=\"lisp-bg\">mem-ref string <span "
"class=\"keyword\">:char</span> i</span>)</span></span>)</span></span>)</"
"span></span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\"><span class=\"character"
"\">#\\P</span> <span class=\"character\">#\\o</span> <span class=\"character"
"\">#\\p</span> <span class=\"character\">#\\Null</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5650
msgid ""
"<a name=\"See-Also-38\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dalloc\">foreign-alloc</a> <br>\n"
"<a href=\"#foreign_002dfree\">foreign-free</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5660
msgid ""
"<hr>\n"
"<a name=\"Strings\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Variables\" accesskey=\"n\" rel=\"next\">Variables</a>, "
"Previous: <a href=\"#Pointers\" accesskey=\"p\" rel=\"prev\">Pointers</a>, "
"Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Strings-1\"></a>\n"
"<h2 class=\"chapter\">8 Strings</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Strings\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Variables\" accesskey=\"n\" rel=\"next\">Variables</a>, "
"Previous: <a href=\"#Pointers\" accesskey=\"p\" rel=\"prev\">Pointers</a>, "
"Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Strings-1\"></a>\n"
"<h2 class=\"chapter\">8 Строки</h2>"

#: in/CFFI_User_Manual.htm:5673
msgid ""
"<p>As with many languages, Lisp and C have special support for logical\n"
"arrays of characters, going so far as to give them a special name,\n"
"âstringsâ.  In that spirit, <acronym>CFFI</acronym> provides special support "
"for\n"
"translating between Lisp and C strings.\n"
"</p>\n"
"<p>The <code>:string</code> type and the symbols related below also serve as "
"an\n"
"example of what you can do portably with <acronym>CFFI</acronym>; were it "
"not\n"
"included, you could write an equally functional <samp>strings.lisp</samp>\n"
"without referring to any implementation-specific symbols.\n"
"</p>\n"
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-"
"comment\">Dictionary"
msgstr ""
"<p>Как и во многих языках программирования, Lisp и Си имеют специальную "
"поддержку для\n"
"логических массивов символов, вплоть до того, что дают им специальное имя,\n"
"âstringsâ.  В том духе, <acronym>CFFI</acronym> предоставляет специальную\n"
"поддержку для преобразования строк между Lisp и Си.\n"
"</p>\n"
"<p>Тип <code>:string</code> и связанные с ним символы указанные ниже также "
"служат\n"
"примером, что вы можете делать с помощью <acronym>CFFI</acronym>; если бы "
"этот тип\n"
"не был включен, вы могли бы написать такой же функциональный <samp>strings."
"lisp</samp>,\n"
"не обращаясь к каким либо специфическим для реализации символам.\n"
"</p>\n"
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-"
"comment\">Dictionary"

#: in/CFFI_User_Manual.htm:5691
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#g_t_002adefault_002dforeign_002dencoding_002a\" accesskey=\"1\">*default-"
"foreign-encoding*</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dstring_002dalloc\" accesskey=\"2\">foreign-string-alloc</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dstring_002dfree\" accesskey=\"3\">foreign-string-free</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dstring_002dto_002dlisp\" accesskey=\"4\">foreign-string-to-"
"lisp</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#lisp_002dstring_002dto_002dforeign\" accesskey=\"5\">lisp-string-to-"
"foreign</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dstring\" accesskey=\"6\">with-foreign-string</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dstrings\" accesskey=\"7\">with-foreign-strings</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#with_002dforeign_002dpointer_002das_002dstring\" accesskey=\"8\">with-"
"foreign-pointer-as-string</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">\n"
"</td></tr>\n"
"</tbody></table>"
msgstr ""

#: in/CFFI_User_Manual.htm:5705
msgid ""
"<hr>\n"
"<a name=\"g_t_002adefault_002dforeign_002dencoding_002a\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dstring_002dalloc\" accesskey=\"n\" rel=\"next"
"\">foreign-string-alloc</a>, Previous: <a href=\"#Strings\" accesskey=\"p\" "
"rel=\"prev\">Strings</a>, Up: <a href=\"#Strings\" accesskey=\"u\" rel=\"up"
"\">Strings</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" "
"rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index"
"\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">*default-foreign-encoding*</h4>\n"
"<a name=\"g_t_002adefault_002dforeign_002dencoding_002a-1\"></a>\n"
"<h3 class=\"heading\">*default-foreign-encoding*</h3>\n"
"<a name=\"Syntax-41\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5709
msgid ""
"<dl>\n"
"<dt><a name=\"index-_002adefault_002dforeign_002dencoding_002a\"></a>Special "
"Variable: <strong>*default-foreign-encoding*</strong></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5712
msgid ""
"<a name=\"Value-type\"></a>\n"
"<h4 class=\"subheading\">Value type</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5717
msgid ""
"<p>A keyword.\n"
"</p>\n"
"<a name=\"Initial-value\"></a>\n"
"<h4 class=\"subheading\">Initial value</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5722
msgid ""
"<p><code>:utf-8</code>\n"
"</p>\n"
"<a name=\"Description-41\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5727
msgid ""
"<p>This special variable holds the default foreign encoding.\n"
"</p>\n"
"<a name=\"Examples-37\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<p>Это специальная переменная содержит внешнюю кодировку по умолчанию.\n"
"</p>\n"
"<a name=\"Examples-37\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5737
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; *default-foreign-encoding*\n"
"  :utf-8\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-funcall "
"<span class=\"string\">\"strdup\"</span> <span class=\"paren2\">(<span class="
"\"lisp-bg\"><span class=\"keyword\">:string</span> <span class=\"keyword\">:"
"encoding</span> <span class=\"keyword\">:utf-16</span></span>)</span> <span "
"class=\"string\">\"foo\"</span> <span class=\"keyword\">:string</span></"
"span>)</span>\n"
"  \"f\"\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">let</span></i> <span class=\"paren2\">(<span class=\"lisp-bg"
"\"><span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"special"
"\">*default-foreign-encoding*</span> <span class=\"keyword\">:utf-16</span></"
"span>)</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-funcall "
"<span class=\"string\">\"strdup\"</span> <span class=\"paren3\">(<span class="
"\"lisp-bg\"><span class=\"keyword\">:string</span> <span class=\"keyword\">:"
"encoding</span> <span class=\"keyword\">:utf-16</span></span>)</span> <span "
"class=\"string\">\"foo\"</span> <span class=\"keyword\">:string</span></"
"span>)</span></span>)</span>\n"
"  \"foo\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5740
msgid ""
"<a name=\"See-also\"></a>\n"
"<h4 class=\"subheading\">See also</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5748
msgid ""
"<p><a href=\"#Other-Types\">Other Types</a> (<code>:string</code> type) "
"<br>\n"
"<a href=\"#foreign_002dstring_002dalloc\">foreign-string-alloc</a> <br>\n"
"<a href=\"#foreign_002dstring_002dto_002dlisp\">foreign-string-to-lisp</a> "
"<br>\n"
"<a href=\"#lisp_002dstring_002dto_002dforeign\">lisp-string-to-foreign</a> "
"<br>\n"
"<a href=\"#with_002dforeign_002dstring\">with-foreign-string</a> <br>\n"
"<a href=\"#with_002dforeign_002dpointer_002das_002dstring\">with-foreign-"
"pointer-as-string</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5764
msgid ""
"<hr>\n"
"<a name=\"foreign_002dstring_002dalloc\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dstring_002dfree\" accesskey=\"n\" rel=\"next"
"\">foreign-string-free</a>, Previous: <a href="
"\"#g_t_002adefault_002dforeign_002dencoding_002a\" accesskey=\"p\" rel=\"prev"
"\">*default-foreign-encoding*</a>, Up: <a href=\"#Strings\" accesskey=\"u\" "
"rel=\"up\">Strings</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-string-alloc</h4>\n"
"<a name=\"foreign_002dstring_002dalloc-1\"></a>\n"
"<h3 class=\"heading\">foreign-string-alloc</h3>\n"
"<a name=\"Syntax-42\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dstring_002dalloc\"></a>Function: "
"<strong>foreign-string-alloc</strong> <em>string &amp;key encoding null-"
"terminated-p                                start end⇒ pointer</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5767
msgid ""
"<a name=\"Arguments-and-Values-41\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5790
msgid ""
"<dl compact=\"compact\">\n"
"<dt><em><var>string</var></em></dt>\n"
"<dd><p>A Lisp string.\n"
"</p>\n"
"</dd>\n"
"<dt><em><var>encoding</var></em></dt>\n"
"<dd><p>Foreign encoding. Defaults to <code>*default-foreign-encoding*</"
"code>.\n"
"</p>\n"
"</dd>\n"
"<dt><em><var>null-terminated-p</var></em></dt>\n"
"<dd><p>Boolean, defaults to true.\n"
"</p>\n"
"</dd>\n"
"<dt><em><var>start</var>, <var>end</var></em></dt>\n"
"<dd><p>Bounding index designators of <var>string</var>. 0 and <code>nil</"
"code>, by\n"
"default.\n"
"</p>\n"
"</dd>\n"
"<dt><em><var>pointer</var></em></dt>\n"
"<dd><p>A pointer to the newly allocated foreign string.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5806
msgid ""
"<a name=\"Description-42\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>foreign-string-alloc</code> function allocates foreign memory\n"
"holding a copy of <var>string</var> converted using the specified\n"
"<var>encoding</var>. <var>Start</var> specifies an offset into <var>string</"
"var> and\n"
"<var>end</var> marks the position following the last element of the foreign\n"
"string.\n"
"</p>\n"
"<p>This string must be freed with <code>foreign-string-free</code>.\n"
"</p>\n"
"<p>If <var>null-terminated-p</var> is false, the string will not be\n"
"null-terminated.\n"
"</p>\n"
"<a name=\"Examples-38\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-42\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-string-alloc</code> выделяет внешнюю память, "
"сохраняя\n"
"копию <var>string</var> преобразованную с использованием указанной "
"кодировки\n"
"<var>encoding</var>. Начало(<var>Start</var>) определяет смещение в "
"строке(<var>string</var>)\n"
"и конец(<var>end</var>) отмечает позицию, следующую за последним элементом "
"внешней\n"
"строки.\n"
"</p>\n"
"<p>Эта строка должна быть освобождена с помощью <code>foreign-string-free</"
"code>.\n"
"</p>\n"
"<p>Если <var>null-terminated-p</var> равен false, строка не будет иметь "
"нулевое окончание.\n"
"</p>\n"
"<a name=\"Examples-38\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5813
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defparameter</span></i> <span class=\"special"
"\">*str*</span> <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-"
"string-alloc <span class=\"string\">\"Hello, foreign world!\"</span></"
"span>)</span></span>)</span>\n"
" ⇒ #&lt;FOREIGN-ADDRESS #x00400560&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-funcall "
"<span class=\"string\">\"strlen\"</span> <span class=\"keyword\">:pointer</"
"span> <span class=\"special\">*str*</span> <span class=\"keyword\">:int</"
"span></span>)</span>\n"
" ⇒ 21\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5819
msgid ""
"<a name=\"See-Also-39\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dstring_002dfree\">foreign-string-free</a> <br>\n"
"<a href=\"#with_002dforeign_002dstring\">with-foreign-string</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5835
msgid ""
"<hr>\n"
"<a name=\"foreign_002dstring_002dfree\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dstring_002dto_002dlisp\" accesskey=\"n\" rel="
"\"next\">foreign-string-to-lisp</a>, Previous: <a href="
"\"#foreign_002dstring_002dalloc\" accesskey=\"p\" rel=\"prev\">foreign-"
"string-alloc</a>, Up: <a href=\"#Strings\" accesskey=\"u\" rel=\"up"
"\">Strings</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" "
"rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index"
"\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-string-free</h4>\n"
"<a name=\"foreign_002dstring_002dfree-1\"></a>\n"
"<h3 class=\"heading\">foreign-string-free</h3>\n"
"<a name=\"Syntax-43\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dstring_002dfree\"></a>Function: "
"<strong>foreign-string-free</strong> <em>pointer</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5838
msgid ""
"<a name=\"Arguments-and-Values-42\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5844
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>pointer</var></dt>\n"
"<dd><p>A pointer to a string allocated by <code>foreign-string-alloc</"
"code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5852
msgid ""
"<a name=\"Description-43\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>foreign-string-free</code> function frees a foreign string\n"
"allocated by <code>foreign-string-alloc</code>.\n"
"</p>\n"
"<a name=\"Examples-39\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-43\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-string-free</code> освобождает внешнюю строку\n"
"выделенную с помощью <code>foreign-string-alloc</code>.\n"
"</p>\n"
"<a name=\"Examples-39\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5857
msgid ""
"<a name=\"See-Also-40\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dstring_002dalloc\">foreign-string-alloc</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5873
msgid ""
"<hr>\n"
"<a name=\"foreign_002dstring_002dto_002dlisp\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#lisp_002dstring_002dto_002dforeign\" accesskey=\"n\" rel="
"\"next\">lisp-string-to-foreign</a>, Previous: <a href="
"\"#foreign_002dstring_002dfree\" accesskey=\"p\" rel=\"prev\">foreign-string-"
"free</a>, Up: <a href=\"#Strings\" accesskey=\"u\" rel=\"up\">Strings</a> "
"&nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-string-to-lisp</h4>\n"
"<a name=\"foreign_002dstring_002dto_002dlisp-1\"></a>\n"
"<h3 class=\"heading\">foreign-string-to-lisp</h3>\n"
"<a name=\"Syntax-44\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dstring_002dto_002dlisp\"></a>Function: "
"<strong>foreign-string-to-lisp</strong> <em>ptr &amp;key offset count max-"
"chars                                  encoding⇒ string</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5876
msgid ""
"<a name=\"Arguments-and-Values-43\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5903
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>ptr</var></dt>\n"
"<dd><p>A pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>offset</var></dt>\n"
"<dd><p>An integer greater than or equal to 0. Defauls to 0.\n"
"</p>\n"
"</dd>\n"
"<dt><var>count</var></dt>\n"
"<dd><p>Either <code>nil</code> (the default), or an integer greater than or "
"equal to 0.\n"
"</p>\n"
"</dd>\n"
"<dt><var>max-chars</var></dt>\n"
"<dd><p>An integer greater than or equal to 0.\n"
"<code>(1- array-total-size-limit)</code>, by default.\n"
"</p>\n"
"</dd>\n"
"<dt><var>encoding</var></dt>\n"
"<dd><p>Foreign encoding. Defaults to <code>*default-foreign-encoding*</"
"code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>string</var></dt>\n"
"<dd><p>A Lisp string.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5920
msgid ""
"<a name=\"Description-44\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>foreign-string-to-lisp</code> function converts at most\n"
"<var>count</var> octets from <var>ptr</var> into a Lisp string, using the\n"
"defined <var>encoding</var>.\n"
"</p>\n"
"<p>If <var>count</var> is <code>nil</code> (the default), characters are "
"copied\n"
"until <var>max-chars</var> is reached or a <code>NULL</code> character is "
"found.\n"
"</p>\n"
"<p>If <var>ptr</var> is a null pointer, returns <code>nil</code>.\n"
"</p>\n"
"<p>Note that the <code>:string</code> type will automatically convert "
"between\n"
"Lisp strings and foreign strings.\n"
"</p>\n"
"<a name=\"Examples-40\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-44\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>foreign-string-to-lisp</code> преобразует максимум "
"<var>count</var> \n"
"октетов из указателя <var>ptr</var> в строку Lisp, используя заданную\n"
"кодировку <var>encoding</var>.\n"
"</p>\n"
"<p>Если количество <var>count</var> равно <code>nil</code> (по умолчанию), "
"символы\n"
"копируютя до тех пор, пока не будет достигнуто <var>max-chars</var> символов "
"или\n"
"не будет найден симолв <code>NULL</code>.\n"
"</p>\n"
"<p>Если <var>ptr</var> это нулевой указатель, взвращается <code>nil</code>.\n"
"</p>\n"
"<p>Обратите внимание, что тип <code>:string</code> автоматически выполняет "
"преобразование\n"
"между строками Lisp и внешними строками.\n"
"</p>\n"
"<a name=\"Examples-40\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5927
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-funcall <span class=\"string\">\"getenv\"</span> <span class="
"\"keyword\">:string</span> <span class=\"string\">\"HOME\"</span> <span "
"class=\"keyword\">:pointer</span></span>)</span>\n"
" ⇒ #&lt;FOREIGN-ADDRESS #xBFFFFFD5&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-string-to-"
"lisp *</span>)</span>\n"
" ⇒ \"/Users/luis\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:5933
msgid ""
"<a name=\"See-Also-41\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#lisp_002dstring_002dto_002dforeign\">lisp-string-to-foreign</"
"a> <br>\n"
"<a href=\"#foreign_002dstring_002dalloc\">foreign-string-alloc</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:5949
msgid ""
"<hr>\n"
"<a name=\"lisp_002dstring_002dto_002dforeign\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#with_002dforeign_002dstring\" accesskey=\"n\" rel=\"next"
"\">with-foreign-string</a>, Previous: <a href="
"\"#foreign_002dstring_002dto_002dlisp\" accesskey=\"p\" rel=\"prev\">foreign-"
"string-to-lisp</a>, Up: <a href=\"#Strings\" accesskey=\"u\" rel=\"up"
"\">Strings</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" "
"rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index"
"\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">lisp-string-to-foreign</h4>\n"
"<a name=\"lisp_002dstring_002dto_002dforeign-1\"></a>\n"
"<h3 class=\"heading\">lisp-string-to-foreign</h3>\n"
"<a name=\"Syntax-45\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-lisp_002dstring_002dto_002dforeign\"></a>Function: "
"<strong>lisp-string-to-foreign</strong> <em>string buffer bufsize &amp;key "
"start                                  end offset encoding⇒ buffer</em></"
"dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5952
msgid ""
"<a name=\"Arguments-and-Values-44\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:5979
msgid ""
"<dl compact=\"compact\">\n"
"<dt><em><var>string</var></em></dt>\n"
"<dd><p>A Lisp string.\n"
"</p>\n"
"</dd>\n"
"<dt><em><var>buffer</var></em></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><em><var>bufsize</var></em></dt>\n"
"<dd><p>An integer.\n"
"</p>\n"
"</dd>\n"
"<dt><em><var>start</var>, <var>end</var></em></dt>\n"
"<dd><p>Bounding index designators of <var>string</var>. 0 and <code>nil</"
"code>, by\n"
"default.\n"
"</p>\n"
"</dd>\n"
"<dt><em><var>offset</var></em></dt>\n"
"<dd><p>An integer greater than or equal to 0. Defauls to 0.\n"
"</p>\n"
"</dd>\n"
"<dt><em><var>encoding</var></em></dt>\n"
"<dd><p>Foreign encoding. Defaults to <code>*default-foreign-encoding*</"
"code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:5993
msgid ""
"<a name=\"Description-45\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>lisp-string-to-foreign</code> function copies at most\n"
"<var>bufsize</var>-1 octets from a Lisp <var>string</var> using the "
"specified\n"
"<var>encoding</var> into <var>buffer</var>+<var>offset</var>. The foreign "
"string will\n"
"be null-terminated.\n"
"</p>\n"
"<p><var>Start</var> specifies an offset into <var>string</var> and\n"
"<var>end</var> marks the position following the last element of the foreign\n"
"string.\n"
"</p>\n"
"<a name=\"Examples-41\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-45\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>lisp-string-to-foreign</code> копирует не более \n"
"<var>bufsize</var>-1 октетов из строки(<var>string</var>) Lisp с "
"использованием\n"
"указанной кодировки(<var>encoding</var>) в буффер <var>buffer</var>"
"+<var>offset</var>. Внешняя\n"
"строка будет заканчиваться нулем(null-terminated).\n"
"</p>\n"
"<p>Начало(<var>Start</var>) указывает смещение в <var>string</var> и\n"
"<var>end</var> отмечает позицию следующую за последним элементом внешней "
"строки.\n"
"</p>\n"
"<a name=\"Examples-41\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:5999
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">with-foreign-pointer-as-string</span></i> <span "
"class=\"paren2\">(<span class=\"lisp-bg\">str 255</span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">lisp-string-to-"
"foreign <span class=\"string\">\"Hello, foreign world!\"</span> str 6</"
"span>)</span></span>)</span>\n"
" ⇒ \"Hello\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6006
msgid ""
"<a name=\"See-Also-42\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dstring_002dalloc\">foreign-string-alloc</a> <br>\n"
"<a href=\"#foreign_002dstring_002dto_002dlisp\">foreign-string-to-lisp</a> "
"<br>\n"
"<a href=\"#with_002dforeign_002dpointer_002das_002dstring\">with-foreign-"
"pointer-as-string</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:6022
msgid ""
"<hr>\n"
"<a name=\"with_002dforeign_002dstring\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#with_002dforeign_002dpointer_002das_002dstring\" accesskey="
"\"n\" rel=\"next\">with-foreign-pointer-as-string</a>, Previous: <a href="
"\"#lisp_002dstring_002dto_002dforeign\" accesskey=\"p\" rel=\"prev\">lisp-"
"string-to-foreign</a>, Up: <a href=\"#Strings\" accesskey=\"u\" rel=\"up"
"\">Strings</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" "
"rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index"
"\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">with-foreign-string</h4>\n"
"<a name=\"with_002dforeign_002dstring_002c-with_002dforeign_002dstrings\"></"
"a>\n"
"<h3 class=\"heading\">with-foreign-string, with-foreign-strings</h3>\n"
"<a name=\"Syntax-46\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-with_002dforeign_002dstring\"></a>Macro: <strong>with-"
"foreign-string</strong> <em>(var-or-vars string &amp;rest args) &amp;body "
"body</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6026
msgid ""
"<a name=\"with_002dforeign_002dstrings\"></a><dl>\n"
"<dt><a name=\"index-with_002dforeign_002dstrings\"></a>Macro: <strong>with-"
"foreign-strings</strong> <em>(bindings) &amp;body body</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6032
msgid ""
"<p>var-or-vars ::= var | (var &amp;optional octet-size-var)\n"
"bindings ::= {(var-or-vars string &amp;rest args)}*\n"
"</p>\n"
"<a name=\"Arguments-and-Values-45\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6046
msgid ""
"<dl compact=\"compact\">\n"
"<dt><em><var>var</var>, <var>byte-size-var</var></em></dt>\n"
"<dd><p>A symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><em><var>string</var></em></dt>\n"
"<dd><p>A Lisp string.\n"
"</p>\n"
"</dd>\n"
"<dt><em><var>body</var></em></dt>\n"
"<dd><p>A list of forms to be executed.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6058
msgid ""
"<a name=\"Description-46\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>with-foreign-string</code> macro will bind <var>var</var> to a "
"newly\n"
"allocated foreign string containing <var>string</var>. <var>Args</var> is "
"passed\n"
"to the underlying <code>foreign-string-alloc</code> call.\n"
"</p>\n"
"<p>If <var>octet-size-var</var> is provided, it will be bound the length of\n"
"foreign string in octets including the null terminator.\n"
"</p>\n"
"<a name=\"Examples-42\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-46\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>with-foreign-string</code> связывает <var>var</var> с "
"новой \n"
"выделенной внешней строкой содержащей <var>string</var>. Аргументы "
"<var>Args</var>\n"
"предаются базовому вызову <code>foreign-string-alloc</code>.\n"
"</p>\n"
"<p>Если указан <var>octet-size-var</var>, он будет ограничивать длину "
"внешнйе строки в\n"
"октетах, включая нулевой конечный символ(null terminator).\n"
"</p>\n"
"<a name=\"Examples-42\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:6063
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">with-foreign-string</span></i> <span class="
"\"paren2\">(<span class=\"lisp-bg\">foo <span class=\"string\">\"12345\"</"
"span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-funcall "
"<span class=\"string\">\"strlen\"</span> <span class=\"keyword\">:pointer</"
"span> foo <span class=\"keyword\">:int</span></span>)</span></span>)</span>\n"
" ⇒ 5"
msgstr ""

#: in/CFFI_User_Manual.htm:6070
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">let</span></i> <span class=\"paren2\">(<span class=\"lisp-bg"
"\"><span class=\"paren3\">(<span class=\"lisp-bg\">array <span class="
"\"paren4\">(<span class=\"lisp-bg\">coerce #<span class=\"paren5\">(<span "
"class=\"lisp-bg\">84 117 114 97 110 103 97</span>)</span>\n"
"                             '<span class=\"paren5\">(<span class=\"lisp-bg"
"\">array <span class=\"paren6\">(<span class=\"lisp-bg\">unsigned-byte 8</"
"span>)</span></span>)</span></span>)</span></span>)</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-string</span></i> <span class=\"paren3\">(<span "
"class=\"lisp-bg\">foreign-string array</span>)</span>\n"
"            <span class=\"paren3\">(<span class=\"lisp-bg\">foreign-string-"
"to-lisp foreign-string</span>)</span></span>)</span></span>)</span>\n"
" ⇒ \"Turanga\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6076
msgid ""
"<a name=\"See-Also-43\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dstring_002dalloc\">foreign-string-alloc</a> <br>\n"
"<a href=\"#with_002dforeign_002dpointer_002das_002dstring\">with-foreign-"
"pointer-as-string</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:6092
msgid ""
"<hr>\n"
"<a name=\"with_002dforeign_002dpointer_002das_002dstring\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#with_002dforeign_002dstring\" accesskey=\"p\" rel=\"prev"
"\">with-foreign-string</a>, Up: <a href=\"#Strings\" accesskey=\"u\" rel=\"up"
"\">Strings</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" "
"rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index"
"\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">with-foreign-pointer-as-string</h4>\n"
"<a name=\"with_002dforeign_002dpointer_002das_002dstring-1\"></a>\n"
"<h3 class=\"heading\">with-foreign-pointer-as-string</h3>\n"
"<a name=\"Syntax-47\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-with_002dforeign_002dpointer_002das_002dstring\"></"
"a>Macro: <strong>with-foreign-pointer-as-string</strong> <em>(var size &amp;"
"optional size-var                                       &amp;rest args) &amp;"
"body body⇒ string</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6095
msgid ""
"<a name=\"Arguments-and-Values-46\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6109
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>var</var></dt>\n"
"<dd><p>A symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>string</var></dt>\n"
"<dd><p>A Lisp string.\n"
"</p>\n"
"</dd>\n"
"<dt><var>body</var></dt>\n"
"<dd><p>List of forms to be executed.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6119
msgid ""
"<a name=\"Description-47\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>with-foreign-pointer-as-string</code> macro is similar to\n"
"<code>with-foreign-pointer</code> except that <var>var</var> is used as the\n"
"returned value of an implicit <code>progn</code> around <var>body</var>, "
"after\n"
"being converted to a Lisp string using the provided <var>args</var>.\n"
"</p>\n"
"<a name=\"Examples-43\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-47\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>with-foreign-pointer-as-string</code> похож на макрос\n"
"<code>with-foreign-pointer</code>, за исключением того, что <var>var</var> "
"используется\n"
"как возвращаемое значение неявного <code>progn</code> вокруг тела макроса "
"<var>body</var>, \n"
"после преобразования в строку Lisp с использованием предоставленных "
"аргументов <var>args</var>.\n"
"</p>\n"
"<a name=\"Examples-43\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:6125
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">with-foreign-pointer-as-string</span></i> <span "
"class=\"paren2\">(<span class=\"lisp-bg\">str 6 str-size <span class="
"\"keyword\">:encoding</span> <span class=\"keyword\">:ascii</span></span>)</"
"span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">lisp-string-to-"
"foreign <span class=\"string\">\"Hello, foreign world!\"</span> str str-"
"size</span>)</span></span>)</span>\n"
" ⇒ \"Hello\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6131
msgid ""
"<a name=\"See-Also-44\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dstring_002dalloc\">foreign-string-alloc</a> <br>\n"
"<a href=\"#with_002dforeign_002dstring\">with-foreign-string</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:6141
msgid ""
"<hr>\n"
"<a name=\"Variables\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Functions\" accesskey=\"n\" rel=\"next\">Functions</a>, "
"Previous: <a href=\"#Strings\" accesskey=\"p\" rel=\"prev\">Strings</a>, Up: "
"<a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Variables-1\"></a>\n"
"<h2 class=\"chapter\">9 Variables</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Variables\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Functions\" accesskey=\"n\" rel=\"next\">Functions</a>, "
"Previous: <a href=\"#Strings\" accesskey=\"p\" rel=\"prev\">Strings</a>, Up: "
"<a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Variables-1\"></a>\n"
"<h2 class=\"chapter\">9 Переменные</h2>"

#: in/CFFI_User_Manual.htm:6144
msgctxt "in/CFFI_User_Manual.htm:6144"
msgid ""
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-"
"comment\">Dictionary"
msgstr ""

#: in/CFFI_User_Manual.htm:6150
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href=\"#defcvar"
"\" accesskey=\"1\">defcvar</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#get_002dvar_002dpointer"
"\" accesskey=\"2\">get-var-pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">\n"
"</td></tr>\n"
"</tbody></table>"
msgstr ""

#: in/CFFI_User_Manual.htm:6167
msgid ""
"<hr>\n"
"<a name=\"defcvar\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#get_002dvar_002dpointer\" accesskey=\"n\" rel=\"next\">get-"
"var-pointer</a>, Previous: <a href=\"#Variables\" accesskey=\"p\" rel=\"prev"
"\">Variables</a>, Up: <a href=\"#Variables\" accesskey=\"u\" rel=\"up"
"\">Variables</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">defcvar</h4>\n"
"<a name=\"defcvar-1\"></a>\n"
"<h3 class=\"heading\">defcvar</h3>\n"
"<a name=\"Syntax-48\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-defcvar\"></a>Macro: <strong>defcvar</strong> <em>name-"
"and-options type &amp;optional documentation⇒ lisp-name</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6173
msgid ""
"<p><var>name-and-options</var> ::= name | (name &amp;key read-only (library :"
"default)) <br>\n"
"<var>name</var> ::= lisp-name [foreign-name] | foreign-name [lisp-name]\n"
"</p>\n"
"<a name=\"Arguments-and-Values-47\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6195
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>foreign-name</var></dt>\n"
"<dd><p>A string denoting a foreign function.\n"
"</p>\n"
"</dd>\n"
"<dt><var>lisp-name</var></dt>\n"
"<dd><p>A symbol naming the Lisp function to be created.\n"
"</p>\n"
"</dd>\n"
"<dt><var>type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>read-only</var></dt>\n"
"<dd><p>A boolean.\n"
"</p>\n"
"</dd>\n"
"<dt><var>documentation</var></dt>\n"
"<dd><p>A Lisp string; not evaluated.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6212
msgid ""
"<a name=\"Description-48\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>defcvar</code> macro defines a symbol macro <var>lisp-name</"
"var> that looks\n"
"up <var>foreign-name</var> and dereferences it acording to <var>type</var>.  "
"It\n"
"can also be <code>setf</code>ed, unless <var>read-only</var> is true, in "
"which\n"
"case an error will be signaled.\n"
"</p>\n"
"<p>When one of <var>lisp-name</var> or <var>foreign-name</var> is omitted, "
"the\n"
"other is automatically derived using the following rules:\n"
"</p>\n"
"<ul>\n"
"<li> Foreign names are converted to Lisp names by uppercasing, replacing\n"
"underscores with hyphens, and wrapping around asterisks.\n"
"</li><li> Lisp names are converted to foreign names by lowercasing, "
"replacing\n"
"hyphens with underscores, and removing asterisks, if any.\n"
"</li></ul>"
msgstr ""
"<a name=\"Description-48\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>defcvar</code> определяет символьный макрос <var>lisp-name</"
"var>,\n"
"который находит <var>foreign-name</var> и разыменовывает его в соответствии "
"с\n"
"типом(<var>type</var>).  Он также может быть использован для <code>setf</"
"code>, \n"
"если только не установлен <var>read-only</var> в true, в этом случае будет \n"
"выдано сообщение об ошибке.\n"
"</p>\n"
"<p>Когда одно из <var>lisp-name</var> или <var>foreign-name</var> опущено, \n"
"другое автоматически выводиться с использованием следующих правил:\n"
"</p>\n"
"<ul>\n"
"<li> Внешние имена преобразуются в имена Lisp в верхнем регистре, заменяя\n"
"подчеркивания дефисами, и заключая их в звездочки.\n"
"</li><li> Имена Lisp преобразуются во внешние имена преобразованием в нижний "
"регистр, \n"
"заменяя дефисы подчеркиваниями и удаляя окружающие имя звездочки, если они "
"есть.\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:6215
msgid ""
"<a name=\"Examples-44\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6226
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcvar</span></i> <span class=\"string\">"
"\"errno\"</span> <span class=\"keyword\">:int</span></span>)</span>\n"
" ⇒ *ERRNO*\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-funcall "
"<span class=\"string\">\"strerror\"</span> <span class=\"keyword\">:int</"
"span> <span class=\"special\">*errno*</span> <span class=\"keyword\">:"
"string</span></span>)</span>\n"
" ⇒ \"Inappropriate ioctl for device\"\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">setf <span class="
"\"special\">*errno*</span> 1</span>)</span>\n"
" ⇒ 1\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">foreign-funcall "
"<span class=\"string\">\"strerror\"</span> <span class=\"keyword\">:int</"
"span> <span class=\"special\">*errno*</span> <span class=\"keyword\">:"
"string</span></span>)</span>\n"
" ⇒ \"Operation not permitted\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6236
msgid ""
"<p>Trying to modify a read-only foreign variable:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcvar</span></i> <span class="
"\"paren2\">(<span class=\"lisp-bg\"><span class=\"string\">\"errno\"</span> "
"+error-number+ <span class=\"keyword\">:read-only</span> t</span>)</span> "
"<span class=\"keyword\">:int</span></span>)</span>\n"
" ⇒ +ERROR-NUMBER+\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">setf +error-number"
"+ 12</span>)</span>\n"
"  <span class=\"comment\">;; error&amp;rarr; Trying to modify read-only "
"foreign var: +ERROR-NUMBER+.\n"
"  </span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6244
msgid ""
"<p><em>Note that accessing <code>errno</code> this way wonât work with "
"every\n"
"implementation of the C standard library.</em>\n"
"</p>\n"
"<a name=\"See-Also-45\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#get_002dvar_002dpointer\">get-var-pointer</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:6260
msgid ""
"<hr>\n"
"<a name=\"get_002dvar_002dpointer\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#defcvar\" accesskey=\"p\" rel=\"prev\">defcvar</a>, Up: "
"<a href=\"#Variables\" accesskey=\"u\" rel=\"up\">Variables</a> &nbsp; [<a "
"href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">get-var-pointer</h4>\n"
"<a name=\"get_002dvar_002dpointer-1\"></a>\n"
"<h3 class=\"heading\">get-var-pointer</h3>\n"
"<a name=\"Syntax-49\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-get_002dvar_002dpointer\"></a>Function: <strong>get-var-"
"pointer</strong> <em>symbol⇒ pointer</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6263
msgid ""
"<a name=\"Arguments-and-Values-48\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6273
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>symbol</var></dt>\n"
"<dd><p>A symbol denoting a foreign variable defined with <code>defcvar</"
"code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>pointer</var></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6282
msgid ""
"<a name=\"Description-49\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The function <code>get-var-pointer</code> will return a <var>pointer</"
"var> to the\n"
"foreign global variable <var>symbol</var> previously defined with\n"
"<code>defcvar</code>.\n"
"</p>\n"
"<a name=\"Examples-45\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-49\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Функция <code>get-var-pointer</code> возвращает указатель(<var>pointer</"
"var>) на\n"
"внешнюю глобальную переменную <var>symbol</var>, ранее определенну с "
"помощью\n"
"<code>defcvar</code>.\n"
"</p>\n"
"<a name=\"Examples-45\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:6293
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcvar</span></i> <span class=\"string\">"
"\"errno\"</span> <span class=\"keyword\">:int</span> <span class=\"keyword"
"\">:read-only</span> t</span>)</span>\n"
" ⇒ *ERRNO*\n"
"  CFFI&gt; *errno*\n"
" ⇒ 25\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">get-var-pointer "
"'<span class=\"special\">*errno*</span></span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #xA0008130&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">mem-ref * <span "
"class=\"keyword\">:int</span></span>)</span>\n"
" ⇒ 25\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6298
msgid ""
"<a name=\"See-Also-46\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcvar\">defcvar</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:6308
msgid ""
"<hr>\n"
"<a name=\"Functions\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Libraries\" accesskey=\"n\" rel=\"next\">Libraries</a>, "
"Previous: <a href=\"#Variables\" accesskey=\"p\" rel=\"prev\">Variables</a>, "
"Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Functions-1\"></a>\n"
"<h2 class=\"chapter\">10 Functions</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Functions\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Libraries\" accesskey=\"n\" rel=\"next\">Libraries</a>, "
"Previous: <a href=\"#Variables\" accesskey=\"p\" rel=\"prev\">Variables</a>, "
"Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Functions-1\"></a>\n"
"<h2 class=\"chapter\">10 Функции</h2>"

#: in/CFFI_User_Manual.htm:6312
msgid ""
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-"
"comment\">\n"
"Dictionary"
msgstr ""

#: in/CFFI_User_Manual.htm:6332
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href=\"#defcfun"
"\" accesskey=\"1\">defcfun</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#foreign_002dfuncall\" "
"accesskey=\"2\">foreign-funcall</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dfuncall_002dpointer\" accesskey=\"3\">foreign-funcall-"
"pointer</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dfuncall_002dvarargs\" accesskey=\"4\">foreign-funcall-"
"varargs</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#foreign_002dfuncall_002dpointer_002dvarargs\" accesskey=\"5\">foreign-"
"funcall-pointer-varargs</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dcamelcase_002dname\" accesskey=\"6\">translate-camelcase-"
"name</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dname_002dfrom_002dforeign\" accesskey=\"7\">translate-name-"
"from-foreign</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dname_002dto_002dforeign\" accesskey=\"8\">translate-name-to-"
"foreign</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#translate_002dunderscore_002dseparated_002dname\" accesskey="
"\"9\">translate-underscore-separated-name</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"</tbody></table>"
msgstr ""

#: in/CFFI_User_Manual.htm:6351
msgid ""
"<hr>\n"
"<a name=\"defcfun\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dfuncall\" accesskey=\"n\" rel=\"next\">foreign-"
"funcall</a>, Previous: <a href=\"#Functions\" accesskey=\"p\" rel=\"prev"
"\">Functions</a>, Up: <a href=\"#Functions\" accesskey=\"u\" rel=\"up"
"\">Functions</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">defcfun</h4>\n"
"<a name=\"defcfun-1\"></a>\n"
"<h3 class=\"heading\">defcfun</h3>\n"
"<a name=\"Syntax-50\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-defcfun\"></a>Macro: <strong>defcfun</strong> <em>name-"
"and-options return-type &amp;body [docstring] arguments [&amp;"
"rest]               ⇒ lisp-name</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6358
msgid ""
"<p><var>name-and-options</var> ::= <var>name</var> | (<var>name</var> &amp;"
"key <var>library</var> <var>convention</var>) <br>\n"
"<var>name</var> ::= <var>lisp-name</var> [<var>foreign-name</var>] | "
"<var>foreign-name</var> [<var>lisp-name</var>] <br>\n"
"<var>arguments</var> ::= { (<var>arg-name</var> <var>arg-type</var>) }* "
"<br>\n"
"</p>\n"
"<a name=\"Arguments-and-Values-49\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6389
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>foreign-name</var></dt>\n"
"<dd><p>A string denoting a foreign function.\n"
"</p>\n"
"</dd>\n"
"<dt><var>lisp-name</var></dt>\n"
"<dd><p>A symbol naming the Lisp function to be created.\n"
"</p>\n"
"</dd>\n"
"<dt><var>arg-name</var></dt>\n"
"<dd><p>A symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-type</var></dt>\n"
"<dt><var>arg-type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>convention</var></dt>\n"
"<dd><p>One of <code>:cdecl</code> (default) or <code>:stdcall</code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>library</var></dt>\n"
"<dd><p>A symbol designating a foreign library.\n"
"</p>\n"
"</dd>\n"
"<dt><var>docstring</var></dt>\n"
"<dd><p>A documentation string.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6404
msgid ""
"<a name=\"Description-50\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>defcfun</code> macro provides a declarative interface for "
"defining\n"
"Lisp functions that call foreign functions.\n"
"</p>\n"
"<p>When one of <var>lisp-name</var> or <var>foreign-name</var> is omitted, "
"the\n"
"other is automatically derived using the following rules:\n"
"</p>\n"
"<ul>\n"
"<li> Foreign names are converted to Lisp names by uppercasing and replacing\n"
"underscores with hyphens.\n"
"</li><li> Lisp names are converted to foreign names by lowercasing and "
"replacing\n"
"hyphens with underscores.\n"
"</li></ul>"
msgstr ""
"<a name=\"Description-50\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>defcfun</code> предоставляет декларативный интерфейс для "
"определения\n"
"функций Lisp, которые вызывают внешние функции.\n"
"</p>\n"
"<p>Когда одно из имен <var>lisp-name</var> или <var>foreign-name</var> "
"опущено, другое\n"
"автоматически выводиться с использованием следующих правил:\n"
"</p>\n"
"<ul>\n"
"<li> Внешние имена преобразуются в имена Lisp преобразованием в верхний "
"регистр, \n"
"заменяя подчеркивания на дефисы.\n"
"</li><li> Имена Lisp преобразуются во внешние имена преобразованием в нижний "
"регистр и\n"
"заменой дефисов на подчеркивания.\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:6425
msgid ""
"<p>If you place the symbol <code>&amp;rest</code> in the end of the argument "
"list\n"
"after the fixed arguments, <code>defcfun</code> will treat the foreign\n"
"function as a <strong>variadic function</strong>. The variadic arguments\n"
"should be passed in a way similar to what <code>foreign-funcall</code> "
"would\n"
"expect. Unlike <code>foreign-funcall</code> though, <code>defcfun</code> "
"will take\n"
"care of doing argument promotion. Note that in this case\n"
"<code>defcfun</code> will generate a Lisp <em>macro</em> instead of a\n"
"function and will only work for Lisps that support\n"
"<code>foreign-funcall.</code>\n"
"</p>\n"
"<p>If a foreign structure is to be passed or returned by value (that is,\n"
"the type is of the form <code>(:struct ...)</code>), then the cffi-libffi "
"system\n"
"must be loaded, which in turn depends on\n"
"<a href=\"http://sourceware.org/libffi/\">libffi</a>, including the header "
"files.\n"
"Failure to load that system will result in an error.\n"
"Variadic functions cannot at present accept or return structures by\n"
"value.\n"
"</p>\n"
"<a name=\"Examples-46\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<p>Если вы поместите символ <code>&amp;rest</code> в конец списка "
"аргументов\n"
"после фиксированных аргументов, <code>defcfun</code> будет рассматривать\n"
"внешнюю функцию, как <strong>функцию с переменным числом аргументов(variadic "
"function)</strong>. \n"
"Аргументы функции с переменным числом аргументов должны передаваться "
"способом,\n"
"аналогичным тому, котоырй ожидалм бы медод <code>foreign-funcall</code>. \n"
"В от метода <code>foreign-funcall</code>, <code>defcfun</code> позаботится\n"
"о продвижении аргументов. Обратите внимание, что в этом случае "
"<code>defcfun</code> \n"
"сгенерируетм макрос<em>macro</em> Лисп, вместо функции и будет работать "
"только\n"
"для Lisp-ов, которые поддерживают <code>foreign-funcall.</code>\n"
"</p>\n"
"<p>Если внешняя структура должна быть передана или возвращена по значению (т."
"е.\n"
"тип имеет форму <code>(:struct ...)</code>), то должна быть загружена\n"
"система cffi-libffi, которая в свою очередь, зависит от\n"
"<a href=\"http://sourceware.org/libffi/\">libffi</a>, включая заголовочные "
"файлы.\n"
"Невозможность загрузить эту систему приведт к ошибке. Функции с перемнным\n"
"числом аргументов(Variadic) в настоящее время не могут принимать или "
"возвращать\n"
"структуры по значению.\n"
"</p>\n"
"<a name=\"Examples-46\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:6430
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcfun</span></i> <span class=\"string\">"
"\"strlen\"</span> <span class=\"keyword\">:int</span>\n"
"    <span class=\"string\">\"Calculate the length of a string.\"</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">n <span class=\"keyword"
"\">:string</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:6434
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">strlen <span "
"class=\"string\">\"123\"</span></span>)</span>\n"
" ⇒ 3\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6437
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcfun</span></i> <span class="
"\"paren2\">(<span class=\"lisp-bg\"><span class=\"string\">\"abs\"</span> c-"
"abs</span>)</span> <span class=\"keyword\">:int</span> <span class="
"\"paren2\">(<span class=\"lisp-bg\">n <span class=\"keyword\">:int</span></"
"span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:6441
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">c-abs -42</"
"span>)</span>\n"
" ⇒ 42\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6446
msgid ""
"<p>Function without arguments:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcfun</span></i> <span class=\"string\">\"rand"
"\"</span> <span class=\"keyword\">:int</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:6450
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">rand</span>)</"
"span>\n"
" ⇒ 1804289383\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6458
msgid ""
"<p>Variadic function example:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcfun</span></i> <span class=\"string\">"
"\"sprintf\"</span> <span class=\"keyword\">:int</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">str <span class=\"keyword"
"\">:pointer</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">control <span class="
"\"keyword\">:string</span></span>)</span>\n"
"    &amp;rest</span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:6464
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-pointer-as-string</span></i> <span class="
"\"paren2\">(<span class=\"lisp-bg\">s 100</span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">sprintf s <span "
"class=\"string\">\"%c %d %.2f %s\"</span> <span class=\"keyword\">:char</"
"span> 90 <span class=\"keyword\">:short</span> 42 <span class=\"keyword\">:"
"float</span> pi\n"
"                   <span class=\"keyword\">:string</span> <span class="
"\"string\">\"super-locrian\"</span></span>)</span></span>)</span>\n"
" ⇒ \"A 42 3.14 super-locrian\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6472
msgid ""
"<a name=\"See-Also-47\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#foreign_002dfuncall\">foreign-funcall</a> <br>\n"
"<a href=\"#foreign_002dfuncall_002dpointer\">foreign-funcall-pointer</a> "
"<br>\n"
"<a href=\"#foreign_002dfuncall_002dvarargs\">foreign-funcall-varargs</a> "
"<br>\n"
"<a href=\"#foreign_002dfuncall_002dpointer_002dvarargs\">foreign-funcall-"
"pointer-varargs</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:6488
msgid ""
"<hr>\n"
"<a name=\"foreign_002dfuncall\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dfuncall_002dpointer\" accesskey=\"n\" rel=\"next"
"\">foreign-funcall-pointer</a>, Previous: <a href=\"#defcfun\" accesskey=\"p"
"\" rel=\"prev\">defcfun</a>, Up: <a href=\"#Functions\" accesskey=\"u\" rel="
"\"up\">Functions</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-funcall</h4>\n"
"<a name=\"foreign_002dfuncall-1\"></a>\n"
"<h3 class=\"heading\">foreign-funcall</h3>\n"
"<a name=\"Syntax-51\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dfuncall\"></a>Macro: <strong>foreign-"
"funcall</strong> <em>name-and-options &amp;rest arguments⇒ return-value</"
"em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6494
msgid ""
"<p><var>arguments</var> ::= { <var>arg-type</var> <var>arg</var> }* "
"[<var>return-type</var>] <br>\n"
"<var>name-and-options</var> ::= <var>name</var> | (<var>name</var> &amp;key "
"<var>library</var> <var>convention</var>) <br>\n"
"</p>\n"
"<a name=\"Arguments-and-Values-50\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6524
msgctxt "in/CFFI_User_Manual.htm:6524"
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>name</var></dt>\n"
"<dd><p>A Lisp string.\n"
"</p>\n"
"</dd>\n"
"<dt><var>arg-type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>arg</var></dt>\n"
"<dd><p>An argument of type <var>arg-type</var>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-type</var></dt>\n"
"<dd><p>A foreign type, <code>:void</code> by default.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-value</var></dt>\n"
"<dd><p>A lisp object.\n"
"</p>\n"
"</dd>\n"
"<dt><var>library</var></dt>\n"
"<dd><p>A lisp symbol; not evaluated.\n"
"</p>\n"
"</dd>\n"
"<dt><var>convention</var></dt>\n"
"<dd><p>One of <code>:cdecl</code> (default) or <code>:stdcall</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6550
msgid ""
"<a name=\"Description-51\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>foreign-funcall</code> macro is the main primitive for calling\n"
"foreign functions.\n"
"</p>\n"
"<p>If a foreign structure is to be passed or returned by value (that is,\n"
"the type is of the form <code>(:struct ...)</code>), then the cffi-libffi "
"system\n"
"must be loaded, which in turn depends on\n"
"<a href=\"http://sourceware.org/libffi/\">libffi</a>, including the header "
"files.\n"
"Failure to load that system will result in an error.\n"
"Variadic functions cannot at present accept or return structures by\n"
"value.\n"
"</p>\n"
"<p><em>Note: The return value of foreign-funcall on functions with a\n"
":void return type is still undefined.</em>\n"
"</p>\n"
"<a name=\"Implementation_002dspecific-Notes-2\"></a>\n"
"<h4 class=\"subheading\">Implementation-specific Notes</h4>\n"
"<ul>\n"
"<li> Corman Lisp does not support <code>foreign-funcall</code>. On\n"
"implementations that <strong>donât</strong> support <code>foreign-funcall</"
"code>\n"
"<code>cffi-sys::no-foreign-funcall</code> will be present in\n"
"<code>*features*</code>. Note: in these Lisps you can still use the\n"
"<code>defcfun</code> interface.\n"
"</li></ul>"
msgstr ""
"<a name=\"Description-51\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>foreign-funcall</code> является основным примитивом для\n"
"вызова внешних функций.\n"
"</p>\n"
"<p>Если внешняя структура должна быть передана или возвращена по\n"
"значению(то есть тип имеет форму <code>(:struct ...)</code>), то должна "
"быть\n"
"загружена система cffi-libffi, которая в свою очередь зависит от\n"
"<a href=\"http://sourceware.org/libffi/\">libffi</a>, включая заголовочные "
"файлы.\n"
"Невозможность загрузить эту систему приведет к ошибке.\n"
"Функции с переменным количеством аргументов(Variadic) в нестоящее время не "
"могут\n"
"принимать и возвращать структуры по значению.\n"
"</p>\n"
"<p><em>Примечание: Возвращаемое значение foreign-funcall для функций с "
"возвращаемым\n"
"типом :void не определено.</em>\n"
"</p>\n"
"<a name=\"Implementation_002dspecific-Notes-2\"></a>\n"
"<h4 class=\"subheading\">Implementation-specific Notes</h4>\n"
"<ul>\n"
"<li> Corman Lisp does not support <code>foreign-funcall</code>. On\n"
"implementations that <strong>donât</strong> support <code>foreign-funcall</"
"code>\n"
"<code>cffi-sys::no-foreign-funcall</code> will be present in\n"
"<code>*features*</code>. Note: in these Lisps you can still use the\n"
"<code>defcfun</code> interface.\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:6553
msgid ""
"<a name=\"Examples-47\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6558
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-funcall <span class=\"string\">\"strlen\"</span> <span class="
"\"keyword\">:string</span> <span class=\"string\">\"foo\"</span> <span class="
"\"keyword\">:int</span></span>)</span>\n"
" ⇒ 3\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6567
msgid ""
"<p>Given the C code:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">void print_number(int n)\n"
"{\n"
"    printf(\"N: %d\\n\", n);\n"
"}\n"
"</pre></div>"
msgstr ""
"<p>Учитывая код на Си:\n"
"</p>\n"
"<div class=\"example\">\n"
"<pre class=\"example\">void print_number(int n)\n"
"{\n"
"    printf(\"N: %d\\n\", n);\n"
"}\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:6573
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-funcall <span class=\"string\">\"print_number\"</span> <span "
"class=\"keyword\">:int</span> 123456</span>)</span>\n"
"  -| N: 123456\n"
" ⇒ NIL\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6581
msgid ""
"<p>Or, equivalently:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-funcall <span class=\"string\">\"print_number\"</span> <span "
"class=\"keyword\">:int</span> 123456 <span class=\"keyword\">:void</span></"
"span>)</span>\n"
"  -| N: 123456\n"
" ⇒ NIL\n"
"</pre></div>"
msgstr ""
"<p>Или, эквивалентный:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-funcall <span class=\"string\">\"print_number\"</span> <span "
"class=\"keyword\">:int</span> 123456 <span class=\"keyword\">:void</span></"
"span>)</span>\n"
"  -| N: 123456\n"
" ⇒ NIL\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:6589
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-funcall <span class=\"string\">\"printf\"</span> <span class="
"\"keyword\">:string</span> <span class=\"paren2\">(<span class=\"lisp-bg"
"\">format nil <span class=\"string\">\"%s: %d.~%\"</span></span>)</span>\n"
"                         <span class=\"keyword\">:string</span> <span class="
"\"string\">\"So long and thanks for all the fish\"</span>\n"
"                         <span class=\"keyword\">:int</span> 42 <span class="
"\"keyword\">:int</span></span>)</span>\n"
"  -| So long and thanks for all the fish: 42.\n"
" ⇒ 41\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6595
msgid ""
"<a name=\"See-Also-48\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcfun\">defcfun</a> <br>\n"
"<a href=\"#foreign_002dfuncall_002dpointer\">foreign-funcall-pointer</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:6611
msgid ""
"<hr>\n"
"<a name=\"foreign_002dfuncall_002dpointer\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dfuncall_002dvarargs\" accesskey=\"n\" rel=\"next"
"\">foreign-funcall-varargs</a>, Previous: <a href=\"#foreign_002dfuncall\" "
"accesskey=\"p\" rel=\"prev\">foreign-funcall</a>, Up: <a href=\"#Functions\" "
"accesskey=\"u\" rel=\"up\">Functions</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-funcall-pointer</h4>\n"
"<a name=\"foreign_002dfuncall_002dpointer-1\"></a>\n"
"<h3 class=\"heading\">foreign-funcall-pointer</h3>\n"
"<a name=\"Syntax-52\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dfuncall_002dpointer\"></a>Macro: "
"<strong>foreign-funcall-pointer</strong> <em>pointer options &amp;rest "
"arguments⇒ return-value</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6617
msgid ""
"<p><var>arguments</var> ::= { <var>arg-type</var> <var>arg</var> }* "
"[<var>return-type</var>] <br>\n"
"<var>options</var> ::= (&amp;key <var>convention</var>) <br>\n"
"</p>\n"
"<a name=\"Arguments-and-Values-51\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6643
msgctxt "in/CFFI_User_Manual.htm:6643"
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>pointer</var></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>arg-type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>arg</var></dt>\n"
"<dd><p>An argument of type <var>arg-type</var>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-type</var></dt>\n"
"<dd><p>A foreign type, <code>:void</code> by default.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-value</var></dt>\n"
"<dd><p>A lisp object.\n"
"</p>\n"
"</dd>\n"
"<dt><var>convention</var></dt>\n"
"<dd><p>One of <code>:cdecl</code> (default) or <code>:stdcall</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6661
msgid ""
"<a name=\"Description-52\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>foreign-funcall</code> macro is the main primitive for calling\n"
"foreign functions.\n"
"</p>\n"
"<p><em>Note: The return value of foreign-funcall on functions with a\n"
":void return type is still undefined.</em>\n"
"</p>\n"
"<a name=\"Implementation_002dspecific-Notes-3\"></a>\n"
"<h4 class=\"subheading\">Implementation-specific Notes</h4>\n"
"<ul>\n"
"<li> Corman Lisp does not support <code>foreign-funcall</code>. On\n"
"implementations that <strong>donât</strong> support <code>foreign-funcall</"
"code>\n"
"<code>cffi-sys::no-foreign-funcall</code> will be present in\n"
"<code>*features*</code>. Note: in these Lisps you can still use the\n"
"<code>defcfun</code> interface.\n"
"</li></ul>"
msgstr ""
"<a name=\"Description-52\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>foreign-funcall</code> является основным примитивом для "
"вызова внешних\n"
"фукнций.\n"
"</p>\n"
"<p><em>Примечание: Возвращаемое значение foreign-funcall для функций с "
"возвращаемым\n"
"типом :void по прежнему не определено.</em>\n"
"</p>\n"
"<a name=\"Implementation_002dspecific-Notes-3\"></a>\n"
"<h4 class=\"subheading\">Implementation-specific Notes</h4>\n"
"<ul>\n"
"<li> Corman Lisp does not support <code>foreign-funcall</code>. On\n"
"implementations that <strong>donât</strong> support <code>foreign-funcall</"
"code>\n"
"<code>cffi-sys::no-foreign-funcall</code> will be present in\n"
"<code>*features*</code>. Note: in these Lisps you can still use the\n"
"<code>defcfun</code> interface.\n"
"</li></ul>"

#: in/CFFI_User_Manual.htm:6664
msgid ""
"<a name=\"Examples-48\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6670
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">foreign-funcall-pointer <span class=\"paren2\">(<span class=\"lisp-bg"
"\">foreign-symbol-pointer <span class=\"string\">\"abs\"</span></span>)</"
"span> <span class=\"paren2\">(<span class=\"lisp-bg\"></span>)</span>\n"
"                                 <span class=\"keyword\">:int</span> -42 "
"<span class=\"keyword\">:int</span></span>)</span>\n"
" ⇒ 42\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6676
msgid ""
"<a name=\"See-Also-49\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcfun\">defcfun</a> <br>\n"
"<a href=\"#foreign_002dfuncall\">foreign-funcall</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:6692
msgid ""
"<hr>\n"
"<a name=\"foreign_002dfuncall_002dvarargs\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#foreign_002dfuncall_002dpointer_002dvarargs\" accesskey=\"n"
"\" rel=\"next\">foreign-funcall-pointer-varargs</a>, Previous: <a href="
"\"#foreign_002dfuncall_002dpointer\" accesskey=\"p\" rel=\"prev\">foreign-"
"funcall-pointer</a>, Up: <a href=\"#Functions\" accesskey=\"u\" rel=\"up"
"\">Functions</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-funcall-varargs</h4>\n"
"<a name=\"foreign_002dfuncall_002dvarargs-1\"></a>\n"
"<h3 class=\"heading\">foreign-funcall-varargs</h3>\n"
"<a name=\"Syntax-53\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dfuncall_002dvarargs\"></a>Macro: "
"<strong>foreign-funcall-varargs</strong> <em>name-and-options (fixed-"
"arguments) &amp;rest arguments⇒ return-value</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6699
msgid ""
"<p><var>fixed-arguments</var> ::= { <var>arg-type</var> <var>arg</var> }* "
"[<var>return-type</var>] <br>\n"
"<var>arguments</var> ::= { <var>arg-type</var> <var>arg</var> }* "
"[<var>return-type</var>] <br>\n"
"<var>name-and-options</var> ::= <var>name</var> | (<var>name</var> &amp;key "
"<var>library</var> <var>convention</var>) <br>\n"
"</p>\n"
"<a name=\"Arguments-and-Values-52\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6729
msgctxt "in/CFFI_User_Manual.htm:6729"
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>name</var></dt>\n"
"<dd><p>A Lisp string.\n"
"</p>\n"
"</dd>\n"
"<dt><var>arg-type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>arg</var></dt>\n"
"<dd><p>An argument of type <var>arg-type</var>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-type</var></dt>\n"
"<dd><p>A foreign type, <code>:void</code> by default.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-value</var></dt>\n"
"<dd><p>A lisp object.\n"
"</p>\n"
"</dd>\n"
"<dt><var>library</var></dt>\n"
"<dd><p>A lisp symbol; not evaluated.\n"
"</p>\n"
"</dd>\n"
"<dt><var>convention</var></dt>\n"
"<dd><p>One of <code>:cdecl</code> (default) or <code>:stdcall</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6739
msgid ""
"<a name=\"Description-53\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>foreign-funcall-varargs</code> macro is the main primitive for\n"
"calling foreign variadic functions. It behaves similarily to\n"
"<code>foreign-funcall</code> except <code>fixed-arguments</code> are "
"distinguished\n"
"from the remaining arguments.\n"
"</p>\n"
"<a name=\"Examples-49\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-53\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>foreign-funcall-varargs</code> является основным примитивом "
"для вызова\n"
"внешних функций с переменным числом аргументов(variadic). Он ведет себя "
"подобно\n"
"<code>foreign-funcall</code>, за исключением того что фиксированные "
"аргументы(<code>fixed-arguments</code>)\n"
"отличаются от остальных аргументов.\n"
"</p>\n"
"<a name=\"Examples-49\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:6748
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">with-foreign-pointer-as-string</span></i> <span "
"class=\"paren2\">(<span class=\"lisp-bg\">s 100</span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">setf <span class="
"\"paren3\">(<span class=\"lisp-bg\">mem-ref s <span class=\"keyword\">:char</"
"span></span>)</span> 0</span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-funcall-"
"varargs\n"
"           <span class=\"string\">\"sprintf\"</span> <span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:pointer</span> "
"s <span class=\"keyword\">:string</span></span>)</span> <span class=\"string"
"\">\"%.2f\"</span></span>)</span>\n"
"           <span class=\"keyword\">:double</span> <span class="
"\"paren2\">(<span class=\"lisp-bg\">coerce pi 'double-float</span>)</span> "
"<span class=\"keyword\">:int</span></span>)</span>)\n"
" ⇒ 3.14\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6765
msgid ""
"<hr>\n"
"<a name=\"foreign_002dfuncall_002dpointer_002dvarargs\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#translate_002dcamelcase_002dname\" accesskey=\"n\" rel="
"\"next\">translate-camelcase-name</a>, Previous: <a href="
"\"#foreign_002dfuncall_002dvarargs\" accesskey=\"p\" rel=\"prev\">foreign-"
"funcall-varargs</a>, Up: <a href=\"#Functions\" accesskey=\"u\" rel=\"up"
"\">Functions</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">foreign-funcall-pointer-varargs</h4>\n"
"<a name=\"foreign_002dfuncall_002dpointer_002dvarargs-1\"></a>\n"
"<h3 class=\"heading\">foreign-funcall-pointer-varargs</h3>\n"
"<a name=\"Syntax-54\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-foreign_002dfuncall_002dpointer_002dvarargs\"></a>Macro: "
"<strong>foreign-funcall-pointer-varargs</strong> <em>pointer options (fixed-"
"arguments) &amp;rest arguments⇒ return-value</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6772
msgid ""
"<p><var>fixed-arguments</var> ::= { <var>arg-type</var> <var>arg</var> }* "
"[<var>return-type</var>] <br>\n"
"<var>arguments</var> ::= { <var>arg-type</var> <var>arg</var> }* "
"[<var>return-type</var>] <br>\n"
"<var>options</var> ::= (&amp;key <var>convention</var>) <br>\n"
"</p>\n"
"<a name=\"Arguments-and-Values-53\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6798
msgctxt "in/CFFI_User_Manual.htm:6798"
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>pointer</var></dt>\n"
"<dd><p>A foreign pointer.\n"
"</p>\n"
"</dd>\n"
"<dt><var>arg-type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>arg</var></dt>\n"
"<dd><p>An argument of type <var>arg-type</var>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-type</var></dt>\n"
"<dd><p>A foreign type, <code>:void</code> by default.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-value</var></dt>\n"
"<dd><p>A lisp object.\n"
"</p>\n"
"</dd>\n"
"<dt><var>convention</var></dt>\n"
"<dd><p>One of <code>:cdecl</code> (default) or <code>:stdcall</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6808
msgid ""
"<a name=\"Description-54\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>foreign-funcall-pointer-varargs</code> macro is the main "
"primitive\n"
"for calling foreign variadic functions. It behaves similarily to\n"
"<code>foreign-funcall-pointer</code> except <code>fixed-arguments</code> "
"are\n"
"distinguished from the remaining arguments.\n"
"</p>\n"
"<a name=\"Examples-50\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-54\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>foreign-funcall-pointer-varargs</code> является основным \n"
"примитивовом для вызова внешних функций с переменным числом аргументов. Он\n"
"ведет себя аналогично <code>foreign-funcall-pointer</code> за исключением\n"
"того, что <code>fixed-arguments</code> отличаются от остальных аргументов..\n"
"</p>\n"
"<a name=\"Examples-50\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:6817
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">with-foreign-pointer-as-string</span></i> <span "
"class=\"paren2\">(<span class=\"lisp-bg\">s 100</span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">setf <span class="
"\"paren3\">(<span class=\"lisp-bg\">mem-ref s <span class=\"keyword\">:char</"
"span></span>)</span> 0</span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-funcall-"
"pointer-varargs\n"
"           <span class=\"paren3\">(<span class=\"lisp-bg\">foreign-symbol-"
"pointer <span class=\"string\">\"sprintf\"</span></span>)</span> <span class="
"\"paren3\">(<span class=\"lisp-bg\"></span>)</span> <span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:pointer</span> "
"s <span class=\"keyword\">:string</span> <span class=\"string\">\"%.2f\"</"
"span></span>)</span>\n"
"           <span class=\"keyword\">:double</span> <span class="
"\"paren3\">(<span class=\"lisp-bg\">coerce pi 'double-float</span>)</span> "
"<span class=\"keyword\">:int</span></span>)</span></span>)</span>\n"
" ⇒ 3.14\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6834
msgid ""
"<hr>\n"
"<a name=\"translate_002dcamelcase_002dname\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#translate_002dname_002dfrom_002dforeign\" accesskey=\"n\" "
"rel=\"next\">translate-name-from-foreign</a>, Previous: <a href="
"\"#foreign_002dfuncall_002dpointer_002dvarargs\" accesskey=\"p\" rel=\"prev"
"\">foreign-funcall-pointer-varargs</a>, Up: <a href=\"#Functions\" accesskey="
"\"u\" rel=\"up\">Functions</a> &nbsp; [<a href=\"#SEC_Contents\" title="
"\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">translate-camelcase-name</h4>\n"
"<a name=\"translate_002dcamelcase_002dname-1\"></a>\n"
"<h3 class=\"heading\">translate-camelcase-name</h3>\n"
"<a name=\"Syntax-55\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-translate_002dcamelcase_002dname\"></a>Function: "
"<strong>translate-camelcase-name</strong> <em>name &amp;key upper-initial-p "
"special-words⇒ return-value</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6837
msgid ""
"<a name=\"Arguments-and-Values-54\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6855
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>name</var></dt>\n"
"<dd><p>Either a symbol or a string.\n"
"</p>\n"
"</dd>\n"
"<dt><var>upper-initial-p</var></dt>\n"
"<dd><p>A generalized boolean.\n"
"</p>\n"
"</dd>\n"
"<dt><var>special words</var></dt>\n"
"<dd><p>A list of strings.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-value</var></dt>\n"
"<dd><p>If <var>name</var> is a symbol, this is a string, and vice versa.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6869
msgid ""
"<a name=\"Description-55\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p><code>translate-camelcase-name</code> is a helper function for\n"
"specializations of <code>translate-name-from-foreign</code> and\n"
"<code>translate-name-to-foreign</code>. It handles the common case of\n"
"converting between foreign camelCase names and lisp\n"
"names. <var>upper-initial-p</var> indicates whether the first letter of the\n"
"foreign name should be uppercase. <var>special-words</var> is a list of\n"
"strings that should be treated atomically in translation. This list is\n"
"case-sensitive.\n"
"</p>\n"
"<a name=\"Examples-51\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-55\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p><code>translate-camelcase-name</code> является вспомогательной\n"
"функцией для специализаций <code>translate-name-from-foreign</code> и\n"
"<code>translate-name-to-foreign</code>. Она обрабатывает общий\n"
"случай конвертации между внешними именами camelCase и именами lisp. \n"
"<var>upper-initial-p</var> указывает, должна ли первая буква внешнего\n"
"имени быть в вернем регистре. <var>special-words</var> это список строк,\n"
"которые дожны рассматриваться атомарно при  преобразовании. Это список\n"
"чувствителен к регистру.\n"
"</p>\n"
"<a name=\"Examples-51\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:6882
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">translate-camelcase-name some-xml-function</span>)</span>\n"
" ⇒ \"someXmlFunction\"\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">translate-"
"camelcase-name some-xml-function <span class=\"keyword\">:upper-initial-p</"
"span> t</span>)</span>\n"
" ⇒ \"SomeXmlFunction\"\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">translate-"
"camelcase-name some-xml-function <span class=\"keyword\">:special-words</"
"span> '<span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"string"
"\">\"XML\"</span></span>)</span></span>)</span>\n"
" ⇒ \"someXMLFunction\"\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">translate-"
"camelcase-name <span class=\"string\">\"someXMLFunction\"</span></span>)</"
"span>\n"
" ⇒ SOME-X-M-L-FUNCTION\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">translate-"
"camelcase-name <span class=\"string\">\"someXMLFunction\"</span> <span class="
"\"keyword\">:special-words</span> '<span class=\"paren2\">(<span class="
"\"lisp-bg\"><span class=\"string\">\"XML\"</span></span>)</span></span>)</"
"span>\n"
" ⇒ SOME-XML-FUNCTION\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6889
msgid ""
"<a name=\"See-Also-50\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#translate_002dname_002dfrom_002dforeign\">translate-name-from-"
"foreign</a> <br>\n"
"<a href=\"#translate_002dname_002dto_002dforeign\">translate-name-to-"
"foreign</a> <br>\n"
"<a href=\"#translate_002dunderscore_002dseparated_002dname\">translate-"
"underscore-separated-name</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:6905
msgid ""
"<hr>\n"
"<a name=\"translate_002dname_002dfrom_002dforeign\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#translate_002dname_002dto_002dforeign\" accesskey=\"n\" rel="
"\"next\">translate-name-to-foreign</a>, Previous: <a href="
"\"#translate_002dcamelcase_002dname\" accesskey=\"p\" rel=\"prev\">translate-"
"camelcase-name</a>, Up: <a href=\"#Functions\" accesskey=\"u\" rel=\"up"
"\">Functions</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">translate-name-from-foreign</h4>\n"
"<a name=\"translate_002dname_002dfrom_002dforeign-1\"></a>\n"
"<h3 class=\"heading\">translate-name-from-foreign</h3>\n"
"<a name=\"Syntax-56\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-translate_002dname_002dfrom_002dforeign\"></a>Function: "
"<strong>translate-name-from-foreign</strong> <em>foreign-name package &amp;"
"optional varp⇒ symbol</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6908
msgid ""
"<a name=\"Arguments-and-Values-55\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6926
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>foreign-name</var></dt>\n"
"<dd><p>A string denoting a foreign function.\n"
"</p>\n"
"</dd>\n"
"<dt><var>package</var></dt>\n"
"<dd><p>A Lisp package\n"
"</p>\n"
"</dd>\n"
"<dt><var>varp</var></dt>\n"
"<dd><p>A generalized boolean.\n"
"</p>\n"
"</dd>\n"
"<dt><var>symbol</var></dt>\n"
"<dd><p>The Lisp symbol to be used a function name.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6941
msgid ""
"<a name=\"Description-56\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p><code>translate-name-from-foreign</code> is used by <a href=\"#defcfun"
"\">defcfun</a> to handle\n"
"the conversion of foreign names to lisp names. By default, it\n"
"translates using <a href=\"#translate_002dunderscore_002dseparated_002dname"
"\">translate-underscore-separated-name</a>. However,\n"
"you can create specialized methods on this function to make\n"
"translating more closely match the foreign libraryâs naming\n"
"conventions.\n"
"</p>\n"
"<p>Specialize <var>package</var> on some package. This allows other "
"packages\n"
"to load libraries with different naming conventions.\n"
"</p>\n"
"<a name=\"Examples-52\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-56\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p><code>translate-name-from-foreign</code> используется <a href=\"#defcfun"
"\">defcfun</a> для\n"
"обработки преобразования внешних имен в имна lisp. По умолчанию, она "
"преобразует\n"
"используя <a href=\"#translate_002dunderscore_002dseparated_002dname"
"\">translate-underscore-separated-name</a>. Однако, вы можете создать "
"специализированные методы для этой функции,\n"
"чтобы преобразования более точно соответствовали соглашениям о\n"
"внешних именах во внешней библиотеке.\n"
"</p>\n"
"<p>Специализируйте <var>package</var> для нескольких пакетов. Это позволит\n"
"вам загружать библиотеки с различными соглашениями о преобразованиях имен.\n"
"</p>\n"
"<a name=\"Examples-52\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:6954
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcfun</span></i> <span class=\"string\">"
"\"someXmlFunction\"</span> ...</span>)</span>\n"
" ⇒ SOMEXMLFUNCTION\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defmethod</span></i> translate-name-from-foreign <span class="
"\"paren2\">(<span class=\"lisp-bg\"><span class=\"paren3\">(<span class="
"\"lisp-bg\">spec string</span>)</span>\n"
"                                                <span class="
"\"paren3\">(<span class=\"lisp-bg\">package <span class=\"paren4\">(<span "
"class=\"lisp-bg\">eql <span class=\"special\">*package*</span></span>)</"
"span></span>)</span>\n"
"                                                &amp;optional varp</span>)</"
"span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">let</span></i> <span class=\"paren3\">(<span class=\"lisp-bg"
"\"><span class=\"paren4\">(<span class=\"lisp-bg\">name <span class="
"\"paren5\">(<span class=\"lisp-bg\">translate-camelcase-name spec</span>)</"
"span></span>)</span></span>)</span>\n"
"            <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">if</span></i> varp <span class=\"paren4\">(<span class=\"lisp-bg"
"\">intern <span class=\"paren5\">(<span class=\"lisp-bg\">format nil <span "
"class=\"string\">\"*~a*\"</span> name</span>)</span></span>)</span> name</"
"span>)</span></span>)</span></span>)</span>\n"
" ⇒ #&lt;STANDARD-METHOD TRANSLATE-NAME-FROM-FOREIGN <span class="
"\"paren1\">(<span class=\"lisp-bg\">STRING <span class=\"paren2\">(<span "
"class=\"lisp-bg\">EQL #&lt;Package <span class=\"string\">\"SOME-PACKAGE\"</"
"span>&gt;</span>)</span></span>)</span>&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defcfun</span></i> <span class=\"string\">\"someXmlFunction\"</"
"span> ...</span>)</span>\n"
" ⇒ SOME-XML-FUNCTION\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:6962
msgid ""
"<a name=\"See-Also-51\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcfun\">defcfun</a> <br>\n"
"<a href=\"#translate_002dcamelcase_002dname\">translate-camelcase-name</a> "
"<br>\n"
"<a href=\"#translate_002dname_002dto_002dforeign\">translate-name-to-"
"foreign</a> <br>\n"
"<a href=\"#translate_002dunderscore_002dseparated_002dname\">translate-"
"underscore-separated-name</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:6978
msgid ""
"<hr>\n"
"<a name=\"translate_002dname_002dto_002dforeign\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#translate_002dunderscore_002dseparated_002dname\" accesskey="
"\"n\" rel=\"next\">translate-underscore-separated-name</a>, Previous: <a "
"href=\"#translate_002dname_002dfrom_002dforeign\" accesskey=\"p\" rel=\"prev"
"\">translate-name-from-foreign</a>, Up: <a href=\"#Functions\" accesskey=\"u"
"\" rel=\"up\">Functions</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table "
"of contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index"
"\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">translate-name-to-foreign</h4>\n"
"<a name=\"translate_002dname_002dto_002dforeign-1\"></a>\n"
"<h3 class=\"heading\">translate-name-to-foreign</h3>\n"
"<a name=\"Syntax-57\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-translate_002dname_002dto_002dforeign\"></a>Function: "
"<strong>translate-name-to-foreign</strong> <em>lisp-name package &amp;"
"optional varp⇒ string</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:6981
msgid ""
"<a name=\"Arguments-and-Values-56\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:6999
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>lisp-name</var></dt>\n"
"<dd><p>A symbol naming the Lisp function to be created.\n"
"</p>\n"
"</dd>\n"
"<dt><var>package</var></dt>\n"
"<dd><p>A Lisp package\n"
"</p>\n"
"</dd>\n"
"<dt><var>varp</var></dt>\n"
"<dd><p>A generalized boolean.\n"
"</p>\n"
"</dd>\n"
"<dt><var>string</var></dt>\n"
"<dd><p>The string representing the foreign function name.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7014
msgid ""
"<a name=\"Description-57\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p><code>translate-name-to-foreign</code> is used by <a href=\"#defcfun"
"\">defcfun</a> to handle\n"
"the conversion of lisp names to foreign names. By default, it\n"
"translates using <a href=\"#translate_002dunderscore_002dseparated_002dname"
"\">translate-underscore-separated-name</a>. However,\n"
"you can create specialized methods on this function to make\n"
"translating more closely match the foreign libraryâs naming\n"
"conventions.\n"
"</p>\n"
"<p>Specialize <var>package</var> on some package. This allows other "
"packages\n"
"to load libraries with different naming conventions.\n"
"</p>\n"
"<a name=\"Examples-53\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-57\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p><code>translate-name-to-foreign</code> используется в <a href=\"#defcfun"
"\">defcfun</a> для обработки\n"
"преобразования имен lisp во внешние имена. По умолчанию оно проводит "
"преобразование\n"
"используя <a href=\"#translate_002dunderscore_002dseparated_002dname"
"\">translate-underscore-separated-name</a>. Однако, вы можете создать "
"специализированныйе методы для этой функции, чтобы более точно "
"соответствовать\n"
"соглашению об именах во внешней библиотеке.\n"
"</p>\n"
"<p>Специализируйте <var>package</var> на несколько пакетов. Это позволит "
"другим пакетам загружать\n"
"библиотеки с различными соглашениями о преобрзовании имен.\n"
"</p>\n"
"<a name=\"Examples-53\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:7027
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcfun</span></i> some-xml-function ...</"
"span>)</span>\n"
" ⇒ \"some_xml_function\"\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defmethod</span></i> translate-name-to-foreign <span class="
"\"paren2\">(<span class=\"lisp-bg\"><span class=\"paren3\">(<span class="
"\"lisp-bg\">spec symbol</span>)</span>\n"
"                                              <span class=\"paren3\">(<span "
"class=\"lisp-bg\">package <span class=\"paren4\">(<span class=\"lisp-bg"
"\">eql <span class=\"special\">*package*</span></span>)</span></span>)</"
"span>\n"
"                                              &amp;optional varp</span>)</"
"span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">let</span></i> <span class=\"paren3\">(<span class=\"lisp-bg"
"\"><span class=\"paren4\">(<span class=\"lisp-bg\">name <span class="
"\"paren5\">(<span class=\"lisp-bg\">translate-camelcase-name spec</span>)</"
"span></span>)</span></span>)</span>\n"
"            <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">if</span></i> varp <span class=\"paren4\">(<span class=\"lisp-bg"
"\">subseq name 1 <span class=\"paren5\">(<span class=\"lisp-bg\">1- <span "
"class=\"paren6\">(<span class=\"lisp-bg\">length name</span>)</span></"
"span>)</span></span>)</span> name</span>)</span></span>)</span></span>)</"
"span>\n"
" ⇒ #&lt;STANDARD-METHOD TRANSLATE-NAME-TO-FOREIGN <span class="
"\"paren1\">(<span class=\"lisp-bg\">STRING <span class=\"paren2\">(<span "
"class=\"lisp-bg\">EQL #&lt;Package <span class=\"string\">\"SOME-PACKAGE\"</"
"span>&gt;</span>)</span></span>)</span>&gt;\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defcfun</span></i> some-xml-function ...</span>)</span>\n"
" ⇒ \"someXmlFunction\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:7035
msgid ""
"<a name=\"See-Also-52\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#defcfun\">defcfun</a> <br>\n"
"<a href=\"#translate_002dcamelcase_002dname\">translate-camelcase-name</a> "
"<br>\n"
"<a href=\"#translate_002dname_002dfrom_002dforeign\">translate-name-from-"
"foreign</a> <br>\n"
"<a href=\"#translate_002dunderscore_002dseparated_002dname\">translate-"
"underscore-separated-name</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7051
msgid ""
"<hr>\n"
"<a name=\"translate_002dunderscore_002dseparated_002dname\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#translate_002dname_002dto_002dforeign\" accesskey=\"p\" "
"rel=\"prev\">translate-name-to-foreign</a>, Up: <a href=\"#Functions\" "
"accesskey=\"u\" rel=\"up\">Functions</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">translate-underscore-separated-name</h4>\n"
"<a name=\"translate_002dunderscore_002dseparated_002dname-1\"></a>\n"
"<h3 class=\"heading\">translate-underscore-separated-name</h3>\n"
"<a name=\"Syntax-58\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-translate_002dunderscore_002dseparated_002dname\"></"
"a>Function: <strong>translate-underscore-separated-name</strong> <em>name⇒ "
"return-value</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7054
msgid ""
"<a name=\"Arguments-and-Values-57\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7064
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>name</var></dt>\n"
"<dd><p>Either a symbol or a string.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-value</var></dt>\n"
"<dd><p>If <var>name</var> is a symbol, this is a string, and vice versa.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7074
msgid ""
"<a name=\"Description-58\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p><code>translate-underscore-separated-name</code> is a helper function "
"for\n"
"specializations of <a href=\"#translate_002dname_002dfrom_002dforeign"
"\">translate-name-from-foreign</a> and\n"
"<a href=\"#translate_002dname_002dto_002dforeign\">translate-name-to-"
"foreign</a>. It handles the common case of\n"
"converting between foreign underscore_separated names and lisp names.\n"
"</p>\n"
"<a name=\"Examples-54\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-58\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p><code>translate-underscore-separated-name</code> является вспомогательной "
"функцией для\n"
"специализаций <a href=\"#translate_002dname_002dfrom_002dforeign\">translate-"
"name-from-foreign</a> и\n"
"<a href=\"#translate_002dname_002dto_002dforeign\">translate-name-to-"
"foreign</a>. Она обрабатывает\n"
"общий случай преобразования между внешними именами разделенными "
"подчеркиваниями и именами lisp.\n"
"</p>\n"
"<a name=\"Examples-54\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:7081
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\">translate-underscore-separated-name some-xml-function</span>)</span>\n"
" ⇒ \"some_xml_function\"\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">translate-"
"camelcase-name <span class=\"string\">\"some_xml_function\"</span></span>)</"
"span>\n"
" ⇒ SOME-XML-FUNCTION\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:7088
msgid ""
"<a name=\"See-Also-53\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#translate_002dname_002dfrom_002dforeign\">translate-name-from-"
"foreign</a> <br>\n"
"<a href=\"#translate_002dname_002dto_002dforeign\">translate-name-to-"
"foreign</a> <br>\n"
"<a href=\"#translate_002dcamelcase_002dname\">translate-camelcase-name</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7098
msgid ""
"<hr>\n"
"<a name=\"Libraries\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Callbacks\" accesskey=\"n\" rel=\"next\">Callbacks</a>, "
"Previous: <a href=\"#Functions\" accesskey=\"p\" rel=\"prev\">Functions</a>, "
"Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Libraries-1\"></a>\n"
"<h2 class=\"chapter\">11 Libraries</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Libraries\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Callbacks\" accesskey=\"n\" rel=\"next\">Callbacks</a>, "
"Previous: <a href=\"#Functions\" accesskey=\"p\" rel=\"prev\">Functions</a>, "
"Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Libraries-1\"></a>\n"
"<h2 class=\"chapter\">11 Библиотеки</h2>"

#: in/CFFI_User_Manual.htm:7106
msgid ""
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href=\"#Defining-a-library"
"\" accesskey=\"1\">Defining a library</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Library-definition-style"
"\" accesskey=\"2\">Library definition style</a>:</td><td>&nbsp;&nbsp;</"
"td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-comment"
"\">\n"
"Dictionary"
msgstr ""

#: in/CFFI_User_Manual.htm:7122
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href="
"\"#close_002dforeign_002dlibrary\" accesskey=\"3\">close-foreign-library</a>:"
"</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Close a foreign "
"library.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#g_t_002adarwin_002dframework_002ddirectories_002a\" accesskey="
"\"4\">*darwin-framework-directories*</a>:</td><td>&nbsp;&nbsp;</td><td "
"valign=\"top\" align=\"left\">Search path for Darwin frameworks.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#define_002dforeign_002dlibrary\" accesskey=\"5\">define-foreign-library</"
"a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Explain how "
"to load a foreign library.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#g_t_002aforeign_002dlibrary_002ddirectories_002a\" accesskey="
"\"6\">*foreign-library-directories*</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">Search path for shared libraries.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#load_002dforeign_002dlibrary\" accesskey=\"7\">load-foreign-library</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Load a foreign "
"library.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#load_002dforeign_002dlibrary_002derror\" accesskey=\"8\">load-foreign-"
"library-error</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left"
"\">Signalled on failure of its namesake.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href="
"\"#use_002dforeign_002dlibrary\" accesskey=\"9\">use-foreign-library</a>:</"
"td><td>&nbsp;&nbsp;</td><td valign=\"top\" align=\"left\">Load a foreign "
"library when needed.\n"
"</td></tr>\n"
"</tbody></table>"
msgstr ""

#: in/CFFI_User_Manual.htm:7132
msgid ""
"<hr>\n"
"<a name=\"Defining-a-library\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Library-definition-style\" accesskey=\"n\" rel=\"next"
"\">Library definition style</a>, Previous: <a href=\"#Libraries\" accesskey="
"\"p\" rel=\"prev\">Libraries</a>, Up: <a href=\"#Libraries\" accesskey=\"u\" "
"rel=\"up\">Libraries</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Defining-a-library-1\"></a>\n"
"<h3 class=\"section\">11.1 Defining a library</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Defining-a-library\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Library-definition-style\" accesskey=\"n\" rel=\"next"
"\">Library definition style</a>, Previous: <a href=\"#Libraries\" accesskey="
"\"p\" rel=\"prev\">Libraries</a>, Up: <a href=\"#Libraries\" accesskey=\"u\" "
"rel=\"up\">Libraries</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of "
"contents\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" "
"title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Defining-a-library-1\"></a>\n"
"<h3 class=\"section\">11.1 Определение библиотеки</h3>"

#: in/CFFI_User_Manual.htm:7146
msgid ""
"<p>Almost all foreign code you might want to access exists in some kind\n"
"of shared library.  The meaning of <em>shared library</em> varies among\n"
"platforms, but for our purposes, we will consider it to include\n"
"<samp>.so</samp> files on <small>UNIX</small>, frameworks on Darwin (and "
"derivatives\n"
"like Mac <acronym>OS X</acronym>), and <samp>.dll</samp> files on Windows.\n"
"</p>\n"
"<p>Bringing one of these libraries into the Lisp image is normally a\n"
"two-step process.\n"
"</p>\n"
"<ol>\n"
"<li> Describe to <acronym>CFFI</acronym> how to load the library at some "
"future point,\n"
"depending on platform and other factors, with a\n"
"<code>define-foreign-library</code> top-level form."
msgstr ""
"<p>Почти весь внешний код, к которому вы, возможно, захотите получить "
"доступ,\n"
"существует в виде какой-то разделяемой(общей) библиотеки.  Знаение\n"
" <em>разделяемая бибилиотека(shared library)</em> различается для\n"
"различных платформ, но для наших целей мы рассмотрим, что она включает \n"
"<samp>.so</samp> файлы для <small>UNIX</small>, платформы для Darwin (и\n"
"произвдные, такие как Mac <acronym>OS X</acronym>), и <samp>.dll</samp> \n"
"файлы в Windows.\n"
"</p>\n"
"<p>Внедрение одной из этих библиотек в образ Lisp обычно представляет\n"
"собой двух этапный процесс.\n"
"</p>\n"
"<ol>\n"
"<li> Описывается для <acronym>CFFI</acronym> как загрузить библиотеку\n"
"в будущем, в зависимости от платформы и других факторов, с помощью\n"
"формы верхнего уровня code>define-foreign-library</code>."

#: in/CFFI_User_Manual.htm:7151
msgid ""
"</li><li> Load the library so defined with either a top-level\n"
"<code>use-foreign-library</code> form or by calling the function\n"
"<code>load-foreign-library</code>.\n"
"</li></ol>"
msgstr ""
"</li><li> Загрузите библиотеку определенную с помощью формы\n"
"<code>use-foreign-library</code> или с помощью вызов функции\n"
"<code>load-foreign-library</code>.\n"
"</li></ol>"

#: in/CFFI_User_Manual.htm:7155
msgid ""
"<p>See <a href=\"#Tutorial_002dLoading\">Loading foreign libraries</a>, for "
"a working\n"
"example of the above two steps.\n"
"</p>"
msgstr ""
"<p>См. <a href=\"#Tutorial_002dLoading\">Загрузка внешних библиотек</a>, для "
"ознакомления с\n"
"примером работы двух вышеупомянутых шагов.\n"
"</p>"

#: in/CFFI_User_Manual.htm:7164
msgid ""
"<hr>\n"
"<a name=\"Library-definition-style\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#close_002dforeign_002dlibrary\" accesskey=\"n\" rel=\"next"
"\">close-foreign-library</a>, Previous: <a href=\"#Defining-a-library\" "
"accesskey=\"p\" rel=\"prev\">Defining a library</a>, Up: <a href=\"#Libraries"
"\" accesskey=\"u\" rel=\"up\">Libraries</a> &nbsp; [<a href=\"#SEC_Contents"
"\" title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Library-definition-style-1\"></a>\n"
"<h3 class=\"section\">11.2 Library definition style</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Library-definition-style\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#close_002dforeign_002dlibrary\" accesskey=\"n\" rel=\"next"
"\">close-foreign-library</a>, Previous: <a href=\"#Defining-a-library\" "
"accesskey=\"p\" rel=\"prev\">Defining a library</a>, Up: <a href=\"#Libraries"
"\" accesskey=\"u\" rel=\"up\">Libraries</a> &nbsp; [<a href=\"#SEC_Contents"
"\" title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Library-definition-style-1\"></a>\n"
"<h3 class=\"section\">11.2 Стиль определения библиотеки</h3>"

#: in/CFFI_User_Manual.htm:7172
msgid ""
"<p>Looking at the <code>libcurl</code> library definition presented "
"earlier,\n"
"you may ask why we did not simply do this:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-foreign-library</span></i> libcurl\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">t <span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:default</span> "
"<span class=\"string\">\"libcurl\"</span></span>)</span></span>)</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Глядя на определение библиотеки <code>libcurl</code>, представленное "
"ранее, вы можете\n"
"спросить, почемы мы просто не сделали так:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">define-foreign-library</span></i> libcurl\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">t <span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:default</span> "
"<span class=\"string\">\"libcurl\"</span></span>)</span></span>)</span></"
"span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:7194
msgid ""
"<p>Indeed, this would work just as well on the computer on which I tested\n"
"the tutorial.  There are a couple of good reasons to provide the\n"
"<samp>.so</samp>âs current version number, however.  Namely, the "
"versionless\n"
"<samp>.so</samp> is not packaged on most <small>UNIX</small> systems along "
"with the\n"
"actual, fully-versioned library; instead, it is included in the\n"
"âdevelopmentâ package along with C headers and static <samp>.a</samp>\n"
"libraries.\n"
"</p>\n"
"<p>The reason <acronym>CFFI</acronym> does not try to account for this lies "
"in the\n"
"meaning of the version numbers.  A full treatment of shared library\n"
"versions is beyond this manualâs scope; see <a href=\"http://www.gnu.org/"
"software/libtool/manual/http://www.gnu.org/software/libtool/manual."
"html#Versioning\">Library\n"
"interface versions</a> in <cite><acronym>GNU</acronym> Libtool</cite>, for "
"helpful\n"
"information for the unfamiliar.  For our purposes, consider that a\n"
"mismatch between the library version with which you tested and the\n"
"installed library version may cause undefined\n"
"behavior.<a name=\"DOCF12\" href=\"#FOOT12\"><sup>12</sup></a>\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Implementorâs note:</strong> <em>Maybe some notes should go here "
"about OS X, which I know\n"
"little about.  âstephen</em>\n"
"</p></blockquote>"
msgstr ""
"<p>На самом деле, это будет работать так же хорошо на компьютере на котором "
"я\n"
"тестировал этот учебник. Однако есть несколько веских причин представить "
"номер\n"
"текущей версии <samp>.so</samp>. А именно, <samp>.so</samp> без версии не\n"
"вклюается в пакет в большинстве систем <small>UNIX</small> вместе с "
"реальной,\n"
"полностью версионной библиотекой; вместо этого, она(библиотека) включается в "
"пакет\n"
"âdevelopmentâ вместе с заголовками Си и статическими библиотеками <samp>.a</"
"samp>.\n"
"</p>\n"
"<p>Причина, по которой <acronym>CFFI</acronym> не пытается объяснить это, "
"заключается\n"
"в значении номеров версий.  Полная обработка версий разделяемой библиотеки\n"
"выходит за рамки данного руководства; см. <a href=\"http://www.gnu.org/"
"software/libtool/manual/http://www.gnu.org/software/libtool/manual."
"html#Versioning\">Library\n"
"interface versions</a> in <cite><acronym>GNU</acronym> Libtool</cite>, для\n"
"получения полезной информации.  Учтите, что в наших целях, что "
"несоответствие\n"
"между проверенной версией библиотеки и установленной версией библиотеки "
"может\n"
"привести к неопределенному поведению.<a name=\"DOCF12\" href="
"\"#FOOT12\"><sup>12</sup></a>\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Примечание разработчика:</strong> <em>Может быть, некоторые здесь "
"надо\n"
"сделать некоторые замечания о OS X, о которой я мало знаю.  âstephen</em>\n"
"</p></blockquote>"

#: in/CFFI_User_Manual.htm:7211
msgid ""
"<hr>\n"
"<a name=\"close_002dforeign_002dlibrary\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#g_t_002adarwin_002dframework_002ddirectories_002a\" "
"accesskey=\"n\" rel=\"next\">*darwin-framework-directories*</a>, Previous: "
"<a href=\"#Library-definition-style\" accesskey=\"p\" rel=\"prev\">Library "
"definition style</a>, Up: <a href=\"#Libraries\" accesskey=\"u\" rel=\"up"
"\">Libraries</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">close-foreign-library</h4>\n"
"<a name=\"close_002dforeign_002dlibrary-1\"></a>\n"
"<h3 class=\"heading\">close-foreign-library</h3>\n"
"<a name=\"Syntax-59\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-close_002dforeign_002dlibrary\"></a>Function: "
"<strong>close-foreign-library</strong> <em>library⇒ success</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7214
msgid ""
"<a name=\"Arguments-and-Values-58\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7224
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>library</var></dt>\n"
"<dd><p>A symbol or an instance of <code>foreign-library</code>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>success</var></dt>\n"
"<dd><p>A Lisp boolean.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7227
msgid ""
"<a name=\"Description-59\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7232
msgid ""
"<p>Closes <var>library</var> which can be a symbol designating a library\n"
"define through <code>define-foreign-library</code> or an instance of\n"
"<code>foreign-library</code> as returned by <code>load-foreign-library</"
"code>.\n"
"</p>"
msgstr ""
"<p>Закрывает библиотеку(<var>library</var>), которая может быть\n"
"символом обозначающим библиотеку, определенную с помощью  \n"
"<code>define-foreign-library</code> или экземпляром <code>foreign-library</"
"code>,\n"
"возвращаемым <code>load-foreign-library</code>.\n"
"</p>"

#: in/CFFI_User_Manual.htm:7235
msgid ""
"<a name=\"See-Also-54\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7240
msgid ""
"<p><a href=\"#define_002dforeign_002dlibrary\">define-foreign-library</a> "
"<br>\n"
"<a href=\"#load_002dforeign_002dlibrary\">load-foreign-library</a> <br>\n"
"<a href=\"#use_002dforeign_002dlibrary\">use-foreign-library</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7253
msgid ""
"<hr>\n"
"<a name=\"g_t_002adarwin_002dframework_002ddirectories_002a\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#define_002dforeign_002dlibrary\" accesskey=\"n\" rel=\"next"
"\">define-foreign-library</a>, Previous: <a href="
"\"#close_002dforeign_002dlibrary\" accesskey=\"p\" rel=\"prev\">close-"
"foreign-library</a>, Up: <a href=\"#Libraries\" accesskey=\"u\" rel=\"up"
"\">Libraries</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">*darwin-framework-directories*</h4>\n"
"<a name=\"g_t_002adarwin_002dframework_002ddirectories_002a-1\"></a>\n"
"<h3 class=\"heading\">*darwin-framework-directories*</h3>\n"
"<a name=\"Syntax-60\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7257
msgid ""
"<dl>\n"
"<dt><a name=\"index-_002adarwin_002dframework_002ddirectories_002a\"></"
"a>Special Variable: <strong>*darwin-framework-directories*</strong></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7260
msgid ""
"<a name=\"Value-type-1\"></a>\n"
"<h4 class=\"subheading\">Value type</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7266
msgid ""
"<p>A list, in which each element is a string, a pathname, or a simple\n"
"Lisp expression.\n"
"</p>\n"
"<a name=\"Initial-value-1\"></a>\n"
"<h4 class=\"subheading\">Initial value</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7274
msgid ""
"<p>A list containing the following, in order: an expression corresponding\n"
"to Darwin path <samp>~/Library/Frameworks/</samp>,\n"
"<code>#P\"/Library/Frameworks/\"</code>, and\n"
"<code>#P\"/System/Library/Frameworks/\"</code>.\n"
"</p>\n"
"<a name=\"Description-60\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7282
msgid ""
"<p>The meaning of âsimple Lisp expressionâ is explained in\n"
"<a href=\"#g_t_002aforeign_002dlibrary_002ddirectories_002a\">*foreign-"
"library-directories*</a>.  In contrast to that variable,\n"
"this is not a fallback search path; the default value described above\n"
"is intended to be a reasonably complete search path on Darwin systems.\n"
"</p>\n"
"<a name=\"Examples-55\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<p>Значение âпростое выражение на Lispâ объясняется в\n"
"<a href=\"#g_t_002aforeign_002dlibrary_002ddirectories_002a\">*foreign-"
"library-directories*</a>.  \n"
"В отличии от этой переменной, это не запасной путь поиска; значение по "
"умолчанию, описанное\n"
"выше, предназначено для обеспечения достаточно полного пуит поиска в "
"системах Darwin.\n"
"</p>\n"
"<a name=\"Examples-55\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:7288
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">let</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\"><span class=\"paren3\">(<span class=\"lisp-bg\">lib <span "
"class=\"paren4\">(<span class=\"lisp-bg\">load-foreign-library '<span class="
"\"paren5\">(<span class=\"lisp-bg\"><span class=\"keyword\">:framework</"
"span> <span class=\"string\">\"OpenGL\"</span></span>)</span></span>)</"
"span></span>)</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">foreign-library-"
"pathname lib</span>)</span></span>)</span>\n"
" ⇒ #P\"/System/Library/Frameworks/OpenGL.framework/OpenGL\"\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:7291
msgid ""
"<a name=\"See-also-1\"></a>\n"
"<h4 class=\"subheading\">See also</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7295
msgid ""
"<p><a href=\"#g_t_002aforeign_002dlibrary_002ddirectories_002a\">*foreign-"
"library-directories*</a> <br>\n"
"<a href=\"#define_002dforeign_002dlibrary\">define-foreign-library</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7306
msgid ""
"<hr>\n"
"<a name=\"define_002dforeign_002dlibrary\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#g_t_002aforeign_002dlibrary_002ddirectories_002a\" "
"accesskey=\"n\" rel=\"next\">*foreign-library-directories*</a>, Previous: <a "
"href=\"#g_t_002adarwin_002dframework_002ddirectories_002a\" accesskey=\"p\" "
"rel=\"prev\">*darwin-framework-directories*</a>, Up: <a href=\"#Libraries\" "
"accesskey=\"u\" rel=\"up\">Libraries</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">define-foreign-library</h4>\n"
"<a name=\"define_002dforeign_002dlibrary-1\"></a>\n"
"<h3 class=\"heading\">define-foreign-library</h3>"
msgstr ""

#: in/CFFI_User_Manual.htm:7309
msgid ""
"<a name=\"Syntax-61\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7313
msgid ""
"<dl>\n"
"<dt><a name=\"index-define_002dforeign_002dlibrary\"></a>Macro: "
"<strong>define-foreign-library</strong> <em>name-and-options { load-clause }"
"*⇒ name</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7319
msgid ""
"<p>name-and-options ::= name | (name &amp;key convention search-path)\n"
"load-clause ::= (feature library &amp;key convention search-path)\n"
"</p>\n"
"<a name=\"Arguments-and-Values-59\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7344
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>name</var></dt>\n"
"<dd><p>A symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>feature</var></dt>\n"
"<dd><p>A feature expression.\n"
"</p>\n"
"</dd>\n"
"<dt><var>library</var></dt>\n"
"<dd><p>A library designator.\n"
"</p>\n"
"</dd>\n"
"<dt><var>convention</var></dt>\n"
"<dd><p>One of <code>:cdecl</code> (default) or <code>:stdcall</code>\n"
"</p>\n"
"</dd>\n"
"<dt><var>search-path</var></dt>\n"
"<dd><p>A path or list of paths where the library will be searched if not "
"found in\n"
"system-global directories. Paths specified in a load clause take priority "
"over\n"
"paths specified as library option, with *foreign-library-directories* "
"having\n"
"lowest priority.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7347
msgid ""
"<a name=\"Description-61\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7359
msgid ""
"<p>Creates a new library designator called <var>name</var>.  The\n"
"<var>load-clause</var>s describe how to load that designator when passed to\n"
"<code>load-foreign-library</code> or <code>use-foreign-library</code>.\n"
"</p>\n"
"<p>When trying to load the library <var>name</var>, the relevant function\n"
"searches the <var>load-clause</var>s in order for the first one where\n"
"<var>feature</var> evaluates to true.  That happens for any of the\n"
"following situations:\n"
"</p>\n"
"<ol>\n"
"<li> If <var>feature</var> is a symbol present in <code>common-lisp:"
"*features*</code>."
msgstr ""
"<p>Создает новый указатель библиотеки с именем <var>name</var>.  \n"
"<var>load-clause</var> описывают как загрузить этот указатель при передаче\n"
"в <code>load-foreign-library</code> или <code>use-foreign-library</code>.\n"
"</p>\n"
"<p>При попытке загрузить библиотеку <var>name</var>, соответствующая функция "
"ищет\n"
"предложения <var>load-clause</var> по порядку, чтобы найти первое, где "
"функция\n"
"<var>feature</var> вычисляется в true.  Это происходит в любой из следующих\n"
"ситуаций:\n"
"</p>\n"
"<ol>\n"
"<li> Если функция <var>feature</var> является символом, присутствующим в  "
"<code>common-lisp:*features*</code>."

#: in/CFFI_User_Manual.htm:7362
msgid ""
"</li><li> If <var>feature</var> is a list, depending on <code>(first "
"<var>feature</var>)</code>,\n"
"a keyword:"
msgstr ""
"</li><li> Если <var>feature</var> является списком, в зависимости от "
"ключевого слова <code>(first <var>feature</var>)</code>:"

#: in/CFFI_User_Manual.htm:7378
msgid ""
"<dl compact=\"compact\">\n"
"<dt><code>:and</code></dt>\n"
"<dd><p>All of the feature expressions in <code>(rest <var>feature</var>)</"
"code> are\n"
"true.\n"
"</p>\n"
"</dd>\n"
"<dt><code>:or</code></dt>\n"
"<dd><p>At least one of the feature expressions in <code>(rest <var>feature</"
"var>)</code>\n"
"is true.\n"
"</p>\n"
"</dd>\n"
"<dt><code>:not</code></dt>\n"
"<dd><p>The feature expression <code>(second <var>feature</var>)</code> is "
"not true.\n"
"</p></dd>\n"
"</dl>"
msgstr ""
"<dl compact=\"compact\">\n"
"<dt><code>:and</code></dt>\n"
"<dd><p>Все выражения в <code>(rest <var>feature</var>)</code> должны быть "
"true.\n"
"</p>\n"
"</dd>\n"
"<dt><code>:or</code></dt>\n"
"<dd><p>По крайней мере одно выражение из <code>(rest <var>feature</var>)</"
"code> должно быть true.\n"
"</p>\n"
"</dd>\n"
"<dt><code>:not</code></dt>\n"
"<dd><p>Выражение <code>(second <var>feature</var>)</code> не равно true.\n"
"</p></dd>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:7382
msgid ""
"</li><li> Finally, if <var>feature</var> is <code>t</code>, this <var>load-"
"clause</var> is\n"
"picked unconditionally.\n"
"</li></ol>"
msgstr ""
"</li><li> Наконец, если <var>feature</var> равно <code>t</code>, это "
"предложение <var>load-clause</var> \n"
"выбирается без вариантов.\n"
"</li></ol>"

#: in/CFFI_User_Manual.htm:7394
msgid ""
"<p>Upon finding the first true <var>feature</var>, the library loader then\n"
"loads the <var>library</var>.  The meaning of âlibrary designatorâ is\n"
"described in <a href=\"#load_002dforeign_002dlibrary\">load-foreign-library</"
"a>.\n"
"</p>\n"
"<p>Functions associated to a library defined by\n"
"<code>define-foreign-library</code> (e.g. through <code>defcfun</code>âs\n"
"<code>:library</code> option, will inherit the libraryâs options.  The\n"
"precedence is as follows:\n"
"</p>\n"
"<ol>\n"
"<li> <code>defcfun</code>/<code>foreign-funcall</code> specific options;"
msgstr ""
"<p>После нахождения первой истинной функции(<var>feature</var>), загрузчик\n"
"библиотеки загружает <var>library</var>.  Значение  âуказатель "
"бибилиотеки(library designator)â\n"
"описано в <a href=\"#load_002dforeign_002dlibrary\">load-foreign-library</"
"a>.\n"
"</p>\n"
"<p>Функуции связанные с библиотекой, определенной с помощью\n"
"<code>define-foreign-library</code> (например через опцию <code>:library</"
"code>\n"
"<code>defcfun</code>â, будут наследовать опции библиотеки.  \n"
"Приоритет следующий:\n"
"</p>\n"
"<ol>\n"
"<li> специализированные для <code>defcfun</code>/<code>foreign-funcall</"
"code> опции;"

#: in/CFFI_User_Manual.htm:7396
msgid "</li><li> <var>load-clause</var> options;"
msgstr "</li><li> опции <var>load-clause</var>;"

#: in/CFFI_User_Manual.htm:7399
msgid ""
"</li><li> global library options (the <var>name-and-options</var> argument)\n"
"</li></ol>"
msgstr ""
"</li><li> глобальные опции библиотеки (аргумент <var>name-and-options</"
"var>)\n"
"</li></ol>"

#: in/CFFI_User_Manual.htm:7403
msgid ""
"<a name=\"Examples-56\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7406
msgctxt "in/CFFI_User_Manual.htm:7406"
msgid ""
"<p>See <a href=\"#Tutorial_002dLoading\">Loading foreign libraries</a>.\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7409
msgid ""
"<a name=\"See-Also-55\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7413
msgid ""
"<p><a href=\"#close_002dforeign_002dlibrary\">close-foreign-library</a> "
"<br>\n"
"<a href=\"#load_002dforeign_002dlibrary\">load-foreign-library</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7426
msgid ""
"<hr>\n"
"<a name=\"g_t_002aforeign_002dlibrary_002ddirectories_002a\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#load_002dforeign_002dlibrary\" accesskey=\"n\" rel=\"next"
"\">load-foreign-library</a>, Previous: <a href="
"\"#define_002dforeign_002dlibrary\" accesskey=\"p\" rel=\"prev\">define-"
"foreign-library</a>, Up: <a href=\"#Libraries\" accesskey=\"u\" rel=\"up"
"\">Libraries</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">*foreign-library-directories*</h4>\n"
"<a name=\"g_t_002aforeign_002dlibrary_002ddirectories_002a-1\"></a>\n"
"<h3 class=\"heading\">*foreign-library-directories*</h3>\n"
"<a name=\"Syntax-62\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7430
msgid ""
"<dl>\n"
"<dt><a name=\"index-_002aforeign_002dlibrary_002ddirectories_002a\"></"
"a>Special Variable: <strong>*foreign-library-directories*</strong></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7433
msgid ""
"<a name=\"Value-type-2\"></a>\n"
"<h4 class=\"subheading\">Value type</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7439
msgid ""
"<p>A list, in which each element is a string, a pathname, or a simple\n"
"Lisp expression.\n"
"</p>\n"
"<a name=\"Initial-value-2\"></a>\n"
"<h4 class=\"subheading\">Initial value</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7444
msgid ""
"<p>The empty list.\n"
"</p>\n"
"<a name=\"Description-62\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7470
msgid ""
"<p>You should not have to use this variable.\n"
"</p>\n"
"<p>Most, if not all, Lisps supported by <acronym>CFFI</acronym> have a "
"reasonable default\n"
"search algorithm for foreign libraries.  For example, Lisps for\n"
"<small>UNIX</small> usually call\n"
"<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/dlopen.html"
"\"><code>dlopen(3)</code></a>, which in turn looks in the system library\n"
"directories.  Only if that fails does <acronym>CFFI</acronym> look for the "
"named\n"
"library file in these directories, and load it from there if found.\n"
"</p>\n"
"<p>Thus, this is intended to be a <acronym>CFFI</acronym>-only fallback to "
"the library\n"
"search configuration provided by your operating system.  For example,\n"
"if you distribute a foreign library with your Lisp package, you can\n"
"add the libraryâs containing directory to this list and portably\n"
"expect <acronym>CFFI</acronym> to find it.\n"
"</p>\n"
"<p>A <em>simple Lisp expression</em> is intended to provide functionality\n"
"commonly used in search paths such as\n"
"<acronym>ASDF</acronym>âs<a name=\"DOCF13\" href=\"#FOOT13\"><sup>13</sup></"
"a>, and is defined recursively as\n"
"follows:<a name=\"DOCF14\" href=\"#FOOT14\"><sup>14</sup></a>\n"
"</p>\n"
"<ol>\n"
"<li> A list, whose â<samp>first</samp>â is a function designator, and whose\n"
"â<samp>rest</samp>â is a list of simple Lisp expressions to be evaluated "
"and\n"
"passed to the so-designated function.  The result is the result of the\n"
"function call."
msgstr ""
"<p>Вы не должны использовать эту переменную.\n"
"</p>\n"
"<p>Большинство, если не все, Lisp поддерживаемые <acronym>CFFI</acronym> "
"имеют разумный\n"
"алгоритм поиска по умолчанию внешних библиотек.  Например, Lisp-ы  для\n"
"<small>UNIX</small> обычно вызывают\n"
"<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/dlopen.html"
"\"><code>dlopen(3)</code></a>, \n"
"который в свою очередь просматривает каталоги системных библиотек.  Только в "
"случае\n"
"неудачи <acronym>CFFI</acronym> ищет указанный файл библиотеки в этих "
"каталогах и загружает\n"
"его оттуда, если он найден.\n"
"</p>\n"
"<p>Таким образом, предполагается, что это запасной вариант только для "
"<acronym>CFFI</acronym>, для \n"
"конфигурации поиска библиотек предоставляемых вашей операционной системой.  "
"Например,\n"
"если вы распространяете внешнюю библиотеку вместе с вашим пакетом Lisp, вы "
"можете добавить\n"
"каталог, содержащий библиотеку, в этот список и ожидать, что <acronym>CFFI</"
"acronym> найдет её.\n"
"</p>\n"
"<p> <em>Простое Лисп выражение(simple Lisp expression)</em> предназначено "
"для обеспечения\n"
"функциональнсти, обычно используемой в поиске путей, так же как \n"
"<acronym>ASDF</acronym>âs<a name=\"DOCF13\" href=\"#FOOT13\"><sup>13</sup></"
"a>, и определяется\n"
"рекурсивно следующим образом:<a name=\"DOCF14\" href=\"#FOOT14\"><sup>14</"
"sup></a>\n"
"</p>\n"
"<ol>\n"
"<li> Список, чей â<samp>первый</samp>â элемент является обозначением "
"функции, \n"
"а выражение â<samp>rest</samp>â - это список простых выражений Lisp, которые "
"должны\n"
"быть вычислены и переданы обозначенной функции.  Результатом является "
"результат вызова фунции."

#: in/CFFI_User_Manual.htm:7472
msgid "</li><li> A symbol, whose result is its symbol value."
msgstr "</li><li> Символ, разультатом которого является его значение."

#: in/CFFI_User_Manual.htm:7475
msgid ""
"</li><li> Anything else evaluates to itself.\n"
"</li></ol>"
msgstr ""
"</li><li> Все остальное вычисляющее себя.\n"
"</li></ol>"

#: in/CFFI_User_Manual.htm:7485
msgid ""
"<p>The result of evaluating the <em>simple Lisp expression</em> should "
"yield\n"
"a <em>designator</em> for a <em>list</em> of <em>pathname designators</em>.\n"
"</p>\n"
"<p><strong>Note</strong>: in Common Lisp, <code>#p\"/foo/bar\"</code> "
"designates the\n"
"<em>bar</em> file within the <em>/foo</em> directory whereas\n"
"<code>#p\"/foo/bar/\"</code> designates the <em>/foo/bar</em> directory. "
"Keep\n"
"that in mind when customising the value of\n"
"<code>*foreign-library-directories*</code>.\n"
"</p>"
msgstr ""
"<p>Результа вычисления <em>простого выражения Lisp</em> должен дать\n"
"<em>указатель(designator)</em> для списка(<em>list</em>) указателей "
"пути(<em>pathname designators</em>).\n"
"</p>\n"
"<p><strong>Замечание</strong>: в Common Lisp, <code>#p\"/foo/bar\"</code> "
"обозначает файл\n"
"<em>bar</em> в каталоге <em>/foo</em>, тогда как <code>#p\"/foo/bar/\"</"
"code> обозначает\n"
"каталог <em>/foo/bar</em>. Имейте в виду это, при настройке значения\n"
"<code>*foreign-library-directories*</code>.\n"
"</p>"

#: in/CFFI_User_Manual.htm:7488
msgid ""
"<a name=\"Examples-57\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7493
msgid ""
"<div class=\"example\">\n"
"<pre class=\"example\">$ ls\n"
"-| liblibli.so    libli.lisp\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:7499
msgid ""
"<p>In <samp>libli.lisp</samp>:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\">pushnew #P<span class=\"string\">\"/home/sirian/lisp/libli/\"</span> "
"<span class=\"special\">*foreign-library-directories*</span>\n"
"           <span class=\"keyword\">:test</span> #'equal</span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:7502
msgctxt "in/CFFI_User_Manual.htm:7502"
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\">load-foreign-library "
"'<span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"default</span> <span class=\"string\">\"liblibli\"</span></span>)</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:7510
msgid ""
"<p>The following example would achieve the same effect:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\">pushnew '<span class=\"paren2\">(<span class=\"lisp-bg\">merge-pathnames "
"#p<span class=\"string\">\"lisp/libli/\"</span> <span class="
"\"paren3\">(<span class=\"lisp-bg\">user-homedir-pathname</span>)</span></"
"span>)</span>\n"
"            <span class=\"special\">*foreign-library-directories*</span>\n"
"            <span class=\"keyword\">:test</span> #'equal</span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\"><span class="
"\"paren2\">(<span class=\"lisp-bg\">MERGE-PATHNAMES #P<span class=\"string\">"
"\"lisp/libli/\"</span> <span class=\"paren3\">(<span class=\"lisp-bg\">USER-"
"HOMEDIR-PATHNAME</span>)</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:7513
msgctxt "in/CFFI_User_Manual.htm:7513"
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\">load-foreign-library "
"'<span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"default</span> <span class=\"string\">\"liblibli\"</span></span>)</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:7516
msgid ""
"<a name=\"See-also-2\"></a>\n"
"<h4 class=\"subheading\">See also</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7520
msgid ""
"<p><a href=\"#g_t_002adarwin_002dframework_002ddirectories_002a\">*darwin-"
"framework-directories*</a> <br>\n"
"<a href=\"#define_002dforeign_002dlibrary\">define-foreign-library</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7536
msgid ""
"<hr>\n"
"<a name=\"load_002dforeign_002dlibrary\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#load_002dforeign_002dlibrary_002derror\" accesskey=\"n\" "
"rel=\"next\">load-foreign-library-error</a>, Previous: <a href="
"\"#g_t_002aforeign_002dlibrary_002ddirectories_002a\" accesskey=\"p\" rel="
"\"prev\">*foreign-library-directories*</a>, Up: <a href=\"#Libraries\" "
"accesskey=\"u\" rel=\"up\">Libraries</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">load-foreign-library</h4>\n"
"<a name=\"load_002dforeign_002dlibrary-1\"></a>\n"
"<h3 class=\"heading\">load-foreign-library</h3>\n"
"<a name=\"Syntax-63\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-load_002dforeign_002dlibrary\"></a>Function: "
"<strong>load-foreign-library</strong> <em>library-designator⇒ library</em></"
"dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7539
msgid ""
"<a name=\"Arguments-and-Values-60\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7549
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>library-designator</var></dt>\n"
"<dd><p>A library designator.\n"
"</p>\n"
"</dd>\n"
"<dt><var>library-designator</var></dt>\n"
"<dd><p>An instance of <code>foreign-library</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7552
msgid ""
"<a name=\"Description-63\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7559
msgid ""
"<p>Load the library indicated by <var>library-designator</var>. A "
"<em>library\n"
"designator</em> is defined as follows:\n"
"</p>\n"
"<ol>\n"
"<li> If a symbol, is considered a name previously defined with\n"
"<code>define-foreign-library</code>."
msgstr ""
"<p>Загружает библиотеку, указанную как <var>library-designator</var>. "
"Указатель библиотеки(<em>library\n"
"designator</em>) определяется следующим образом:\n"
"</p>\n"
"<ol>\n"
"<li> Если символ, считается именем, определенным ранее с помощью\n"
"<code>define-foreign-library</code>."

#: in/CFFI_User_Manual.htm:7565
msgid ""
"</li><li> If a string or pathname, passed as a namestring directly to the\n"
"implementationâs foreign library loader.  If that fails, search the\n"
"directories in <code>*foreign-library-directories*</code> with\n"
"<code>cl:probe-file</code>; if found, the absolute path is passed to the\n"
"implementationâs loader."
msgstr ""
"</li><li> Если строка или путь, передается как строка имени(namestring) "
"непосредственно\n"
"загрузчику реализации(лиспа) внешних библиотек.  Если это не помогло, ищет "
"в\n"
"каталогах <code>*foreign-library-directories*</code> с помощью\n"
"<code>cl:probe-file</code>; если найден, абсолютный путь передается "
"загрузчику реализации."

#: in/CFFI_User_Manual.htm:7567
msgid ""
"</li><li> If a list, the meaning depends on <code>(first <var>library</"
"var>)</code>:"
msgstr ""
"</li><li> Если список, значение зависит от <code>(first <var>library</var>)</"
"code>:"

#: in/CFFI_User_Manual.htm:7588
msgid ""
"<dl compact=\"compact\">\n"
"<dt><code>:framework</code></dt>\n"
"<dd><p>The second list element is taken to be a Darwin framework name, "
"which\n"
"is then searched in <code>*darwin-framework-directories*</code>, and loaded\n"
"when found.\n"
"</p>\n"
"</dd>\n"
"<dt><code>:or</code></dt>\n"
"<dd><p>Each remaining list element, itself a <em>library designator</em>, is "
"loaded in\n"
"order, until one succeeds.\n"
"</p>\n"
"</dd>\n"
"<dt><code>:default</code></dt>\n"
"<dd><p>The name is transformed according to the platformâs naming "
"convention\n"
"to shared libraries, and the resultant string is loaded as a <em>library\n"
"designator</em>.  For example, on <small>UNIX</small>, the name is suffixed "
"with\n"
"<samp>.so</samp>.\n"
"</p></dd>\n"
"</dl>\n"
"</li></ol>"
msgstr ""
"<dl compact=\"compact\">\n"
"<dt><code>:framework</code></dt>\n"
"<dd><p>Вторым элементом списка считается имя фреймворка Darwin, которое "
"затем\n"
"ищется в <code>*darwin-framework-directories*</code>, и загружается когда\n"
"найдено.\n"
"</p>\n"
"</dd>\n"
"<dt><code>:or</code></dt>\n"
"<dd><p>Каждый оставшийся элемент списка, сам по себе является "
"<em>обозначением библиотеки(library designator)</em>, загружается по "
"порядку, пока один из них не будет завершен успешно.\n"
"</p>\n"
"</dd>\n"
"<dt><code>:default</code></dt>\n"
"<dd><p>В соответствии с соглашением о преобразовании имен платформы имя "
"преобразуется \n"
"в имя разделяемой библиотеки, и результирующая строка загружается как "
"указатель библиотеки( <em>library\n"
"designator</em>).\n"
"Например, в  <small>UNIX</small>, к имени добавляется суффикс\n"
"<samp>.so</samp>.\n"
"</p></dd>\n"
"</dl>\n"
"</li></ol>"

#: in/CFFI_User_Manual.htm:7607
msgid ""
"<p>If the library is already loaded it will be reloaded.\n"
"</p>\n"
"<p>If the load fails, signal a <code>load-foreign-library-error</code>.\n"
"</p>\n"
"<p><strong>Please note:</strong> For system libraries, you should not need "
"to\n"
"specify the directory containing the library.  Each operating system\n"
"has its own idea of a default search path, and you should rely on it\n"
"when it is reasonable.\n"
"</p>\n"
"<a name=\"Implementation_002dspecific-Notes-4\"></a>\n"
"<h4 class=\"subheading\">Implementation-specific Notes</h4>\n"
"<p>On ECL platforms where its dynamic FFI is not supported (ie. when\n"
"<code>:dffi</code> is not present in <code>*features*</code>),\n"
"<code>cffi:load-foreign-library</code> does not work and you must use ECLâs\n"
"own <code>ffi:load-foreign-library</code> with a constant string argument.\n"
"</p>\n"
"<a name=\"Examples-58\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<p>Если библиотека уже загружена, она будет перезагружена.\n"
"</p>\n"
"<p>Если загрузка не удалась, выдается сигнал <code>load-foreign-library-"
"error</code>.\n"
"</p>\n"
"<p><strong>Обратите внимание:</strong> для системных библиотек вам не нужно "
"указывать\n"
"каталог, содержащий библиотеку.  Каждая операционная система имеет свое "
"представление\n"
"о путях поиска по умолчанию, и вы должны полагаться на него, когда это "
"разумно.\n"
"</p>\n"
"<a name=\"Implementation_002dspecific-Notes-4\"></a>\n"
"<h4 class=\"subheading\">Примечания специфичные для реализаций</h4>\n"
"<p>На платформах ECL, где его динамический FFI не поддерживается (например,\n"
"когда <code>:dffi</code> отсутствует в <code>*features*</code>),\n"
"<code>cffi:load-foreign-library</code> не работает, и вы должны использовать "
"собственную \n"
"ECLâ <code>ffi:load-foreign-library</code> с постоянным строковым "
"аргументом.\n"
"</p>\n"
"<a name=\"Examples-58\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:7612
msgid ""
"<p>See <a href=\"#Tutorial_002dLoading\">Loading foreign libraries</a>.\n"
"</p>\n"
"<a name=\"See-Also-56\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7620
msgid ""
"<p><a href=\"#close_002dforeign_002dlibrary\">close-foreign-library</a> "
"<br>\n"
"<a href=\"#g_t_002adarwin_002dframework_002ddirectories_002a\">*darwin-"
"framework-directories*</a> <br>\n"
"<a href=\"#define_002dforeign_002dlibrary\">define-foreign-library</a> <br>\n"
"<a href=\"#g_t_002aforeign_002dlibrary_002ddirectories_002a\">*foreign-"
"library-directories*</a> <br>\n"
"<a href=\"#load_002dforeign_002dlibrary_002derror\">load-foreign-library-"
"error</a> <br>\n"
"<a href=\"#use_002dforeign_002dlibrary\">use-foreign-library</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7631
msgid ""
"<hr>\n"
"<a name=\"load_002dforeign_002dlibrary_002derror\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#use_002dforeign_002dlibrary\" accesskey=\"n\" rel=\"next"
"\">use-foreign-library</a>, Previous: <a href=\"#load_002dforeign_002dlibrary"
"\" accesskey=\"p\" rel=\"prev\">load-foreign-library</a>, Up: <a href="
"\"#Libraries\" accesskey=\"u\" rel=\"up\">Libraries</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<h4 class=\"node-heading\">load-foreign-library-error</h4>\n"
"<a name=\"load_002dforeign_002dlibrary_002derror-1\"></a>\n"
"<h3 class=\"heading\">load-foreign-library-error</h3>"
msgstr ""

#: in/CFFI_User_Manual.htm:7634
msgid ""
"<a name=\"Syntax-64\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7638
msgid ""
"<dl>\n"
"<dt><a name=\"index-load_002dforeign_002dlibrary_002derror\"></a>Condition "
"Type: <strong>load-foreign-library-error</strong></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7641
msgid ""
"<a name=\"Class-precedence-list\"></a>\n"
"<h4 class=\"subheading\">Class precedence list</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7647
msgid ""
"<p><code>load-foreign-library-error</code>, <code>error</code>,\n"
"<code>serious-condition</code>, <code>condition</code>, <code>t</code>\n"
"</p>\n"
"<a name=\"Description-64\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7658
msgid ""
"<p>Signalled when a foreign library load completely fails.  The exact\n"
"meaning of this varies depending on the real conditions at work, but\n"
"almost universally, the implementationâs error message is useless.\n"
"However, <acronym>CFFI</acronym> does provide the useful restarts "
"<code>retry</code> and\n"
"<code>use-value</code>; invoke the <code>retry</code> restart to try loading "
"the\n"
"foreign library again, or the <code>use-value</code> restart to try loading\n"
"a different foreign library designator.\n"
"</p>\n"
"<a name=\"See-also-3\"></a>\n"
"<h4 class=\"subheading\">See also</h4>"
msgstr ""
"<p>Сигнализирует, когда загрузку внешней библиотеки выполнить полностью не "
"получилось.  \n"
"Точное значение варьируется в зависимости от реальных условий работы, но "
"почти повсеместно\n"
"сообщени реализации об ошибке - бесполезно..\n"
"Тем не менее, <acronym>CFFI</acronym> предоставляет полезные перезагрузки "
"<code>retry</code> и\n"
"<code>use-value</code>; вызовите <code>retry</code> чтобы попытаться снова "
"загрузить\n"
"внешнюю библиотеку, или <code>use-value</code> для перезапуска попытки "
"загрузки другого\n"
"обозначения внешней библиотеки.\n"
"</p>\n"
"<a name=\"See-also-3\"></a>\n"
"<h4 class=\"subheading\">See also</h4>"

#: in/CFFI_User_Manual.htm:7661
msgctxt "in/CFFI_User_Manual.htm:7661"
msgid ""
"<p><a href=\"#load_002dforeign_002dlibrary\">load-foreign-library</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7672
msgid ""
"<hr>\n"
"<a name=\"use_002dforeign_002dlibrary\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#load_002dforeign_002dlibrary_002derror\" accesskey=\"p"
"\" rel=\"prev\">load-foreign-library-error</a>, Up: <a href=\"#Libraries\" "
"accesskey=\"u\" rel=\"up\">Libraries</a> &nbsp; [<a href=\"#SEC_Contents\" "
"title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">use-foreign-library</h4>\n"
"<a name=\"use_002dforeign_002dlibrary-1\"></a>\n"
"<h3 class=\"heading\">use-foreign-library</h3>"
msgstr ""

#: in/CFFI_User_Manual.htm:7675
msgid ""
"<a name=\"Syntax-65\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7679
msgid ""
"<dl>\n"
"<dt><a name=\"index-use_002dforeign_002dlibrary\"></a>Macro: <strong>use-"
"foreign-library</strong> <em>name</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7682
msgid ""
"<a name=\"Arguments-and-values\"></a>\n"
"<h4 class=\"subheading\">Arguments and values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7688
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>name</var></dt>\n"
"<dd><p>A library designator; unevaluated.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7692
msgid ""
"<a name=\"Description-65\"></a>\n"
"<h4 class=\"subheading\">Description</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7700
msgid ""
"<p>See <a href=\"#load_002dforeign_002dlibrary\">load-foreign-library</a>, "
"for the meaning of âlibrary\n"
"designatorâ.  This is intended to be the top-level form used\n"
"idiomatically after a <code>define-foreign-library</code> form to go ahead\n"
"and load the library. Finally, on implementations where the regular "
"evaluation rule is\n"
"insufficient for foreign library loading, it loads it at the required\n"
"time.<a name=\"DOCF15\" href=\"#FOOT15\"><sup>15</sup></a>\n"
"</p>"
msgstr ""
"<p>См. <a href=\"#load_002dforeign_002dlibrary\">load-foreign-library</a>, "
"чтобы узнать\n"
"значение âуказатель библиотеки(library designator)â.  Предполагается, что "
"форма\n"
"верхнего уровня, идиоматически используемая после формы <code>define-foreign-"
"library</code>\n"
" для продолжения и загрузки библиотеки. Наконец, в реализациях, где обычного "
"выполнения\n"
"недостаточно для загрузки внешней библиотеки, она загружается в нужное "
"время.\n"
"<a name=\"DOCF15\" href=\"#FOOT15\"><sup>15</sup></a>\n"
"</p>"

#: in/CFFI_User_Manual.htm:7703
msgid ""
"<a name=\"Examples-59\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7706
msgctxt "in/CFFI_User_Manual.htm:7706"
msgid ""
"<p>See <a href=\"#Tutorial_002dLoading\">Loading foreign libraries</a>.\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7709
msgid ""
"<a name=\"See-also-4\"></a>\n"
"<h4 class=\"subheading\">See also</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7712
msgctxt "in/CFFI_User_Manual.htm:7712"
msgid ""
"<p><a href=\"#load_002dforeign_002dlibrary\">load-foreign-library</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7722
msgid ""
"<hr>\n"
"<a name=\"Callbacks\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#The-Groveller\" accesskey=\"n\" rel=\"next\">The Groveller</"
"a>, Previous: <a href=\"#Libraries\" accesskey=\"p\" rel=\"prev\">Libraries</"
"a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Callbacks-1\"></a>\n"
"<h2 class=\"chapter\">12 Callbacks</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Callbacks\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#The-Groveller\" accesskey=\"n\" rel=\"next\">The Groveller</"
"a>, Previous: <a href=\"#Libraries\" accesskey=\"p\" rel=\"prev\">Libraries</"
"a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Callbacks-1\"></a>\n"
"<h2 class=\"chapter\">12 Обратные вызовы(Callbacks)</h2>"

#: in/CFFI_User_Manual.htm:7725
msgctxt "in/CFFI_User_Manual.htm:7725"
msgid ""
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><th colspan=\"3\" valign=\"top\" align=\"left\"><pre class=\"menu-"
"comment\">Dictionary"
msgstr ""

#: in/CFFI_User_Manual.htm:7733
msgid ""
"</pre></th></tr><tr><td valign=\"top\" align=\"left\">• <a href=\"#callback"
"\" accesskey=\"1\">callback</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#defcallback\" accesskey="
"\"2\">defcallback</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" align="
"\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#get_002dcallback\" "
"accesskey=\"3\">get-callback</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top"
"\" align=\"left\">\n"
"</td></tr>\n"
"</tbody></table>"
msgstr ""

#: in/CFFI_User_Manual.htm:7750
msgid ""
"<hr>\n"
"<a name=\"callback\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#defcallback\" accesskey=\"n\" rel=\"next\">defcallback</a>, "
"Previous: <a href=\"#Callbacks\" accesskey=\"p\" rel=\"prev\">Callbacks</a>, "
"Up: <a href=\"#Callbacks\" accesskey=\"u\" rel=\"up\">Callbacks</a> &nbsp; "
"[<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">callback</h4>\n"
"<a name=\"callback-1\"></a>\n"
"<h3 class=\"heading\">callback</h3>\n"
"<a name=\"Syntax-66\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-callback\"></a>Macro: <strong>callback</strong> "
"<em>symbol⇒ pointer</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7753
msgid ""
"<a name=\"Arguments-and-Values-61\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7764
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>symbol</var></dt>\n"
"<dd><p>A symbol denoting a callback.\n"
"</p>\n"
"</dd>\n"
"<dt><var>pointer</var></dt>\n"
"<dt><var>new-value</var></dt>\n"
"<dd><p>A pointer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7773
msgid ""
"<a name=\"Description-66\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>callback</code> macro is analogous to the standard CL special\n"
"operator <code>function</code> and will return a pointer to the callback\n"
"denoted by the symbol <var>name</var>.\n"
"</p>\n"
"<a name=\"Examples-60\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-66\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>callback</code> аналогичен  специальному оператору в "
"стандартном CL\n"
" <code>function</code> и возвращает указатель на обратный вызов(callback),\n"
"обозначаемый символом <var>name</var>.\n"
"</p>\n"
"<a name=\"Examples-60\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:7781
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcallback</span></i> sum <span class=\"keyword"
"\">:int</span> <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\">a <span class=\"keyword\">:int</span></"
"span>)</span> <span class=\"paren3\">(<span class=\"lisp-bg\">b <span class="
"\"keyword\">:int</span></span>)</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">+ a b</span>)</"
"span></span>)</span>\n"
" ⇒ SUM\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">callback sum</"
"span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102350&gt;\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:7787
msgid ""
"<a name=\"See-Also-57\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#get_002dcallback\">get-callback</a> <br>\n"
"<a href=\"#defcallback\">defcallback</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7803
msgid ""
"<hr>\n"
"<a name=\"defcallback\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#get_002dcallback\" accesskey=\"n\" rel=\"next\">get-"
"callback</a>, Previous: <a href=\"#callback\" accesskey=\"p\" rel=\"prev"
"\">callback</a>, Up: <a href=\"#Callbacks\" accesskey=\"u\" rel=\"up"
"\">Callbacks</a> &nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents"
"\" rel=\"contents\">Contents</a>][<a href=\"#Comprehensive-Index\" title="
"\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">defcallback</h4>\n"
"<a name=\"defcallback-1\"></a>\n"
"<h3 class=\"heading\">defcallback</h3>\n"
"<a name=\"Syntax-67\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-defcallback\"></a>Macro: <strong>defcallback</strong> "
"<em>name-and-options return-type arguments &amp;body body⇒ name</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7809
msgid ""
"<p>name-and-options ::= name | (name &amp;key convention)\n"
"arguments ::= ({ (arg-name arg-type) }*)\n"
"</p>\n"
"<a name=\"Arguments-and-Values-62\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7831
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>name</var></dt>\n"
"<dd><p>A symbol naming the callback created.\n"
"</p>\n"
"</dd>\n"
"<dt><var>return-type</var></dt>\n"
"<dd><p>The foreign type for the callbackâs return value.\n"
"</p>\n"
"</dd>\n"
"<dt><var>arg-name</var></dt>\n"
"<dd><p>A symbol.\n"
"</p>\n"
"</dd>\n"
"<dt><var>arg-type</var></dt>\n"
"<dd><p>A foreign type.\n"
"</p>\n"
"</dd>\n"
"<dt><var>convention</var></dt>\n"
"<dd><p>One of <code>:cdecl</code> (default) or <code>:stdcall</code>.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7847
msgid ""
"<a name=\"Description-67\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>The <code>defcallback</code> macro defines a Lisp function that can be "
"called\n"
"from C. The arguments passed to this function will be converted to the\n"
"appropriate Lisp representation and its return value will be converted\n"
"to its C representation.\n"
"</p>\n"
"<p>This Lisp function can be accessed by the <code>callback</code> macro or "
"the\n"
"<code>get-callback</code> function.\n"
"</p>\n"
"<p><strong>Portability note:</strong> <code>defcallback</code> will not work "
"correctly\n"
"on some Lisps if itâs not a top-level form.\n"
"</p>\n"
"<a name=\"Examples-61\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-67\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Макрос <code>defcallback</code> определяет функцию Lisp, которую можно "
"вызвать\n"
"из Си. Аргументы, передаваемые этой функции, будут преобразованы в "
"соответствующее\n"
"представление Lisp, а её возвращаемое значение будет преобразовано в "
"представление Си.\n"
"</p>\n"
"<p>Эта функция Lisp может быть доступна с помощью макроса <code>callback</"
"code> или\n"
"функции <code>get-callback</code>.\n"
"</p>\n"
"<p><strong>Примечание о переносимости:</strong> <code>defcallback</code> не "
"будет \n"
"работать корректно на некоторых Лиспах, если это не будет формой верхнего "
"уровня.\n"
"</p>\n"
"<a name=\"Examples-61\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:7854
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcfun</span></i> <span class=\"string\">"
"\"qsort\"</span> <span class=\"keyword\">:void</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">base <span class="
"\"keyword\">:pointer</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">nmemb <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">size <span class="
"\"keyword\">:int</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">fun-compar <span class="
"\"keyword\">:pointer</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:7861
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defcallback</span></i> &lt; <span class=\"keyword\">:int</span> <span "
"class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"paren3\">(<span "
"class=\"lisp-bg\">a <span class=\"keyword\">:pointer</span></span>)</span> "
"<span class=\"paren3\">(<span class=\"lisp-bg\">b <span class=\"keyword\">:"
"pointer</span></span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">let</span></i> <span class=\"paren3\">(<span class=\"lisp-bg\"><span "
"class=\"paren4\">(<span class=\"lisp-bg\">x <span class=\"paren5\">(<span "
"class=\"lisp-bg\">mem-ref a <span class=\"keyword\">:int</span></span>)</"
"span></span>)</span>\n"
"          <span class=\"paren4\">(<span class=\"lisp-bg\">y <span class="
"\"paren5\">(<span class=\"lisp-bg\">mem-ref b <span class=\"keyword\">:int</"
"span></span>)</span></span>)</span></span>)</span>\n"
"      <span class=\"paren3\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">cond</span></i> <span class=\"paren4\">(<span class=\"lisp-bg\"><span "
"class=\"paren5\">(<span class=\"lisp-bg\">&gt; x y</span>)</span> 1</span>)</"
"span>\n"
"            <span class=\"paren4\">(<span class=\"lisp-bg\"><span class="
"\"paren5\">(<span class=\"lisp-bg\">&lt; x y</span>)</span> -1</span>)</"
"span>\n"
"            <span class=\"paren4\">(<span class=\"lisp-bg\">t 0</span>)</"
"span></span>)</span></span>)</span></span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:7873
msgid ""
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">with-foreign-object</span></i> <span class=\"paren2\">(<span "
"class=\"lisp-bg\">array <span class=\"keyword\">:int</span> 10</span>)</"
"span>\n"
"          <span class=\"comment\">;; Initialize array.\n"
"  </span>        <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">loop</span></i> for i from 0 and n in '<span class="
"\"paren3\">(<span class=\"lisp-bg\">7 2 10 4 3 5 1 6 9 8</span>)</span>\n"
"                do <span class=\"paren3\">(<span class=\"lisp-bg\">setf "
"<span class=\"paren4\">(<span class=\"lisp-bg\">mem-aref array <span class="
"\"keyword\">:int</span> i</span>)</span> n</span>)</span></span>)</span>\n"
"          <span class=\"comment\">;; Sort it.\n"
"  </span>        <span class=\"paren2\">(<span class=\"lisp-bg\">qsort array "
"10 <span class=\"paren3\">(<span class=\"lisp-bg\">foreign-type-size <span "
"class=\"keyword\">:int</span></span>)</span> <span class=\"paren3\">(<span "
"class=\"lisp-bg\">callback &lt;</span>)</span></span>)</span>\n"
"          <span class=\"comment\">;; Return it as a list.\n"
"  </span>        <span class=\"paren2\">(<span class=\"lisp-bg\"><i><span "
"class=\"symbol\">loop</span></i> for i from 0 below 10\n"
"                collect <span class=\"paren3\">(<span class=\"lisp-bg\">mem-"
"aref array <span class=\"keyword\">:int</span> i</span>)</span></span>)</"
"span></span>)</span>\n"
" ⇒ <span class=\"paren1\">(<span class=\"lisp-bg\">1 2 3 4 5 6 7 8 9 10</"
"span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:7879
msgid ""
"<a name=\"See-Also-58\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#callback\">callback</a> <br>\n"
"<a href=\"#get_002dcallback\">get-callback</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7895
msgid ""
"<hr>\n"
"<a name=\"get_002dcallback\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#defcallback\" accesskey=\"p\" rel=\"prev\">defcallback</"
"a>, Up: <a href=\"#Callbacks\" accesskey=\"u\" rel=\"up\">Callbacks</a> "
"&nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<h4 class=\"node-heading\">get-callback</h4>\n"
"<a name=\"get_002dcallback-1\"></a>\n"
"<h3 class=\"heading\">get-callback</h3>\n"
"<a name=\"Syntax-68\"></a>\n"
"<h4 class=\"subheading\">Syntax</h4>\n"
"<dl>\n"
"<dt><a name=\"index-get_002dcallback\"></a>Accessor: <strong>get-callback</"
"strong> <em>symbol⇒ pointer</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7898
msgid ""
"<a name=\"Arguments-and-Values-63\"></a>\n"
"<h4 class=\"subheading\">Arguments and Values</h4>"
msgstr ""

#: in/CFFI_User_Manual.htm:7908
msgid ""
"<dl compact=\"compact\">\n"
"<dt><var>symbol</var></dt>\n"
"<dd><p>A symbol denoting a callback.\n"
"</p>\n"
"</dd>\n"
"<dt><var>pointer</var></dt>\n"
"<dd><p>A pointer.\n"
"</p></dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:7917
msgid ""
"<a name=\"Description-68\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>This is the functional version of the <code>callback</code> macro. It\n"
"returns a pointer to the callback named by <var>symbol</var> suitable, for\n"
"example, to pass as arguments to foreign functions.\n"
"</p>\n"
"<a name=\"Examples-62\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"
msgstr ""
"<a name=\"Description-68\"></a>\n"
"<h4 class=\"subheading\">Description</h4>\n"
"<p>Это функциональная версия макроса <code>callback</code>. Она возвращает\n"
"указатель на обратный вызов, обозначаемый соотвествующим <var>symbol</var>,\n"
"например, для передачи в качестве аргумента внешним функциям.\n"
"</p>\n"
"<a name=\"Examples-62\"></a>\n"
"<h4 class=\"subheading\">Examples</h4>"

#: in/CFFI_User_Manual.htm:7925
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defcallback</span></i> sum <span class=\"keyword"
"\">:int</span> <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\">a <span class=\"keyword\">:int</span></"
"span>)</span> <span class=\"paren3\">(<span class=\"lisp-bg\">b <span class="
"\"keyword\">:int</span></span>)</span></span>)</span>\n"
"          <span class=\"paren2\">(<span class=\"lisp-bg\">+ a b</span>)</"
"span></span>)</span>\n"
" ⇒ SUM\n"
"  CFFI&gt; <span class=\"paren1\">(<span class=\"lisp-bg\">get-callback "
"'sum</span>)</span>\n"
" ⇒ #&lt;A Mac Pointer #x102350&gt;\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:7931
msgid ""
"<a name=\"See-Also-59\"></a>\n"
"<h4 class=\"subheading\">See Also</h4>\n"
"<p><a href=\"#callback\">callback</a> <br>\n"
"<a href=\"#defcallback\">defcallback</a>\n"
"</p>"
msgstr ""

#: in/CFFI_User_Manual.htm:7941
msgid ""
"<hr>\n"
"<a name=\"The-Groveller\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Limitations\" accesskey=\"n\" rel=\"next\">Limitations</a>, "
"Previous: <a href=\"#Callbacks\" accesskey=\"p\" rel=\"prev\">Callbacks</a>, "
"Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"The-Groveller-1\"></a>\n"
"<h2 class=\"chapter\">13 The Groveller</h2>"
msgstr ""
"<hr>\n"
"<a name=\"The-Groveller\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Limitations\" accesskey=\"n\" rel=\"next\">Limitations</a>, "
"Previous: <a href=\"#Callbacks\" accesskey=\"p\" rel=\"prev\">Callbacks</a>, "
"Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"The-Groveller-1\"></a>\n"
"<h2 class=\"chapter\">13 Groveller</h2>"

#: in/CFFI_User_Manual.htm:7967
msgid ""
"<p><acronym>CFFI</acronym>-Grovel is a tool which makes it easier to write "
"<acronym>CFFI</acronym>\n"
"declarations for libraries that are implemented in C.  That is, it\n"
"grovels through the system headers, getting information about types\n"
"and structures, so you donât have to.  This is especially important\n"
"for libraries which are implemented in different ways by different\n"
"vendors, such as the <small>UNIX</small>/<small>POSIX</small> functions.  "
"The <acronym>CFFI</acronym>\n"
"declarations are usually quite different from platform to platform,\n"
"but the information you give to <acronym>CFFI</acronym>-Grovel is the same.  "
"Hence,\n"
"much less work is required!\n"
"</p>\n"
"<p>If you use <acronym>ASDF</acronym>, <acronym>CFFI</acronym>-Grovel is "
"integrated, so that it\n"
"will run automatically when your system is building.  This feature was\n"
"inspired by SB-Grovel, a similar <acronym>SBCL</acronym>-specific project.\n"
"<acronym>CFFI</acronym>-Grovel can also be used without <acronym>ASDF</"
"acronym>.\n"
"</p>\n"
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-Syntax"
"\" accesskey=\"1\">Groveller Syntax</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-ASDF-"
"Integration\" accesskey=\"2\">Groveller ASDF Integration</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-Implementation-"
"Notes\" accesskey=\"3\">Groveller Implementation Notes</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Wrapper-for-"
"Inline_002fStatic-Functions-and-Macros\" accesskey=\"4\">Wrapper for Inline/"
"Static Functions and Macros</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">\n"
"</td></tr>\n"
"</tbody></table>"
msgstr ""
"<p><acronym>CFFI</acronym>-Grovel это инструмент, который облегчает "
"написание\n"
"деклараций <acronym>CFFI</acronym> для библиотек, которые реализованы на "
"Си.\n"
"То есть, он просматривает заголовочные файлы системы, получая информацию о\n"
"типах и структурах, поэтому вам не нужно этого делать.  Это особенно\n"
"важно для библиотек, которые по разному реализуются разными поставщиками,\n"
"такими как фунции <small>UNIX</small>/<small>POSIX</small>.  Декларации "
"<acronym>CFFI</acronym>,\n"
"как правило, сильно отличаются от платформы к платформе, но информация, "
"которую вы предоставляете\n"
"<acronym>CFFI</acronym>-Grovel одна и таже. Следовательно, требуется\n"
"гораздо меньше работы!\n"
"</p>\n"
"<p>Если вы используете <acronym>ASDF</acronym>, <acronym>CFFI</acronym>-"
"Grovel интергрируется, так\n"
"что он будет запускаться автоматически при сборке(построении) вашей "
"системы.  \n"
"Данная функциональность вдохновлена SB-Grovel, похожим пакетом разработанным "
"для <acronym>SBCL</acronym>\n"
"проетов.\n"
"<acronym>CFFI</acronym>-Grovel может также использоваться без <acronym>ASDF</"
"acronym>.\n"
"</p>\n"
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-Syntax"
"\" accesskey=\"1\">Groveller Syntax</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-ASDF-"
"Integration\" accesskey=\"2\">Groveller ASDF Integration</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-Implementation-"
"Notes\" accesskey=\"3\">Groveller Implementation Notes</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Wrapper-for-"
"Inline_002fStatic-Functions-and-Macros\" accesskey=\"4\">Wrapper for Inline/"
"Static Functions and Macros</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">\n"
"</td></tr>\n"
"</tbody></table>"

#: in/CFFI_User_Manual.htm:7970
msgid ""
"<a name=\"Building-FFIs-with-CFFI_002dGrovel\"></a>\n"
"<h3 class=\"section\">13.1 Building FFIs with CFFI-Grovel</h3>"
msgstr ""
"<a name=\"Building-FFIs-with-CFFI_002dGrovel\"></a>\n"
"<h3 class=\"section\">13.1 Создание FFI с помощью CFFI-Grovel</h3>"

#: in/CFFI_User_Manual.htm:7977
msgid ""
"<p><acronym>CFFI</acronym>-Grovel uses a specification file (*.lisp) "
"describing the\n"
"features that need groveling.  The C compiler is used to retrieve this\n"
"data and write a Lisp file (*.cffi.lisp) which contains the necessary\n"
"<acronym>CFFI</acronym> definitions to access the variables, structures, "
"constants, and\n"
"enums mentioned in the specification.\n"
"</p>"
msgstr ""
"<p><acronym>CFFI</acronym>-Grovel использует файл спецификаций (*.lisp) "
"описывающий\n"
"фунции, которые необходимо извлечь(groveling).  Компилятор Си используется "
"для\n"
"извлечения этих данных и записи файла Lisp (*.cffi.lisp), который содержит "
"необходимые\n"
"определения <acronym>CFFI</acronym> для доступа к переменным, структурам, "
"константам и\n"
"перечислениям, упомянутым в спецификации.\n"
"</p>"

#: in/CFFI_User_Manual.htm:7981
msgid ""
"<p><acronym>CFFI</acronym>-Grovel provides an <acronym>ASDF</acronym> "
"component for handling the\n"
"necessary calls to the C compiler and resulting file management.\n"
"</p>"
msgstr ""
"<p><acronym>CFFI</acronym>-Grovel предоставляет компонент <acronym>ASDF</"
"acronym> для обработки\n"
"необходмых вызовов компилятора Си и управления файлами результата.\n"
"</p>"

#: in/CFFI_User_Manual.htm:7992
msgid ""
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-Syntax"
"\" accesskey=\"1\">Groveller Syntax</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">How grovel files should look like.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-ASDF-"
"Integration\" accesskey=\"2\">Groveller ASDF Integration</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">ASDF components for grovel "
"files.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-Implementation-"
"Notes\" accesskey=\"3\">Groveller Implementation Notes</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Implementation notes.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Wrapper-for-"
"Inline_002fStatic-Functions-and-Macros\" accesskey=\"4\">Wrapper for Inline/"
"Static Functions and Macros</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">Wrapper\n"
"</td></tr>\n"
"</tbody></table>"
msgstr ""
"<table class=\"menu\" cellspacing=\"0\" border=\"0\">\n"
"<tbody><tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-Syntax"
"\" accesskey=\"1\">Groveller Syntax</a>:</td><td>&nbsp;&nbsp;</td><td valign="
"\"top\" align=\"left\">Как должны выглядеть файлы grovel.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-ASDF-"
"Integration\" accesskey=\"2\">Groveller ASDF Integration</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Компоненты ASDF для файлов.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Groveller-Implementation-"
"Notes\" accesskey=\"3\">Groveller Implementation Notes</a>:</td><td>&nbsp;"
"&nbsp;</td><td valign=\"top\" align=\"left\">Замечания по реализации.\n"
"</td></tr>\n"
"<tr><td valign=\"top\" align=\"left\">• <a href=\"#Wrapper-for-"
"Inline_002fStatic-Functions-and-Macros\" accesskey=\"4\">Wrapper for Inline/"
"Static Functions and Macros</a>:</td><td>&nbsp;&nbsp;</td><td valign=\"top\" "
"align=\"left\">Обертка\n"
"</td></tr>\n"
"</tbody></table>"

#: in/CFFI_User_Manual.htm:8001
msgid ""
"<hr>\n"
"<a name=\"Groveller-Syntax\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Groveller-ASDF-Integration\" accesskey=\"n\" rel=\"next"
"\">Groveller ASDF Integration</a>, Previous: <a href=\"#The-Groveller\" "
"accesskey=\"p\" rel=\"prev\">The Groveller</a>, Up: <a href=\"#The-Groveller"
"\" accesskey=\"u\" rel=\"up\">The Groveller</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Specification-File-Syntax\"></a>\n"
"<h3 class=\"section\">13.2 Specification File Syntax</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Groveller-Syntax\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Groveller-ASDF-Integration\" accesskey=\"n\" rel=\"next"
"\">Groveller ASDF Integration</a>, Previous: <a href=\"#The-Groveller\" "
"accesskey=\"p\" rel=\"prev\">The Groveller</a>, Up: <a href=\"#The-Groveller"
"\" accesskey=\"u\" rel=\"up\">The Groveller</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Specification-File-Syntax\"></a>\n"
"<h3 class=\"section\">13.2 Синтаксис файла спецификации</h3>"

#: in/CFFI_User_Manual.htm:8014
msgid ""
"<p>The specification files are read by the normal Lisp reader, so they\n"
"have syntax very similar to normal Lisp code.  In particular,\n"
"semicolon-comments and reader-macros will work as expected.\n"
"</p>\n"
"<p>There are several forms recognized by <acronym>CFFI</acronym>-Grovel:\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-progn\"></a>Grovel Form: <strong>progn</strong> <em>&amp;"
"rest forms</em></dt>\n"
"<dd>\n"
"<p>Processes a list of forms. Useful for conditionalizing several\n"
"forms. For example:\n"
"</p></dd></dl>"
msgstr ""
"<p>Файлы спецификации читаются обычным Lisp-ом, поэтому они имеют\n"
"синтаксис, очень похожий на обычный код Lisp.  В частности,\n"
"разделители-коментарии и макросы чтения будут работать как положено.\n"
"</p>\n"
"<p>Существуют несколько форм, распознаваемых <acronym>CFFI</acronym>-"
"Grovel:\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-progn\"></a>Форма Grovel: <strong>progn</strong> "
"<em>&amp;rest forms</em></dt>\n"
"<dd>\n"
"<p>Обрабатывает список форм. Полезно для объединения нескольких форм. "
"Например:\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8021
msgctxt "in/CFFI_User_Manual.htm:8021"
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  #+freebsd\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">progn</span></i>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">constant <span class="
"\"paren3\">(<span class=\"lisp-bg\">ev-enable <span class=\"string\">"
"\"EV_ENABLE\"</span></span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">constant <span class="
"\"paren3\">(<span class=\"lisp-bg\">ev-disable <span class=\"string\">"
"\"EV_DISABLE\"</span></span>)</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:8028
msgid ""
"<dl>\n"
"<dt><a name=\"index-include\"></a>Grovel Form: <strong>include</strong> "
"<em>&amp;rest files</em></dt>\n"
"<dd>\n"
"<p>Include the specified files (specified as strings) in the generated C\n"
"source code.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-include\"></a>Grovel Form: <strong>include</strong> "
"<em>&amp;rest files</em></dt>\n"
"<dd>\n"
"<p>Включает указанные файлы (указываются как строки) в исходный код Си "
"используемый для генерации.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8034
msgid ""
"<dl>\n"
"<dt><a name=\"index-in_002dpackage\"></a>Grovel Form: <strong>in-package</"
"strong> <em>symbol</em></dt>\n"
"<dd>\n"
"<p>Set the package to be used for the final Lisp output.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-in_002dpackage\"></a>Grovel Form: <strong>in-package</"
"strong> <em>symbol</em></dt>\n"
"<dd>\n"
"<p>Устанавливает пакет, который будет использоваться для окончательного "
"вывода Lisp.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8041
msgid ""
"<dl>\n"
"<dt><a name=\"index-ctype\"></a>Grovel Form: <strong>ctype</strong> <em>lisp-"
"name size-designator</em></dt>\n"
"<dd>\n"
"<p>Define a <acronym>CFFI</acronym> foreign type for the string in <var>size-"
"designator</var>,\n"
"e.g. <code>(ctype :pid \"pid_t\")</code>.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-ctype\"></a>Grovel Form: <strong>ctype</strong> <em>lisp-"
"name size-designator</em></dt>\n"
"<dd>\n"
"<p>Определяет внешний тип <acronym>CFFI</acronym> для стороки указателя "
"размера <var>size-designator</var>,\n"
"например <code>(ctype :pid \"pid_t\")</code>.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8055
msgid ""
"<dl>\n"
"<dt><a name=\"index-constant\"></a>Grovel Form: <strong>constant</strong> "
"<em>(lisp-name &amp;rest c-names) &amp;key type documentation optional</em></"
"dt>\n"
"<dd>\n"
"<p>Search for the constant named by the first <var>c-name</var> string "
"found\n"
"to be known to the C preprocessor and define it as <var>lisp-name</var>.\n"
"</p>\n"
"<p>The <var>type</var> keyword argument specifies how to grovel the "
"constant:\n"
"either <code>integer</code> (the default) or <code>double-float</code>. If\n"
"<var>optional</var> is true, no error will be raised if all the\n"
"<var>c-names</var> are unknown. If <var>lisp-name</var> is a keyword, the "
"actual\n"
"constant will be a symbol of the same name interned in the current\n"
"package.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-constant\"></a>Grovel Form: <strong>constant</strong> "
"<em>(lisp-name &amp;rest c-names) &amp;key type documentation optional</em></"
"dt>\n"
"<dd>\n"
"<p>Ищет константу именуемую первой стокой <var>c-name</var>, которая "
"известна\n"
"препроцессору Си и определяет ее как <var>lisp-name</var>.\n"
"</p>\n"
"<p>Аргумент ключевое слово <var>type</var> указвает как преобразовать "
"константу:\n"
"либо <code>integer</code> (по умолчанию) или <code>double-float</code>. "
"Если\n"
"<var>optional</var> равно true, ошибка не возникает, если все <var>c-names</"
"var> \n"
"неизвестны. Если <var>lisp-name</var> это ключевое слово, фактическая "
"константа\n"
"будет символом с тем же самым именем, интернированным в текущем пакете.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8063
msgid ""
"<dl>\n"
"<dt><a name=\"index-feature\"></a>Grovel Form: <strong>feature</strong> "
"<em>lisp-feature-name c-name &amp;key feature-list</em></dt>\n"
"<dd>\n"
"<p>Adds <var>lisp-feature-name</var> to the list <var>feature-list</var> if "
"the <var>c-name</var>\n"
"string is known to the C preprocessor. <var>feature-list</var> defaults\n"
"to <code>cl:*features*</code>.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-feature\"></a>Grovel Form: <strong>feature</strong> "
"<em>lisp-feature-name c-name &amp;key feature-list</em></dt>\n"
"<dd>\n"
"<p>Добавляет <var>lisp-feature-name</var> в список  <var>feature-list</var> "
"если строка <var>c-name</var>\n"
"известна препроцессору Си. <var>feature-list</var> по умолчанию равен\n"
"<code>cl:*features*</code>.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8070
msgid ""
"<dl>\n"
"<dt><a name=\"index-define\"></a>Grovel Form: <strong>define</strong> "
"<em>name &amp;optional value</em></dt>\n"
"<dd>\n"
"<p>Defines an additional C preprocessor symbol, which is useful for\n"
"altering the behavior of included system headers.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-define\"></a>Grovel Form: <strong>define</strong> "
"<em>name &amp;optional value</em></dt>\n"
"<dd>\n"
"<p>Определяет дополнительный символ препроцессора Си, который полезен для "
"изменения поведения\n"
"включенных системных заголовков.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8077
msgid ""
"<dl>\n"
"<dt><a name=\"index-cc_002dflags\"></a>Grovel Form: <strong>cc-flags</"
"strong> <em>&amp;rest flags</em></dt>\n"
"<dd>\n"
"<p>Adds <var>cc-flags</var> to the command line arguments used for the C "
"compiler\n"
"invocation.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-cc_002dflags\"></a>Grovel Form: <strong>cc-flags</"
"strong> <em>&amp;rest flags</em></dt>\n"
"<dd>\n"
"<p>Добавляет <var>cc-flags</var> к аргументам командной строки, используемым "
"для\n"
"вызова компилятора Си.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8092
msgid ""
"<dl>\n"
"<dt><a name=\"index-pkg_002dconfig_002dcflags\"></a>Grovel Form: <strong>pkg-"
"config-cflags</strong> <em>pkg &amp;key optional</em></dt>\n"
"<dd>\n"
"<p>Adds <var>pkg</var> to the command line arguments for the external "
"program\n"
"<code>pkg-config</code> and runs it to retrieve the relevant include flags\n"
"used for the C compiler invocation. This syntax can be used instead of\n"
"hard-coding paths using <code>cc-flags</code>, and ensures that include\n"
"flags are added correctly on the build system. Assumes\n"
"<code>pkg-config</code> is installed and working.  <var>pkg</var> is a "
"string\n"
"that identifies an installed <code>pkg-config</code> package. See the\n"
"pkg-config manual for more information. If <var>optional</var> is true,\n"
"failure to execute <code>pkg-config</code> does <em>not</em> abort\n"
"compilation.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-pkg_002dconfig_002dcflags\"></a>Grovel Form: <strong>pkg-"
"config-cflags</strong> <em>pkg &amp;key optional</em></dt>\n"
"<dd>\n"
"<p>Добавляет <var>pkg</var> к аргументам командной сторки для внешней "
"программы\n"
"<code>pkg-config</code> и запускает ее, чтобы получить соответствующие "
"флаги\n"
"используемые для вызов компилятора Си. Этот синтаксис может испольоваться "
"вместо жесткого\n"
"задания путей с использованием <code>cc-flags</code>, и гарантирует, что "
"включаемые флаги\n"
"будут правильно добавлены в соранную систему. Предполагается, что <code>pkg-"
"config</code> \n"
"инсталирован и работает.  <var>pkg</var> это строка, которая идентифицирует "
"установленный\n"
"пакет <code>pkg-config</code>. См. руководство pkg-config для более "
"подробной информации.\n"
"Если <var>optional</var> равно true, сбой выполнения <code>pkg-config</code> "
"не\n"
"прерывает компиляцию.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8099
msgid ""
"<dl>\n"
"<dt><a name=\"index-cstruct\"></a>Grovel Form: <strong>cstruct</strong> "
"<em>lisp-name c-name slots</em></dt>\n"
"<dd>\n"
"<p>Define a <acronym>CFFI</acronym> foreign struct with the slot data "
"specfied.  Slots\n"
"are of the form <code>(lisp-name c-name &amp;key type count (signed t))</"
"code>.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-cstruct\"></a>Grovel Form: <strong>cstruct</strong> "
"<em>lisp-name c-name slots</em></dt>\n"
"<dd>\n"
"<p>Определялет внешнюю структуру <acronym>CFFI</acronym> с указаннием данных "
"слотов.  Слоты имеют\n"
"форму <code>(lisp-name c-name &amp;key type count (signed t))</code>.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8105
msgid ""
"<dl>\n"
"<dt><a name=\"index-cunion\"></a>Grovel Form: <strong>cunion</strong> "
"<em>lisp-name c-name slots</em></dt>\n"
"<dd>\n"
"<p>Identical to <code>cstruct</code>, but defines a <acronym>CFFI</acronym> "
"foreign union.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-cunion\"></a>Grovel Form: <strong>cunion</strong> "
"<em>lisp-name c-name slots</em></dt>\n"
"<dd>\n"
"<p>Идентично <code>cstruct</code>, но определяет внешнее объединение "
"<acronym>CFFI</acronym>.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8114
msgid ""
"<dl>\n"
"<dt><a name=\"index-cstruct_002dand_002dclass\"></a>Grovel Form: "
"<strong>cstruct-and-class</strong> <em>c-name slots</em></dt>\n"
"<dd>\n"
"<p>Defines a <acronym>CFFI</acronym> foreign struct, as with <code>cstruct</"
"code> and defines a\n"
"<acronym>CLOS</acronym> class to be used with it.  This is useful for "
"mapping\n"
"foreign structures to application-layer code that shouldnât need to\n"
"worry about memory allocation issues.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-cstruct_002dand_002dclass\"></a>Grovel Form: "
"<strong>cstruct-and-class</strong> <em>c-name slots</em></dt>\n"
"<dd>\n"
"<p>Определяет внешнюю структуру <acronym>CFFI</acronym> , как <code>cstruct</"
"code> и определяет\n"
"класс <acronym>CLOS</acronym>, который будет использоваться с ней.  Это "
"полезно для сопоставления\n"
"внешних структур с кодом прикладного уровня, который не должен беспокоиться "
"о проблемах распределения\n"
"памяти.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8125
msgid ""
"<dl>\n"
"<dt><a name=\"index-cvar\"></a>Grovel Form: <strong>cvar</strong> "
"<em>namespec type &amp;key read-only</em></dt>\n"
"<dd>\n"
"<p>Defines a foreign variable of the specified type, even if that\n"
"variable is potentially a C preprocessor pseudo-variable.  e.g.\n"
"<code>(cvar (\"errno\" errno) errno-values)</code>, assuming that errno-"
"values\n"
"is an enum or equivalent to type <code>:int</code>.\n"
"</p>\n"
"<p>The <var>namespec</var> is similar to the one used in <a href=\"#defcvar"
"\">defcvar</a>.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-cvar\"></a>Grovel Form: <strong>cvar</strong> "
"<em>namespec type &amp;key read-only</em></dt>\n"
"<dd>\n"
"<p>Определяет внешнюю переменную указанного типа, даже если эта переменная\n"
"потецниально является псевдопеременной препроцессора Си.  например\n"
"<code>(cvar (\"errno\" errno) errno-values)</code>, предполагая, что errno-"
"values\n"
"является перечислением( enum) или эквивалентно типу <code>:int</code>.\n"
"</p>\n"
"<p> <var>namespec</var> похож, на тот, который используется в <a href="
"\"#defcvar\">defcvar</a>.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8135
msgid ""
"<dl>\n"
"<dt><a name=\"index-cenum\"></a>Grovel Form: <strong>cenum</strong> <em>name-"
"and-opts &amp;rest elements</em></dt>\n"
"<dd>\n"
"<p>Defines a true C enum, with elements specified as <code>((lisp-name\n"
"&amp;rest c-names) &amp;key optional documentation)</code>.\n"
"<var>name-and-opts</var> can be either a symbol as name, or a list\n"
"<code>(name &amp;key base-type define-constants)</code>. If <var>define-"
"constants</var>\n"
"is non-null, a Lisp constant will be defined for each enum member.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-cenum\"></a>Grovel Form: <strong>cenum</strong> <em>name-"
"and-opts &amp;rest elements</em></dt>\n"
"<dd>\n"
"<p>Определяет истинное перечисление Си(enum), с элементами указыанными как "
"<code>((lisp-name\n"
"&amp;rest c-names) &amp;key optional documentation)</code>.\n"
"<var>name-and-opts</var> может быть либо символом в качестве имени, или "
"списком\n"
"<code>(name &amp;key base-type define-constants)</code>. Если <var>define-"
"constants</var>\n"
"не равно null, константа Lisp будет определена для каждого члена "
"перечисления.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8152
msgid ""
"<dl>\n"
"<dt><a name=\"index-constantenum\"></a>Grovel Form: <strong>constantenum</"
"strong> <em>name-and-opts &amp;rest elements</em></dt>\n"
"<dd>\n"
"<p>Defines an enumeration of pre-processor constants, with elements\n"
"specified as <code>((lisp-name &amp;rest c-names) &amp;key optional\n"
"documentation)</code>.\n"
"<var>name-and-opts</var> can be either a symbol as name, or a list\n"
"<code>(name &amp;key base-type define-constants)</code>. If <var>define-"
"constants</var>\n"
"is non-null, a Lisp constant will be defined for each enum member.\n"
"</p>\n"
"<p>This example defines <code>:af-inet</code> to represent the value held "
"by\n"
"<code>AF_INET</code> or <code>PF_INET</code>, whichever the pre-processor "
"finds\n"
"first.  Similarly for <code>:af-packet</code>, but no error will be\n"
"signalled if the platform supports neither <code>AF_PACKET</code> nor\n"
"<code>PF_PACKET</code>.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-constantenum\"></a>Grovel Form: <strong>constantenum</"
"strong> <em>name-and-opts &amp;rest elements</em></dt>\n"
"<dd>\n"
"<p>Определяет перечисление констант прероцессора, с элементами указанными "
"как \n"
"<code>((lisp-name &amp;rest c-names) &amp;key optional\n"
"documentation)</code>.\n"
"<var>name-and-opts</var> может быть либо символом в качестве имени, или "
"списком\n"
"<code>(name &amp;key base-type define-constants)</code>. Если <var>define-"
"constants</var>\n"
"не равно null, констатка Lisp будет определена для каждого члена "
"перечисления.\n"
"</p>\n"
"<p>В этом примере <code>:af-inet</code> для представления значения\n"
"<code>AF_INET</code> или <code>PF_INET</code>, в зависимости от того, какое\n"
"препроцессор первым.  Аналогично для <code>:af-packet</code>, но об ошибке "
"не\n"
"будет сообщено, если платформа не поддерживает ни <code>AF_PACKET</code>, "
"ни\n"
"<code>PF_PACKET</code>.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8165
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\">constantenum address-family\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:af-inet</span> "
"<span class=\"string\">\"AF_INET\"</span> <span class=\"string\">\"PF_INET"
"\"</span></span>)</span>\n"
"     <span class=\"keyword\">:documentation</span> <span class=\"string\">"
"\"IPv4 Protocol family\"</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:af-local</span> "
"<span class=\"string\">\"AF_UNIX\"</span> <span class=\"string\">\"AF_LOCAL"
"\"</span> <span class=\"string\">\"PF_UNIX\"</span> <span class=\"string\">"
"\"PF_LOCAL\"</span></span>)</span>\n"
"     <span class=\"keyword\">:documentation</span> <span class=\"string\">"
"\"File domain sockets\"</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:af-inet6</span> "
"<span class=\"string\">\"AF_INET6\"</span> <span class=\"string\">"
"\"PF_INET6\"</span></span>)</span>\n"
"     <span class=\"keyword\">:documentation</span> <span class=\"string\">"
"\"IPv6 Protocol family\"</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:af-packet</"
"span> <span class=\"string\">\"AF_PACKET\"</span> <span class=\"string\">"
"\"PF_PACKET\"</span></span>)</span>\n"
"     <span class=\"keyword\">:documentation</span> <span class=\"string\">"
"\"Raw packet access\"</span>\n"
"     <span class=\"keyword\">:optional</span> t</span>)</span></span>)</"
"span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:8173
msgid ""
"<dl>\n"
"<dt><a name=\"index-bitfield\"></a>Grovel Form: <strong>bitfield</strong> "
"<em>name-and-opts &amp;rest elements</em></dt>\n"
"<dd>\n"
"<p>Defines a bitfield, with elements specified as <code>((lisp-name &amp;"
"rest\n"
"c-names) &amp;key optional documentation)</code>.  <var>name-and-opts</var> "
"can be either a\n"
"symbol as name, or a list <code>(name &amp;key base-type)</code>.  For "
"example:\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-bitfield\"></a>Grovel Form: <strong>bitfield</strong> "
"<em>name-and-opts &amp;rest elements</em></dt>\n"
"<dd>\n"
"<p>Определяет битовое поле(bitfield) с элементами указанными как "
"<code>((lisp-name &amp;rest\n"
"c-names) &amp;key optional documentation)</code>.  <var>name-and-opts</var> "
"может быть либо\n"
"символом в качестве имени, или списком <code>(name &amp;key base-type)</"
"code>.  Например:\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8184
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\">bitfield flags-ctype\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:flag-a</span> "
"<span class=\"string\">\"FLAG_A\"</span></span>)</span>\n"
"      <span class=\"keyword\">:documentation</span> <span class=\"string\">"
"\"DOCU_A\"</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:flag-b</span> "
"<span class=\"string\">\"FLAG_B\"</span> <span class=\"string\">\"FLAG_B_ALT"
"\"</span></span>)</span>\n"
"      <span class=\"keyword\">:documentation</span> <span class=\"string\">"
"\"DOCU_B\"</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:flag-c</span> "
"<span class=\"string\">\"FLAG_C\"</span></span>)</span>\n"
"      <span class=\"keyword\">:documentation</span> <span class=\"string\">"
"\"DOCU_C\"</span>\n"
"      <span class=\"keyword\">:optional</span> t</span>)</span></span>)</"
"span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:8195
msgid ""
"<hr>\n"
"<a name=\"Groveller-ASDF-Integration\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Groveller-Implementation-Notes\" accesskey=\"n\" rel=\"next"
"\">Groveller Implementation Notes</a>, Previous: <a href=\"#Groveller-Syntax"
"\" accesskey=\"p\" rel=\"prev\">Groveller Syntax</a>, Up: <a href=\"#The-"
"Groveller\" accesskey=\"u\" rel=\"up\">The Groveller</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"ASDF-Integration\"></a>\n"
"<h3 class=\"section\">13.3 ASDF Integration</h3>"
msgstr ""
"<hr>\n"
"<a name=\"Groveller-ASDF-Integration\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Groveller-Implementation-Notes\" accesskey=\"n\" rel=\"next"
"\">Groveller Implementation Notes</a>, Previous: <a href=\"#Groveller-Syntax"
"\" accesskey=\"p\" rel=\"prev\">Groveller Syntax</a>, Up: <a href=\"#The-"
"Groveller\" accesskey=\"u\" rel=\"up\">The Groveller</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"ASDF-Integration\"></a>\n"
"<h3 class=\"section\">13.3 Интеграция с ASDF</h3>"

#: in/CFFI_User_Manual.htm:8219
msgid ""
"<p>An example software project might contain four files; an\n"
"<acronym>ASDF</acronym> file, a package definition file, an implementation\n"
"file, and a <acronym>CFFI</acronym>-Grovel specification file.\n"
"</p>\n"
"<p>The <acronym>ASDF</acronym> file defines the system and its "
"dependencies.\n"
"Notice the use of <code>eval-when</code> to ensure <acronym>CFFI</acronym>-"
"Grovel is present\n"
"and the use of <code>(cffi-grovel:grovel-file name &amp;key cc-flags)</"
"code>\n"
"instead of <code>(:file name)</code>.\n"
"</p>\n"
"<p>The <samp>example-software.asd</samp> file would look like that:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; CFFI-Grovel is needed for "
"processing grovel-file components\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defsystem</span></i> <span class=\"string\">\"example-software\"</"
"span>\n"
"    <span class=\"keyword\">:defsystem-depends-on</span> <span class="
"\"paren2\">(<span class=\"lisp-bg\"><span class=\"string\">\"cffi-grovel\"</"
"span></span>)</span>\n"
"    <span class=\"keyword\">:depends-on</span> <span class=\"paren2\">(<span "
"class=\"lisp-bg\"><span class=\"string\">\"cffi\"</span></span>)</span>\n"
"    <span class=\"keyword\">:serial</span> t\n"
"    <span class=\"keyword\">:components</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:file</span> "
"<span class=\"string\">\"package\"</span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:cffi-grovel-file</span> <span class=\"string\">\"example-grovelling\"</"
"span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:cffi-wrapper-file</span> <span class=\"string\">\"example-wrappers\"</"
"span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:file</span> <span class=\"string\">\"example\"</span></span>)</span></"
"span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Пример программного проекта может содержать четыре файла; файл\n"
"<acronym>ASDF</acronym>, файл определения пакета, файл реализации, \n"
"и файл спецификации <acronym>CFFI</acronym>-Grovel.\n"
"</p>\n"
"<p>Файл <acronym>ASDF</acronym> определяет систему и ее зависимости.\n"
"Обратите внимание на использование <code>eval-when</code> чтобы убедиться\n"
"в наличии <acronym>CFFI</acronym>-Grovel и использования <code>(cffi-grovel:"
"grovel-file name &amp;key cc-flags)</code>\n"
"вместо <code>(:file name)</code>.\n"
"</p>\n"
"<p>Файл <samp>example-software.asd</samp> будет выглядеть так:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"comment\">;;; CFFI-Grovel is needed for "
"processing grovel-file components\n"
"  </span><span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class="
"\"symbol\">defsystem</span></i> <span class=\"string\">\"example-software\"</"
"span>\n"
"    <span class=\"keyword\">:defsystem-depends-on</span> <span class="
"\"paren2\">(<span class=\"lisp-bg\"><span class=\"string\">\"cffi-grovel\"</"
"span></span>)</span>\n"
"    <span class=\"keyword\">:depends-on</span> <span class=\"paren2\">(<span "
"class=\"lisp-bg\"><span class=\"string\">\"cffi\"</span></span>)</span>\n"
"    <span class=\"keyword\">:serial</span> t\n"
"    <span class=\"keyword\">:components</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:file</span> "
"<span class=\"string\">\"package\"</span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:cffi-grovel-file</span> <span class=\"string\">\"example-grovelling\"</"
"span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:cffi-wrapper-file</span> <span class=\"string\">\"example-wrappers\"</"
"span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:file</span> <span class=\"string\">\"example\"</span></span>)</span></"
"span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:8230
msgid ""
"<p>The <samp>package.lisp</samp> file would contain one or several\n"
"<code>defpackage</code> forms, to remove circular dependencies and make\n"
"building the project easier.  Note that you may or may not want to\n"
"<code>:use</code> your internal package.\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Implementorâs note:</strong> <em>Note that itâs a not a good idea "
"to <code>:use</code> when names may\n"
"clash with, say, CL symbols.\n"
"Or you could use <code>uiop:define-package</code> and its <code>:mix</code> "
"option.</em>\n"
"</p></blockquote>"
msgstr ""
"<p>Файл <samp>package.lisp</samp> будет содержать одну или несколько форм\n"
"<code>defpackage</code>, чтобы удалить циклические зависимости и упростить\n"
"сборку прокета.  Обратите внимание, что вы можете использовать или не "
"использовать\n"
"<code>:use</code> свой внутренний пакет.\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Примечание разработчкика:</strong> <em>обратите внимание, что не "
"очень хорошая\n"
"идея использовать <code>:use</code> когда имена могут конфликтовать, скажем "
"с символами CL.\n"
"Или вы можете использовать <code>uiop:define-package</code> и его опцию "
"<code>:mix</code>.</em>\n"
"</p></blockquote>"

#: in/CFFI_User_Manual.htm:8235
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defpackage</span></i> <span class=\"keyword\">#:"
"example-internal</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"use</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"nicknames</span> <span class=\"keyword\">#:exampleint</span></span>)</span></"
"span>)</span>"
msgstr ""

#: in/CFFI_User_Manual.htm:8240
msgid ""
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defpackage</span></i> <span class=\"keyword\">#:example-software</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"export</span> ...</span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class=\"keyword\">:"
"use</span> <span class=\"keyword\">#:cl</span> <span class=\"keyword\">#:"
"cffi</span> <span class=\"keyword\">#:exampleint</span></span>)</span></"
"span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:8255
msgid ""
"<p>The internal package is created by Lisp code output from the C program\n"
"written by <acronym>CFFI</acronym>-Grovel; if your specification file is\n"
"<samp>exampleint.lisp</samp>, the <samp>exampleint.cffi.lisp</samp> file "
"will contain the\n"
"<acronym>CFFI</acronym> definitions needed by the rest of your project.\n"
"See <a href=\"#Groveller-Syntax\">Groveller Syntax</a>.\n"
"</p>\n"
"<hr>\n"
"<a name=\"Groveller-Implementation-Notes\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Wrapper-for-Inline_002fStatic-Functions-and-Macros\" "
"accesskey=\"n\" rel=\"next\">Wrapper for Inline/Static Functions and Macros</"
"a>, Previous: <a href=\"#Groveller-ASDF-Integration\" accesskey=\"p\" rel="
"\"prev\">Groveller ASDF Integration</a>, Up: <a href=\"#The-Groveller\" "
"accesskey=\"u\" rel=\"up\">The Groveller</a> &nbsp; [<a href=\"#SEC_Contents"
"\" title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Implementation-Notes\"></a>\n"
"<h3 class=\"section\">13.4 Implementation Notes</h3>"
msgstr ""
"<p>Внутренний пакет создается выводом кода Lisp из программы Си, "
"написанной \n"
"<acronym>CFFI</acronym>-Grovel; если ваш файл спецификации -\n"
"<samp>exampleint.lisp</samp>, файл <samp>exampleint.cffi.lisp</samp> будет "
"содержать\n"
"определения <acronym>CFFI</acronym> необходимые для остальной части вашего "
"проекта.\n"
"См. <a href=\"#Groveller-Syntax\">Синтаксис Groveller</a>.\n"
"</p>\n"
"<hr>\n"
"<a name=\"Groveller-Implementation-Notes\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Wrapper-for-Inline_002fStatic-Functions-and-Macros\" "
"accesskey=\"n\" rel=\"next\">Wrapper for Inline/Static Functions and Macros</"
"a>, Previous: <a href=\"#Groveller-ASDF-Integration\" accesskey=\"p\" rel="
"\"prev\">Groveller ASDF Integration</a>, Up: <a href=\"#The-Groveller\" "
"accesskey=\"u\" rel=\"up\">The Groveller</a> &nbsp; [<a href=\"#SEC_Contents"
"\" title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Implementation-Notes\"></a>\n"
"<h3 class=\"section\">13.4 Заметки для реализации</h3>"

#: in/CFFI_User_Manual.htm:8280
msgid ""
"<p><acronym>CFFI</acronym>-Grovel will generate many files that not only "
"architecture-specific,\n"
"but also implementation-specific, and should not be distributed.\n"
"ASDF will generate these files in its output cache;\n"
"if you build with multiple architectures (e.g. with NFS/AFS home\n"
"directories) or implementations, it is critical for avoiding clashes\n"
"to keep this cache in an implementation-dependent directory (as is the\n"
"default).\n"
"</p>\n"
"<p>For <code>foo-internal.lisp</code>, the resulting <code>foo-internal.c</"
"code>,\n"
"<code>foo-internal</code>, and <code>foo-internal.cffi.lisp</code> are all\n"
"platform-specific, either because of possible reader-macros in\n"
"foo-internal.lisp, or because of varying C environments on the host\n"
"system.  For this reason, it is not helpful to distribute any of those\n"
"files; end users building <acronym>CFFI</acronym>-Grovel based software will "
"need\n"
"<code>cffi</code>-Grovel anyway.\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Implementorâs note:</strong> <em>For now, after some "
"experimentation with <small>CLISP</small> having no\n"
"long-long, it seems appropriate to assert that the generated <code>.c</"
"code>\n"
"files are architecture and operating-system dependent, but\n"
"lisp-implementation independent.  This way the same <code>.c</code> file\n"
"(and so the same <code>.grovel-tmp.lisp</code> file) will be shareable\n"
"between the implementations running on a given system.</em>\n"
"</p></blockquote>"
msgstr ""
"<p><acronym>CFFI</acronym>-Grovel генерирует множество файлов, которые \n"
"не только зависят от архитектуры, но также зависят от реализации и \n"
"не должны распространятся.\n"
"ASDF сгенерирует эти файлы в своем выходном кеше;\n"
"если вы создаете множество архитектур (например с домашними каталогами NFS/"
"AFS) \n"
"или реализаций, крайне важно избегать колизий, чтобы сохранить это кеш в "
"каталоге,\n"
"зависящем от реализации (как это и есть по умолчанию).\n"
"</p>\n"
"<p>Для <code>foo-internal.lisp</code>, все полученные <code>foo-internal.c</"
"code>,\n"
"<code>foo-internal</code>, и <code>foo-internal.cffi.lisp</code> зависят от\n"
"платформы, либо из-за возможных макросов чтения в foo-internal.lisp, либо из "
"за\n"
"различных окружений Си в хост-системе.  По этой причине, бесполезно "
"распространять\n"
"каки-либо из этих файлов; конечным пользователям, создающим программное "
"обесечение\n"
"на основе <acronym>CFFI</acronym>-Grovel, в любом случае потребуется\n"
"<code>cffi</code>-Grovel.\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Примечание разработчика:</strong> <em>на данный момент, после "
"нескольких экспериментов\n"
"с <small>CLISP</small> не имеющем long-long, кажется уместно утверждать, что "
"сгенерированные файлы\n"
"<code>.c</code> зависят от архитектуры и операционной системы, но не зависят "
"от реализаций lisp.\n"
"Таким образом, один и тотже файл <code>.c</code>  (и тот же файл <code>."
"grovel-tmp.lisp</code>) \n"
"будет доступен для всех реализаций, работающих в данной системе.</em>\n"
"</p></blockquote>"

#: in/CFFI_User_Manual.htm:8290
msgid ""
"<hr>\n"
"<a name=\"Wrapper-for-Inline_002fStatic-Functions-and-Macros\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#Groveller-Implementation-Notes\" accesskey=\"p\" rel="
"\"prev\">Groveller Implementation Notes</a>, Up: <a href=\"#The-Groveller\" "
"accesskey=\"u\" rel=\"up\">The Groveller</a> &nbsp; [<a href=\"#SEC_Contents"
"\" title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Wrapper-for-Inline_002fStatic-Functions-and-Macros-1\"></a>\n"
"<h3 class=\"section\">13.5 Wrapper for Inline/Static Functions and Macros</"
"h3>"
msgstr ""
"<hr>\n"
"<a name=\"Wrapper-for-Inline_002fStatic-Functions-and-Macros\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#Groveller-Implementation-Notes\" accesskey=\"p\" rel="
"\"prev\">Groveller Implementation Notes</a>, Up: <a href=\"#The-Groveller\" "
"accesskey=\"u\" rel=\"up\">The Groveller</a> &nbsp; [<a href=\"#SEC_Contents"
"\" title=\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Wrapper-for-Inline_002fStatic-Functions-and-Macros-1\"></a>\n"
"<h3 class=\"section\">13.5 Wrapper(Обертка) для встраиваемых/"
"статических(Inline/Static) функций и макросов</h3>"

#: in/CFFI_User_Manual.htm:8314
msgid ""
"<p>In a shared library, information in static/inlined functions and\n"
"macros are already removed during the compilation.  Wrapper file\n"
"enables to write an uninlined function wrapping the call to them.\n"
"</p>\n"
"<p>A wrapper file compilation/loading proceeds as follows: \n"
"Unlike groveller which generates C code that emits lisp files\n"
"containing cffi definitions, it generates C code, compiles it as a\n"
"shared library, loads the library, generate the cffi definitions (as\n"
"lisp code) and then loads the lisp code.\n"
"</p>\n"
"<p>It has asdf integration similar to groveller. \n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defsystem</span></i> <span class=\"string\">"
"\"example-software\"</span>\n"
"    <span class=\"keyword\">:defsystem-depends-on</span> <span class="
"\"paren2\">(<span class=\"lisp-bg\"><span class=\"string\">\"cffi-grovel\"</"
"span></span>)</span>\n"
"    <span class=\"keyword\">:depends-on</span> <span class=\"paren2\">(<span "
"class=\"lisp-bg\"><span class=\"string\">\"cffi\"</span></span>)</span>\n"
"    <span class=\"keyword\">:serial</span> t\n"
"    <span class=\"keyword\">:components</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:file</span> "
"<span class=\"string\">\"package\"</span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:cffi-grovel-file</span> <span class=\"string\">\"example-grovelling\"</"
"span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:cffi-wrapper-file</span> <span class=\"string\">\"example-wrappers\"</"
"span></span>)</span>  <span class=\"comment\">;; &lt;&lt;--- this part\n"
"  </span>   <span class=\"paren3\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:file</span> <span class=\"string\">\"example\"</span></span>)</"
"span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>В разделяемой библиотеке, информация о статических и разделяемых "
"функциях\n"
"и макросах уже удалена во время компиляции.  Файл Wrapper(обертка)\n"
"позволяет написать невстроенную(uninlined) функцию, обертывающую\n"
"вызов к ним.\n"
"</p>\n"
"<p>Компиляция/загрузка файла оберток(wrapper)  происходит следующим "
"образом: \n"
"в отличиии от groveller, который генерирует Си код и файлы lisp содержащие\n"
"определения cffi, он генерирует Си код, компилирует его как разделяемую "
"библиотеку,\n"
"загружает библиотеку, генерирует определения cffi (как лисп код) и затем\n"
"загружает код lisp.\n"
"</p>\n"
"<p>Он имеет интеграцию asdf похожую на groveller. \n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg"
"\"><i><span class=\"symbol\">defsystem</span></i> <span class=\"string\">"
"\"example-software\"</span>\n"
"    <span class=\"keyword\">:defsystem-depends-on</span> <span class="
"\"paren2\">(<span class=\"lisp-bg\"><span class=\"string\">\"cffi-grovel\"</"
"span></span>)</span>\n"
"    <span class=\"keyword\">:depends-on</span> <span class=\"paren2\">(<span "
"class=\"lisp-bg\"><span class=\"string\">\"cffi\"</span></span>)</span>\n"
"    <span class=\"keyword\">:serial</span> t\n"
"    <span class=\"keyword\">:components</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\"><span class="
"\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword\">:file</span> "
"<span class=\"string\">\"package\"</span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:cffi-grovel-file</span> <span class=\"string\">\"example-grovelling\"</"
"span></span>)</span>\n"
"     <span class=\"paren3\">(<span class=\"lisp-bg\"><span class=\"keyword"
"\">:cffi-wrapper-file</span> <span class=\"string\">\"example-wrappers\"</"
"span></span>)</span>  <span class=\"comment\">;; &lt;&lt;--- this part\n"
"  </span>   <span class=\"paren3\">(<span class=\"lisp-bg\"><span class="
"\"keyword\">:file</span> <span class=\"string\">\"example\"</span></span>)</"
"span></span>)</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:8318
msgid ""
"<dl>\n"
"<dt><a name=\"index-defwrapper\"></a>Wrapper Form: <strong>defwrapper</"
"strong> <em>name-and-options return-type &amp;rest args</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:8325
msgid ""
"<div class=\"example\">\n"
"<pre class=\"example\">static inline int foo(int i) {\n"
"  return 1+i;\n"
"};\n"
"#define bar(i) (1+(i))\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:8333
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">in-"
"package <span class=\"keyword\">:mypackage</span></span>)</span>\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defwrapper</span></i> <span class=\"paren2\">(<span class=\"lisp-bg"
"\"><span class=\"string\">\"foo\"</span> foo</span>)</span> <span class="
"\"keyword\">:int</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">i <span class=\"keyword"
"\">:int</span></span>)</span></span>)</span>\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">defwrapper</span></i> <span class=\"paren2\">(<span class=\"lisp-bg"
"\"><span class=\"string\">\"bar\"</span> bar</span>)</span> <span class="
"\"keyword\">:int</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">i <span class=\"keyword"
"\">:int</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:8342
msgid ""
"<p>Other forms are similar to grovel files.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-progn-1\"></a>Wrapper Form: <strong>progn</strong> "
"<em>&amp;rest forms</em></dt>\n"
"<dd>\n"
"<p>Processes a list of forms. Useful for conditionalizing several\n"
"forms. For example:\n"
"</p></dd></dl>"
msgstr ""
"<p>Другие файлы похожи на файлы grovel.\n"
"</p>\n"
"<dl>\n"
"<dt><a name=\"index-progn-1\"></a>Wrapper Form: <strong>progn</strong> "
"<em>&amp;rest forms</em></dt>\n"
"<dd>\n"
"<p>Обрабатывает список форм. Полезно для объединения нескольких форм.\n"
"Например:\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8349
msgctxt "in/CFFI_User_Manual.htm:8349"
msgid ""
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  #+freebsd\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\"><i><span class=\"symbol"
"\">progn</span></i>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">constant <span class="
"\"paren3\">(<span class=\"lisp-bg\">ev-enable <span class=\"string\">"
"\"EV_ENABLE\"</span></span>)</span></span>)</span>\n"
"    <span class=\"paren2\">(<span class=\"lisp-bg\">constant <span class="
"\"paren3\">(<span class=\"lisp-bg\">ev-disable <span class=\"string\">"
"\"EV_DISABLE\"</span></span>)</span></span>)</span></span>)</span>\n"
"</pre></div>"
msgstr ""

#: in/CFFI_User_Manual.htm:8356
msgid ""
"<dl>\n"
"<dt><a name=\"index-include-1\"></a>Wrapper Form: <strong>include</strong> "
"<em>&amp;rest files</em></dt>\n"
"<dd>\n"
"<p>Include the specified files (specified as strings) in the generated C\n"
"source code.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-include-1\"></a>Wrapper Form: <strong>include</strong> "
"<em>&amp;rest files</em></dt>\n"
"<dd>\n"
"<p>Включает указанные файлы (указанные как строки) в генерируемый Си код.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8362
msgid ""
"<dl>\n"
"<dt><a name=\"index-in_002dpackage-1\"></a>Wrapper Form: <strong>in-package</"
"strong> <em>symbol</em></dt>\n"
"<dd>\n"
"<p>Set the package to be used for the final Lisp output.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-in_002dpackage-1\"></a>Wrapper Form: <strong>in-package</"
"strong> <em>symbol</em></dt>\n"
"<dd>\n"
"<p>Устанавливает пакет, который будет использоваться для окончательного "
"вывода Лисп.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8369
msgid ""
"<dl>\n"
"<dt><a name=\"index-flags\"></a>Wrapper Form: <strong>flags</strong> "
"<em>&amp;rest flags</em></dt>\n"
"<dd>\n"
"<p>Adds <var>cc-flags</var> to the command line arguments used for the C "
"compiler\n"
"invocation.\n"
"</p></dd></dl>"
msgstr ""
"<dl>\n"
"<dt><a name=\"index-flags\"></a>Wrapper Form: <strong>flags</strong> "
"<em>&amp;rest flags</em></dt>\n"
"<dd>\n"
"<p>Добавляет <var>cc-flags</var> к аргументам командной строки, используемым "
"для вызова компилятора Си.\n"
"</p></dd></dl>"

#: in/CFFI_User_Manual.htm:8376
msgid ""
"<dl>\n"
"<dt><a name=\"index-proclaim\"></a>Wrapper Form: <strong>proclaim</strong> "
"<em>&amp;rest proclaimations</em></dt>\n"
"</dl>\n"
"<dl>\n"
"<dt><a name=\"index-declaim\"></a>Wrapper Form: <strong>declaim</strong> "
"<em>&amp;rest declaimations</em></dt>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:8388
msgid ""
"<hr>\n"
"<a name=\"Static-Linking\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Limitations\" accesskey=\"n\" rel=\"next\">Limitations</a>, "
"Previous: <a href=\"#The-Groveller\" accesskey=\"p\" rel=\"prev\">The "
"Groveller</a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> "
"&nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Static-Linking-1\"></a>\n"
"<h2 class=\"chapter\">14 Static Linking</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Static-Linking\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Limitations\" accesskey=\"n\" rel=\"next\">Limitations</a>, "
"Previous: <a href=\"#The-Groveller\" accesskey=\"p\" rel=\"prev\">The "
"Groveller</a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> "
"&nbsp; [<a href=\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents"
"\">Contents</a>][<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index"
"\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Static-Linking-1\"></a>\n"
"<h2 class=\"chapter\">14 Статическое связывание</h2>"

#: in/CFFI_User_Manual.htm:8403
msgid ""
"<p>On recent enough versions of supported implementations (currently,\n"
"GNU CLISP 2.49, CMUCL 2015-11, and SBCL 1.2.17), and with a recent\n"
"enough ASDF (3.1.2 or later), you can create a statically linked\n"
"Lisp executable image that includes all the C extensions\n"
"(wrappers and any other objects output by <code>compile-op</code>)\n"
"as well as your Lisp code â or a standalone application executable.\n"
"This makes it easier to deliver your code as a single file.\n"
"</p>\n"
"<p>To dump a statically linked executable image, use:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">asdf:"
"load-system <span class=\"keyword\">:cffi-grovel</span></span>)</span>\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">asdf:operate <span class="
"\"keyword\">:static-image-op</span> <span class=\"keyword\">:example-"
"software</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>На достаточно свежих версиях поддерживаемых реализаций (в настоящее "
"время,\n"
"GNU CLISP 2.49, CMUCL 2015-11, и SBCL 1.2.17), и с достаточно недавним \n"
"ASDF (3.1.2 или выше), вы можете создавать статически связанные исполняемые\n"
"образ Lisp, который включает в себя все расширения Си\n"
"(обертки и любые другие объекты, выводимые <code>compile-op</code>),\n"
"а также ваш код Lisp или исполняемый файл отдельного приложения.\n"
"Это облегчает доставку вашего кода в виде одного файла.\n"
"</p>\n"
"<p>Чтобы выгрузить статически связанный исполняемый образ, используйте:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">asdf:"
"load-system <span class=\"keyword\">:cffi-grovel</span></span>)</span>\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">asdf:operate <span class="
"\"keyword\">:static-image-op</span> <span class=\"keyword\">:example-"
"software</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:8410
msgid ""
"<p>To dump a statically linked executable standalone application, use:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">asdf:"
"load-system <span class=\"keyword\">:cffi-grovel</span></span>)</span>\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">asdf:operate <span class="
"\"keyword\">:static-program-op</span> <span class=\"keyword\">:example-"
"software</span></span>)</span>\n"
"</pre></div>"
msgstr ""
"<p>Чтобы выгрузить статически связанное исполняемое автономное приложение, "
"используйте:\n"
"</p>\n"
"<div class=\"lisp\">\n"
"<pre class=\"lisp\">  <span class=\"paren1\">(<span class=\"lisp-bg\">asdf:"
"load-system <span class=\"keyword\">:cffi-grovel</span></span>)</span>\n"
"  <span class=\"paren1\">(<span class=\"lisp-bg\">asdf:operate <span class="
"\"keyword\">:static-program-op</span> <span class=\"keyword\">:example-"
"software</span></span>)</span>\n"
"</pre></div>"

#: in/CFFI_User_Manual.htm:8422
msgid ""
"<p>See <a href=\"https://common-lisp.net/project/asdf/\">the ASDF\n"
"manual</a> for documentation about <code>image-op</code> and <code>program-"
"op</code>\n"
"which are the parent operation classes that behave similarly except\n"
"they donât statically link C code.\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Implementorâs note:</strong> <em>There is also an operation "
"<code>:static-runtime-op</code> to create the\n"
"statically linked runtime alone, but itâs admittedly not very useful\n"
"except as an intermediate step dependency towards building\n"
"<code>:static-image-op</code> or <code>:static-program-op</code>.</em>\n"
"</p></blockquote>"
msgstr ""
"<p>См. <a href=\"https://common-lisp.net/project/asdf/\"> руководство по "
"ASDF</a> для \n"
"ознакомления с документацией о <code>image-op</code> и <code>program-op</"
"code>,\n"
"которые являются родительскими классами операций, которые ведут себя "
"аналогично, за\n"
"исключением того, что они не связывают статический код Си.\n"
"</p>\n"
"<blockquote>\n"
"<p><strong>Примечание разработчика:</strong> <em>Существует также операция "
"<code>:static-runtime-op</code> для\n"
"создания  только статически связанной среды выполнения, но по общему "
"признанию она не очень \n"
"полезна, за исплючением промежуточного шага в направлении создания\n"
"<code>:static-image-op</code> или <code>:static-program-op</code>.</em>\n"
"</p></blockquote>"

#: in/CFFI_User_Manual.htm:8434
msgid ""
"<hr>\n"
"<a name=\"Limitations\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Platform_002dspecific-features\" accesskey=\"n\" rel=\"next"
"\">Platform-specific features</a>, Previous: <a href=\"#The-Groveller\" "
"accesskey=\"p\" rel=\"prev\">The Groveller</a>, Up: <a href=\"#Top\" "
"accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href=\"#SEC_Contents\" title="
"\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Limitations-2\"></a>\n"
"<h2 class=\"chapter\">15 Limitations</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Limitations\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Platform_002dspecific-features\" accesskey=\"n\" rel=\"next"
"\">Platform-specific features</a>, Previous: <a href=\"#The-Groveller\" "
"accesskey=\"p\" rel=\"prev\">The Groveller</a>, Up: <a href=\"#Top\" "
"accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href=\"#SEC_Contents\" title="
"\"Table of contents\" rel=\"contents\">Contents</a>][<a href="
"\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</p>\n"
"</div>\n"
"<a name=\"Limitations-2\"></a>\n"
"<h2 class=\"chapter\">15 Ограничения</h2>"

#: in/CFFI_User_Manual.htm:8445
msgid ""
"<p>These are <acronym>CFFI</acronym>âs limitations across all platforms; for "
"information\n"
"on the warts on particular Lisp implementations, see\n"
"<a href=\"#Implementation-Support\">Implementation Support</a>.\n"
"</p>\n"
"<ul>\n"
"<li> The tutorial includes a treatment of the primary, intractable\n"
"limitation of <acronym>CFFI</acronym>, or any <acronym>FFI</acronym>: that "
"the abstractions\n"
"commonly used by C are insufficiently expressive.\n"
"See <a href=\"#Tutorial_002dAbstraction\">Breaking the abstraction</a>, for "
"more\n"
"details."
msgstr ""
"<p>Это ограничение <acronym>CFFI</acronym>â для всех платформ; \n"
"для получения информации о неисправностях на конкретных реализациях\n"
"см.<a href=\"#Implementation-Support\">Поддерживаемые реализации</a>.\n"
"</p>\n"
"<ul>\n"
"<li> Учебное пособие включает в себя трактовку основного, непреодолимого\n"
"ограничения <acronym>CFFI</acronym>, или любого другого <acronym>FFI</"
"acronym>: \n"
"абстракции, обычно используемые Си, недостаточно выразительны.\n"
"См. <a href=\"#Tutorial_002dAbstraction\">Нарушение абстракции</a>, для "
"более\n"
"подробной информации."

#: in/CFFI_User_Manual.htm:8447
msgctxt "in/CFFI_User_Manual.htm:8447"
msgid "</li></ul>"
msgstr ""

#: in/CFFI_User_Manual.htm:8457
msgid ""
"<hr>\n"
"<a name=\"Platform_002dspecific-features\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Glossary\" accesskey=\"n\" rel=\"next\">Glossary</a>, "
"Previous: <a href=\"#Limitations\" accesskey=\"p\" rel=\"prev\">Limitations</"
"a>, Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Platform_002dspecific-features-1\"></a>\n"
"<h2 class=\"appendix\">Appendix A Platform-specific features</h2>"
msgstr ""

#: in/CFFI_User_Manual.htm:8499
msgid ""
"<p>Whenever a backend doesnât support one of <acronym>CFFI</acronym>âs "
"features, a\n"
"specific symbol is pushed onto <code>common-lisp:*features*</code>.  The\n"
"meanings of these symbols follow.\n"
"</p>\n"
"<dl compact=\"compact\">\n"
"<dt><var>cffi-sys::flat-namespace</var></dt>\n"
"<dd><p>This Lisp has a flat namespace for foreign symbols meaning that you\n"
"wonât be able to load two different libraries with homograph functions\n"
"and successfully differentiate them through the <code>:library</code>\n"
"option to <code>defcfun</code>, <code>defcvar</code>, etcâ¦\n"
"</p>\n"
"</dd>\n"
"<dt><var>cffi-sys::no-foreign-funcall</var></dt>\n"
"<dd><p>The macro <code>foreign-funcall</code> is <strong>not</strong> "
"available.  On such\n"
"platforms, the only way to call a foreign function is through\n"
"<code>defcfun</code>.  See <a href=\"#foreign_002dfuncall\">foreign-funcall</"
"a>, and <a href=\"#defcfun\">defcfun</a>.\n"
"</p>\n"
"</dd>\n"
"<dt><var>cffi-sys::no-long-long</var></dt>\n"
"<dd><p>The C <code>long long</code> type is <strong>not</strong> available "
"as a foreign\n"
"type.\n"
"</p>\n"
"<p>However, on such platforms <acronym>CFFI</acronym> provides its own "
"implementation of\n"
"the <code>long long</code> type for all of operations in chapters\n"
"<a href=\"#Foreign-Types\">Foreign Types</a>, <a href=\"#Pointers"
"\">Pointers</a> and <a href=\"#Variables\">Variables</a>. The\n"
"functionality described in <a href=\"#Functions\">Functions</a> and <a href="
"\"#Callbacks\">Callbacks</a> will\n"
"not be available.\n"
"</p>\n"
"<p>32-bit Lispworks 5.0+ is an exception. In addition to the <acronym>CFFI</"
"acronym>\n"
"implementation described above, Lispworks itself implements the\n"
"<code>long long</code> type for <a href=\"#Functions\">Functions</a>. <a "
"href=\"#Callbacks\">Callbacks</a> are still\n"
"missing <code>long long</code> support, though.\n"
"</p>\n"
"</dd>\n"
"<dt><var>cffi-sys::no-stdcall</var></dt>\n"
"<dd><p>This Lisp doesnât support the <code>stdcall</code> calling "
"convention.  Note\n"
"that it only makes sense to support <code>stdcall</code> on (32-bit) x86\n"
"platforms.\n"
"</p>\n"
"</dd>\n"
"</dl>"
msgstr ""

#: in/CFFI_User_Manual.htm:8509
msgid ""
"<hr>\n"
"<a name=\"Glossary\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Comprehensive-Index\" accesskey=\"n\" rel=\"next"
"\">Comprehensive Index</a>, Previous: <a href=\"#Platform_002dspecific-"
"features\" accesskey=\"p\" rel=\"prev\">Platform-specific features</a>, Up: "
"<a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Glossary-1\"></a>\n"
"<h2 class=\"appendix\">Appendix B Glossary</h2>"
msgstr ""
"<hr>\n"
"<a name=\"Glossary\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Next: <a href=\"#Comprehensive-Index\" accesskey=\"n\" rel=\"next"
"\">Comprehensive Index</a>, Previous: <a href=\"#Platform_002dspecific-"
"features\" accesskey=\"p\" rel=\"prev\">Platform-specific features</a>, Up: "
"<a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Glossary-1\"></a>\n"
"<h2 class=\"appendix\">Appendix B Словарь</h2>"

#: in/CFFI_User_Manual.htm:8541
msgid ""
"<dl compact=\"compact\">\n"
"<dt><em>aggregate type</em></dt>\n"
"<dd><p>A <acronym>CFFI</acronym> type for C data defined as an organization "
"of data of simple\n"
"type; in structures and unions, which are themselves aggregate types,\n"
"they are represented by value.\n"
"</p>\n"
"</dd>\n"
"<dt><em>foreign value</em></dt>\n"
"<dd><p>This has two meanings; in any context, only one makes sense.\n"
"</p>\n"
"<p>When using type translators, the foreign value is the lower-level Lisp\n"
"value derived from the object passed to <code>translate-to-foreign</code>\n"
"(see <a href=\"#translate_002dto_002dforeign\">translate-to-foreign</a>).  "
"This value should be a Lisp number or\n"
"a pointer (satisfies <code>pointerp</code>), and it can be treated like any\n"
"general Lisp object; it only completes the transformation to a true\n"
"foreign value when passed through low-level code in the Lisp\n"
"implementation, such as the foreign function caller or indirect memory\n"
"addressing combined with a data move.\n"
"</p>\n"
"<p>In other contexts, this refers to a value accessible by C, but which\n"
"may only be accessed through <acronym>CFFI</acronym> functions.  The closest "
"you can\n"
"get to such a foreign value is through a pointer Lisp object, which\n"
"itself counts as a foreign value in only the previous sense.\n"
"</p>\n"
"</dd>\n"
"<dt><em>simple type</em></dt>\n"
"<dd><p>A <acronym>CFFI</acronym> type that is ultimately represented as a "
"builtin type;\n"
"<acronym>CFFI</acronym> only provides extra semantics for Lisp that are "
"invisible to C\n"
"code or data.\n"
"</p></dd>\n"
"</dl>"
msgstr ""
"<dl compact=\"compact\">\n"
"<dt><em>aggregate type</em></dt>\n"
"<dd><p>Тип <acronym>CFFI</acronym> для данных Си, пределенных как "
"организованные данные простых\n"
"типов; в структурах и объединениях, котоыре сами являются агрегатными "
"типами, они пердставляют\n"
"занчения.\n"
"</p>\n"
"</dd>\n"
"<dt><em>foreign value</em></dt>\n"
"<dd><p>Имеет два значения; в произвольном контексте, только одно имеет "
"смысл.\n"
"</p>\n"
"<p>При использовании преобразователей, внешнее значение - это значение "
"низкого\n"
"уровня Lisp, полученное из объекта, переданного в <code>translate-to-"
"foreign</code>\n"
"(см. <a href=\"#translate_002dto_002dforeign\">translate-to-foreign</a>).  "
"Это значение\n"
"должно быть числом Lisp или указателем (удовлетворяющим <code>pointerp</"
"code>), и его\n"
"можно рассматривать как любой обычный объект Lisp; оно только завершает\n"
"преобразование в настоящее внешнее значение при передаче через "
"низкоуровневый код в\n"
"реализацию Lisp, такой как вызывающая сторона внешней функции или косвенная "
"адресация\n"
"памяти в сочетании с перемещанием данных.\n"
"</p>\n"
"<p>В других контекстах это относится к значению доступному для Си, но к "
"которому можно\n"
"получить доступ только через функции <acronym>CFFI</acronym>.  Самое "
"близкое, что вы\n"
"можете получить к такому внешнему значению, через объект указатель Lisp, "
"который сам\n"
"по себе считается внешним значением только в предыдущем смысле.\n"
"</p>\n"
"</dd>\n"
"<dt><em>simple type</em></dt>\n"
"<dd><p>Тип <acronym>CFFI</acronym>, который в конечном итоге представляется "
"как встроенный\n"
"тип; <acronym>CFFI</acronym> предоставляет только дополнительную семантику "
"для Lisp, которая\n"
"невидима для Си кода или данных.\n"
"</p></dd>\n"
"</dl>"

#: in/CFFI_User_Manual.htm:8840
msgid ""
"<hr>\n"
"<a name=\"Comprehensive-Index\"></a>\n"
"<div class=\"header\">\n"
"<p>\n"
"Previous: <a href=\"#Glossary\" accesskey=\"p\" rel=\"prev\">Glossary</a>, "
"Up: <a href=\"#Top\" accesskey=\"u\" rel=\"up\">Top</a> &nbsp; [<a href="
"\"#SEC_Contents\" title=\"Table of contents\" rel=\"contents\">Contents</a>]"
"[<a href=\"#Comprehensive-Index\" title=\"Index\" rel=\"index\">Index</a>]</"
"p>\n"
"</div>\n"
"<a name=\"Index\"></a>\n"
"<h2 class=\"unnumbered\">Index</h2>\n"
"<table><tbody><tr><th valign=\"top\">Jump to: &nbsp; </th><td><a class="
"\"summary-letter\" href=\"#Comprehensive-Index_cp_symbol-1\"><b>:</b></a>\n"
" &nbsp; \n"
"<br>\n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-A\"><b>A</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-B\"><b>B</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-C\"><b>C</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-D\"><b>D</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-E\"><b>E</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-F\"><b>F</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-G\"><b>G</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-I\"><b>I</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-L\"><b>L</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-M\"><b>M</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-N\"><b>N</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-P\"><b>P</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-R\"><b>R</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-S\"><b>S</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-T\"><b>T</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-U\"><b>U</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-V\"><b>V</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-W\"><b>W</"
"b></a>\n"
" &nbsp; \n"
"</td></tr></tbody></table>\n"
"<table class=\"index-cp\" border=\"0\">\n"
"<tbody><tr><td></td><th align=\"left\">Index Entry</th><td>&nbsp;</td><th "
"align=\"left\"> Section</th></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_symbol-1\">:</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003abool\"><code>:bool</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Other-Types"
"\">Other Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aboolean\"><code>:"
"boolean</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Other-"
"Types\">Other Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003achar\"><code>:char</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003adouble\"><code>:"
"double</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003afloat\"><code>:float</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aint\"><code>:int</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aint16\"><code>:int16</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aint32\"><code>:int32</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aint64\"><code>:int64</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aint8\"><code>:int8</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003allong\"><code>:llong</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003along\"><code>:long</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003along_002ddouble"
"\"><code>:long-double</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003along_002dlong\"><code>:"
"long-long</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003apointer\"><code>:"
"pointer</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003ashort\"><code>:short</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003astring\"><code>:"
"string</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Other-"
"Types\">Other Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003astring_002bptr"
"\"><code>:string+ptr</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#Other-Types\">Other Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003auchar\"><code>:uchar</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003auint\"><code>:uint</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003auint16\"><code>:"
"uint16</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003auint32\"><code>:"
"uint32</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003auint64\"><code>:"
"uint64</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003auint8\"><code>:uint8</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aullong\"><code>:"
"ullong</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aulong\"><code>:ulong</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aunsigned_002dchar"
"\"><code>:unsigned-char</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aunsigned_002dint"
"\"><code>:unsigned-int</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aunsigned_002dlong"
"\"><code>:unsigned-long</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"_003aunsigned_002dlong_002dlong\"><code>:unsigned-long-long</code></a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-Types\">Built-"
"In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aunsigned_002dshort"
"\"><code>:unsigned-short</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003aushort\"><code>:"
"ushort</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Built_002dIn-Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003avoid\"><code>:void</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Built_002dIn-"
"Types\">Built-In Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-_003awrapper\"><code>:"
"wrapper</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Other-"
"Types\">Other Types</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-A\">A</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-abstraction-breaking"
"\">abstraction breaking</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dAbstraction\">Tutorial-Abstraction</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-abstractions-in-C"
"\">abstractions in C</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dComparison\">Tutorial-Comparison</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-advantages-of-FFI"
"\">advantages of <acronym>FFI</acronym></a>:</td><td>&nbsp;</td><td valign="
"\"top\"><a href=\"#Tutorial_002dComparison\">Tutorial-Comparison</a></td></"
"tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-B\">B</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-benefits-of-FFI\">benefits "
"of <acronym>FFI</acronym></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dComparison\">Tutorial-Comparison</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-bitfield\"><code>bitfield</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-Syntax"
"\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-breaking-the-abstraction"
"\">breaking the abstraction</a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#Tutorial_002dAbstraction\">Tutorial-Abstraction</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-C\">C</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-C-abstractions\">C "
"abstractions</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dComparison\">Tutorial-Comparison</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-callback\"><code>callback</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#callback"
"\">callback</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-callback-definition"
"\">callback definition</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dCallbacks\">Tutorial-Callbacks</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-calling-foreign-functions"
"\">calling foreign functions</a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#Tutorial_002dInitializing\">Tutorial-Initializing</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-cc_002dflags\"><code>cc-"
"flags</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-"
"Syntax\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-cenum\"><code>cenum</code></"
"a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-Syntax"
"\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"close_002dforeign_002dlibrary\"><code>close-foreign-library</code></a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href=\"#close_002dforeign_002dlibrary"
"\">close-foreign-library</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-compiler-macros-for-type-"
"translation\">compiler macros for type translation</a>:</td><td>&nbsp;</"
"td><td valign=\"top\"><a href=\"#Optimizing-Type-Translators\">Optimizing "
"Type Translators</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-constant\"><code>constant</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-Syntax"
"\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-constantenum"
"\"><code>constantenum</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#Groveller-Syntax\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-convert_002dfrom_002dforeign"
"\"><code>convert-from-foreign</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#convert_002dfrom_002dforeign\">convert-from-foreign</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-convert_002dto_002dforeign"
"\"><code>convert-to-foreign</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#convert_002dto_002dforeign\">convert-to-foreign</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-cstruct\"><code>cstruct</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-Syntax"
"\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-cstruct_002dand_002dclass"
"\"><code>cstruct-and-class</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#Groveller-Syntax\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-ctype\"><code>ctype</code></"
"a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-Syntax"
"\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-cunion\"><code>cunion</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-Syntax"
"\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-cURL\">c<acronym>URL</"
"acronym></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dGetting-a-URL\">Tutorial-Getting a URL</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-cvar\"><code>cvar</code></"
"a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-Syntax"
"\">Groveller Syntax</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-D\">D</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-data-in-Lisp-and-C\">data "
"in Lisp and C</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dTypes\">Tutorial-Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-declaim\"><code>declaim</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Wrapper-for-"
"Inline_002fStatic-Functions-and-Macros\">Wrapper for Inline/Static Functions "
"and Macros</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-defbitfield"
"\"><code>defbitfield</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#defbitfield\">defbitfield</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-defcallback"
"\"><code>defcallback</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#defcallback\">defcallback</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-defcenum\"><code>defcenum</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#defcenum"
"\">defcenum</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-defcfun\"><code>defcfun</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#defcfun"
"\">defcfun</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-defcstruct"
"\"><code>defcstruct</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#defcstruct\">defcstruct</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-defctype\"><code>defctype</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#defctype"
"\">defctype</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-defcunion"
"\"><code>defcunion</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#defcunion\">defcunion</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-defcvar\"><code>defcvar</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#defcvar"
"\">defcvar</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-define\"><code>define</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-Syntax"
"\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"define_002dforeign_002dlibrary\"><code>define-foreign-library</code></a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#define_002dforeign_002dlibrary\">define-foreign-library</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-define_002dforeign_002dtype"
"\"><code>define-foreign-type</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#define_002dforeign_002dtype\">define-foreign-type</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-define_002dparse_002dmethod"
"\"><code>define-parse-method</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#define_002dparse_002dmethod\">define-parse-method</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-defining-callbacks"
"\">defining callbacks</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dCallbacks\">Tutorial-Callbacks</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-defining-"
"type_002dtranslation-compiler-macros\">defining type-translation compiler "
"macros</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Optimizing-Type-"
"Translators\">Optimizing Type Translators</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-defwrapper"
"\"><code>defwrapper</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#Wrapper-for-Inline_002fStatic-Functions-and-Macros\">Wrapper for "
"Inline/Static Functions and Macros</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-dynamic-extent\">dynamic "
"extent</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dMemory\">Tutorial-Memory</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-E\">E</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-enumeration_002c-C"
"\">enumeration, C</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002deasy_005fsetopt\">Tutorial-easy_setopt</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-F\">F</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-feature\"><code>feature</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-Syntax"
"\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-FILE_002a-and-streams"
"\"><small>FILE</small>* and streams</a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#Tutorial_002dAbstraction\">Tutorial-Abstraction</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-flags\"><code>flags</code></"
"a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Wrapper-for-"
"Inline_002fStatic-Functions-and-Macros\">Wrapper for Inline/Static Functions "
"and Macros</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign-arguments\">foreign "
"arguments</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002deasy_005fsetopt\">Tutorial-easy_setopt</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign-functions-and-data"
"\">foreign functions and data</a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#Tutorial\">Tutorial</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign-library-load"
"\">foreign library load</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dLoading\">Tutorial-Loading</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign-values-with-dynamic-"
"extent\">foreign values with dynamic extent</a>:</td><td>&nbsp;</td><td "
"valign=\"top\"><a href=\"#Tutorial_002dMemory\">Tutorial-Memory</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002dalloc"
"\"><code>foreign-alloc</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#foreign_002dalloc\">foreign-alloc</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"foreign_002dbitfield_002dsymbols\"><code>foreign-bitfield-symbols</code></a>:"
"</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#foreign_002dbitfield_002dsymbols\">foreign-bitfield-symbols</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"foreign_002dbitfield_002dvalue\"><code>foreign-bitfield-value</code></a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#foreign_002dbitfield_002dvalue\">foreign-bitfield-value</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002denum_002dkeyword"
"\"><code>foreign-enum-keyword</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#foreign_002denum_002dkeyword\">foreign-enum-keyword</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002denum_002dvalue"
"\"><code>foreign-enum-value</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#foreign_002denum_002dvalue\">foreign-enum-value</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002dfree"
"\"><code>foreign-free</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#foreign_002dfree\">foreign-free</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002dfuncall"
"\"><code>foreign-funcall</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#foreign_002dfuncall\">foreign-funcall</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"foreign_002dfuncall_002dpointer\"><code>foreign-funcall-pointer</code></a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#foreign_002dfuncall_002dpointer\">foreign-funcall-pointer</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"foreign_002dfuncall_002dpointer_002dvarargs\"><code>foreign-funcall-pointer-"
"varargs</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#foreign_002dfuncall_002dpointer_002dvarargs\">foreign-funcall-pointer-"
"varargs</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"foreign_002dfuncall_002dvarargs\"><code>foreign-funcall-varargs</code></a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#foreign_002dfuncall_002dvarargs\">foreign-funcall-varargs</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002dpointer"
"\"><code>foreign-pointer</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#Basic-Pointer-Operations\">Basic Pointer Operations</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002dslot_002dnames"
"\"><code>foreign-slot-names</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#foreign_002dslot_002dnames\">foreign-slot-names</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002dslot_002doffset"
"\"><code>foreign-slot-offset</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#foreign_002dslot_002doffset\">foreign-slot-offset</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002dslot_002dpointer"
"\"><code>foreign-slot-pointer</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#foreign_002dslot_002dpointer\">foreign-slot-pointer</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002dslot_002dvalue"
"\"><code>foreign-slot-value</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#foreign_002dslot_002dvalue\">foreign-slot-value</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002dstring_002dalloc"
"\"><code>foreign-string-alloc</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#foreign_002dstring_002dalloc\">foreign-string-alloc</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002dstring_002dfree"
"\"><code>foreign-string-free</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#foreign_002dstring_002dfree\">foreign-string-free</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"foreign_002dstring_002dto_002dlisp\"><code>foreign-string-to-lisp</code></a>:"
"</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#foreign_002dstring_002dto_002dlisp\">foreign-string-to-lisp</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"foreign_002dsymbol_002dpointer\"><code>foreign-symbol-pointer</code></a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#foreign_002dsymbol_002dpointer\">foreign-symbol-pointer</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"foreign_002dtype_002dalignment\"><code>foreign-type-alignment</code></a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#foreign_002dtype_002dalignment\">foreign-type-alignment</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-foreign_002dtype_002dsize"
"\"><code>foreign-type-size</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#foreign_002dtype_002dsize\">foreign-type-size</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"free_002dconverted_002dobject\"><code>free-converted-object</code></a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href=\"#free_002dconverted_002dobject"
"\">free-converted-object</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"free_002dtranslated_002dobject\"><code>free-translated-object</code></a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#free_002dtranslated_002dobject\">free-translated-object</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-function-definition"
"\">function definition</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dInitializing\">Tutorial-Initializing</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-G\">G</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-get_002dcallback"
"\"><code>get-callback</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#get_002dcallback\">get-callback</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-get_002dvar_002dpointer"
"\"><code>get-var-pointer</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#get_002dvar_002dpointer\">get-var-pointer</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-I\">I</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-in_002dpackage\"><code>in-"
"package</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Groveller-Syntax\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-in_002dpackage-1\"><code>in-"
"package</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Wrapper-"
"for-Inline_002fStatic-Functions-and-Macros\">Wrapper for Inline/Static "
"Functions and Macros</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-inc_002dpointer\"><code>inc-"
"pointer</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#inc_002dpointer\">inc-pointer</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-incf_002dpointer"
"\"><code>incf-pointer</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#incf_002dpointer\">incf-pointer</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-include\"><code>include</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-Syntax"
"\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-include-1\"><code>include</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Wrapper-for-"
"Inline_002fStatic-Functions-and-Macros\">Wrapper for Inline/Static Functions "
"and Macros</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-L\">L</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-library_002c-foreign"
"\">library, foreign</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dLoading\">Tutorial-Loading</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-limitations-of-type-"
"translators\">limitations of type translators</a>:</td><td>&nbsp;</td><td "
"valign=\"top\"><a href=\"#Tutorial_002dTypes\">Tutorial-Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"lisp_002dstring_002dto_002dforeign\"><code>lisp-string-to-foreign</code></a>:"
"</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#lisp_002dstring_002dto_002dforeign\">lisp-string-to-foreign</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-Lispy-C-functions\">Lispy C "
"functions</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dLisp-easy_005fsetopt\">Tutorial-Lisp easy_setopt</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-load_002dforeign_002dlibrary"
"\"><code>load-foreign-library</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#load_002dforeign_002dlibrary\">load-foreign-library</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"load_002dforeign_002dlibrary_002derror\"><code>load-foreign-library-error</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#load_002dforeign_002dlibrary_002derror\">load-foreign-library-error</a></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-loading-CFFI\">loading "
"<acronym>CFFI</acronym></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dLoading\">Tutorial-Loading</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-looks-like-it-worked"
"\">looks like it worked</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dInitializing\">Tutorial-Initializing</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-M\">M</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-make_002dpointer"
"\"><code>make-pointer</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#make_002dpointer\">make-pointer</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-mem_002daptr\"><code>mem-"
"aptr</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#mem_002daptr\">mem-aptr</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-mem_002daref\"><code>mem-"
"aref</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#mem_002daref\">mem-aref</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-mem_002dref\"><code>mem-"
"ref</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#mem_002dref"
"\">mem-ref</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-minimal-bindings\">minimal "
"bindings</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dComparison\">Tutorial-Comparison</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-N\">N</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-null_002dpointer"
"\"><code>null-pointer</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#null_002dpointer\">null-pointer</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-null_002dpointer_002dp"
"\"><code>null-pointer-p</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#null_002dpointer_002dp\">null-pointer-p</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-P\">P</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-Perl\">Perl</a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Tutorial_002dComparison"
"\">Tutorial-Comparison</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-pkg_002dconfig_002dcflags"
"\"><code>pkg-config-cflags</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#Groveller-Syntax\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-pointer_002daddress"
"\"><code>pointer-address</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#pointer_002daddress\">pointer-address</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-pointer_002deq"
"\"><code>pointer-eq</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a "
"href=\"#pointer_002deq\">pointer-eq</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-pointerp\"><code>pointerp</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#pointerp"
"\">pointerp</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-pointers-in-Lisp\">pointers "
"in Lisp</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dInitializing\">Tutorial-Initializing</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-premature-deallocation"
"\">premature deallocation</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dMemory\">Tutorial-Memory</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-proclaim\"><code>proclaim</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Wrapper-for-"
"Inline_002fStatic-Functions-and-Macros\">Wrapper for Inline/Static Functions "
"and Macros</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-progn\"><code>progn</code></"
"a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Groveller-Syntax"
"\">Groveller Syntax</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-progn-1\"><code>progn</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Wrapper-for-"
"Inline_002fStatic-Functions-and-Macros\">Wrapper for Inline/Static Functions "
"and Macros</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-Python\">Python</a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Tutorial_002dComparison"
"\">Tutorial-Comparison</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-R\">R</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-requiring-CFFI\">requiring "
"<acronym>CFFI</acronym></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dLoading\">Tutorial-Loading</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-S\">S</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-SLIME\"><acronym>SLIME</"
"acronym></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dComparison\">Tutorial-Comparison</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-streams-and-C\">streams and "
"C</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dAbstraction\">Tutorial-Abstraction</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-strings\">strings</a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Tutorial_002dMemory"
"\">Tutorial-Memory</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-SWIG\"><acronym>SWIG</"
"acronym></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dComparison\">Tutorial-Comparison</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-T\">T</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"translate_002dcamelcase_002dname\"><code>translate-camelcase-name</code></a>:"
"</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#translate_002dcamelcase_002dname\">translate-camelcase-name</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"translate_002dfrom_002dforeign\"><code>translate-from-foreign</code></a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#translate_002dfrom_002dforeign\">translate-from-foreign</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"translate_002dinto_002dforeign_002dmemory\"><code>translate-into-foreign-"
"memory</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#translate_002dinto_002dforeign_002dmemory\">translate-into-foreign-"
"memory</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"translate_002dname_002dfrom_002dforeign\"><code>translate-name-from-foreign</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#translate_002dname_002dfrom_002dforeign\">translate-name-from-foreign</"
"a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"translate_002dname_002dto_002dforeign\"><code>translate-name-to-foreign</"
"code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#translate_002dname_002dto_002dforeign\">translate-name-to-foreign</a></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-translate_002dto_002dforeign"
"\"><code>translate-to-foreign</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#translate_002dto_002dforeign\">translate-to-foreign</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"translate_002dunderscore_002dseparated_002dname\"><code>translate-underscore-"
"separated-name</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#translate_002dunderscore_002dseparated_002dname\">translate-underscore-"
"separated-name</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-translating-types"
"\">translating types</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dTypes\">Tutorial-Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-tutorial_002c-CFFI"
"\">tutorial, <acronym>CFFI</acronym></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#Tutorial\">Tutorial</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-type-definition\">type "
"definition</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dTypes\">Tutorial-Types</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-type-translators_002c-"
"optimizing\">type translators, optimizing</a>:</td><td>&nbsp;</td><td valign="
"\"top\"><a href=\"#Optimizing-Type-Translators\">Optimizing Type "
"Translators</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-U\">U</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-use_002dforeign_002dlibrary"
"\"><code>use-foreign-library</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#use_002dforeign_002dlibrary\">use-foreign-library</a></td></"
"tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-V\">V</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-varargs\">varargs</a>:</"
"td><td>&nbsp;</td><td valign=\"top\"><a href=\"#Tutorial_002deasy_005fsetopt"
"\">Tutorial-easy_setopt</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"<tr><th><a name=\"Comprehensive-Index_cp_letter-W\">W</a></th><td></td><td></"
"td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-with_002dforeign_002dobject"
"\"><code>with-foreign-object</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#with_002dforeign_002dobject\">with-foreign-object</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-with_002dforeign_002dobjects"
"\"><code>with-foreign-objects</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#with_002dforeign_002dobject\">with-foreign-object</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-with_002dforeign_002dpointer"
"\"><code>with-foreign-pointer</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#with_002dforeign_002dpointer\">with-foreign-pointer</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-"
"with_002dforeign_002dpointer_002das_002dstring\"><code>with-foreign-pointer-"
"as-string</code></a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#with_002dforeign_002dpointer_002das_002dstring\">with-foreign-pointer-as-"
"string</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-with_002dforeign_002dslots"
"\"><code>with-foreign-slots</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#with_002dforeign_002dslots\">with-foreign-slots</a></td></tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-with_002dforeign_002dstring"
"\"><code>with-foreign-string</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#with_002dforeign_002dstring\">with-foreign-string</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-with_002dforeign_002dstrings"
"\"><code>with-foreign-strings</code></a>:</td><td>&nbsp;</td><td valign=\"top"
"\"><a href=\"#with_002dforeign_002dstring\">with-foreign-string</a></td></"
"tr>\n"
"<tr><td></td><td valign=\"top\"><a href=\"#index-workaround-for-C"
"\">workaround for C</a>:</td><td>&nbsp;</td><td valign=\"top\"><a href="
"\"#Tutorial_002dComparison\">Tutorial-Comparison</a></td></tr>\n"
"<tr><td colspan=\"4\"> <hr></td></tr>\n"
"</tbody></table>\n"
"<table><tbody><tr><th valign=\"top\">Jump to: &nbsp; </th><td><a class="
"\"summary-letter\" href=\"#Comprehensive-Index_cp_symbol-1\"><b>:</b></a>\n"
" &nbsp; \n"
"<br>\n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-A\"><b>A</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-B\"><b>B</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-C\"><b>C</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-D\"><b>D</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-E\"><b>E</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-F\"><b>F</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-G\"><b>G</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-I\"><b>I</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-L\"><b>L</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-M\"><b>M</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-N\"><b>N</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-P\"><b>P</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-R\"><b>R</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-S\"><b>S</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-T\"><b>T</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-U\"><b>U</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-V\"><b>V</"
"b></a>\n"
" &nbsp; \n"
"<a class=\"summary-letter\" href=\"#Comprehensive-Index_cp_letter-W\"><b>W</"
"b></a>\n"
" &nbsp; \n"
"</td></tr></tbody></table>"
msgstr ""

#: in/CFFI_User_Manual.htm:8844
msgid ""
"<div class=\"footnote\">\n"
"<hr>\n"
"<h4 class=\"footnotes-heading\">Footnotes</h4>"
msgstr ""
"<div class=\"footnote\">\n"
"<hr>\n"
"<h4 class=\"footnotes-heading\">Примечания</h4>"

#: in/CFFI_User_Manual.htm:8924
msgid ""
"<h3><a name=\"FOOT1\" href=\"#DOCF1\">(1)</a></h3>\n"
"<p>Admittedly, this is an\n"
"advanced issue, and we encourage you to leave this text until you are\n"
"more familiar with how <acronym>CFFI</acronym> works.</p>\n"
"<h3><a name=\"FOOT2\" href=\"#DOCF2\">(2)</a></h3>\n"
"<p>This does not apply to structs whose contents are\n"
"intended to be part of the public library interface.  In those cases,\n"
"a pure Lisp struct definition is always preferred.  In fact, many\n"
"prefer to stay in Lisp and break the encapsulation anyway, placing the\n"
"burden of correct library interface definition on the library.</p>\n"
"<h3><a name=\"FOOT3\" href=\"#DOCF3\">(3)</a></h3>\n"
"<p>Specifically,\n"
"<acronym>UFFI</acronym>, an older <acronym>FFI</acronym> that takes a "
"somewhat different\n"
"approach compared to <acronym>CFFI</acronym>.  I believe that these days "
"(December\n"
"2005) <acronym>CFFI</acronym> is more portable and actively developed, "
"though not as\n"
"mature yet.  Consensus in the free <small>UNIX</small> Common Lisp "
"community\n"
"seems to be that <acronym>CFFI</acronym> is preferred for new development, "
"though\n"
"<acronym>UFFI</acronym> will likely go on for quite some time as many "
"projects\n"
"already use it.  <acronym>CFFI</acronym> includes the <code>UFFI-COMPAT</"
"code> package for\n"
"complete compatibility with <acronym>UFFI</acronym>.</p>\n"
"<h3><a name=\"FOOT4\" href=\"#DOCF4\">(4)</a></h3>\n"
"<p>This isnât entirely true; some Lisps\n"
"donât support <code>foreign-funcall</code>, so <code>defcfun</code> is "
"implemented\n"
"without it.  <code>defcfun</code> may also perform optimizations that\n"
"<code>foreign-funcall</code> cannot.</p>\n"
"<h3><a name=\"FOOT5\" href=\"#DOCF5\">(5)</a></h3>\n"
"<p>Another possibility is to allow the caller to\n"
"specify the desired C type of the third argument.  This is essentially\n"
"what happens in a call to the function written in C.</p>\n"
"<h3><a name=\"FOOT6\" href=\"#DOCF6\">(6)</a></h3>\n"
"<p>See <a href=\"http://www.gnu.org/software/libc/manual/html_mono/http://"
"www.gnu.org/software/libc/manual/html_mono/libc.html#Other-Kinds-of-Streams"
"\">Other Kinds of Streams</a> in <cite>GNU C Library\n"
"Reference</cite>, for a <acronym>GNU</acronym>-only way to extend the "
"<code>FILE*</code>\n"
"type.  You could use this to convert Lisp streams to the needed C\n"
"data.  This would be quite involved and far outside the scope of this\n"
"tutorial.</p>\n"
"<h3><a name=\"FOOT7\" href=\"#DOCF7\">(7)</a></h3>\n"
"<p>â<i>But I thought Lisp was supposed to protect\n"
"me from all that buggy C crap!</i>â  Before asking a question like that,\n"
"remember that you are a stranger in a foreign land, whose residents\n"
"have a completely different set of values.</p>\n"
"<h3><a name=\"FOOT8\" href=\"#DOCF8\">(8)</a></h3>\n"
"<p>There are advantages and\n"
"disadvantages to each approach; I chose to <code>(setf\n"
"symbol-function)</code> earlier because it entailed generating fewer magic\n"
"function names.</p>\n"
"<h3><a name=\"FOOT9\" href=\"#DOCF9\">(9)</a></h3>\n"
"<p>Unfortunately, we canât protect against\n"
"<em>all</em> non-local exits, such as <code>return</code>s and <code>throw</"
"code>s,\n"
"because <code>unwind-protect</code> cannot be used to âshort-circuitâ a\n"
"non-local exit in Common Lisp, due to proposal <code>minimal</code> in\n"
"<a href=\"http://www.lisp.org/HyperSpec/Issues/iss152-writeup.html"
"\"><acronym>ANSI</acronym> issue <small>EXIT-EXTENT</small></a>.  "
"Furthermore, binding an\n"
"<code>error</code> handler prevents higher-up code from invoking restarts\n"
"that may be provided under the callbackâs dynamic context.  Such is\n"
"the way of compromise.</p>\n"
"<h3><a name=\"FOOT10\" href=\"#DOCF10\">(10)</a></h3>\n"
"<p>It might be better to return\n"
"<code>(values)</code> than <code>:curle-ok</code> in real code, but this is "
"good\n"
"for illustration.</p>\n"
"<h3><a name=\"FOOT11\" href=\"#DOCF11\">(11)</a></h3>\n"
"<p>The\n"
"definition of <em>memory</em> includes the <acronym>CPU</acronym> registers."
"</p>\n"
"<h3><a name=\"FOOT12\" href=\"#DOCF12\">(12)</a></h3>\n"
"<p>Windows programmers may chafe at adding a\n"
"<small>UNIX</small>-specific clause to <code>define-foreign-library</code>.  "
"Instead,\n"
"ask why the Windows solution to library incompatibility is âinclude\n"
"your own version of every library you use with every programâ.</p>\n"
"<h3><a name=\"FOOT13\" href=\"#DOCF13\">(13)</a></h3>\n"
"<p>See <a href=\"https://common-lisp.net/project/cffi/manual/asdf.html#Using-"
"asdf-to-load-systems\">Using asdf to load systems</a> in <cite>asdf: another "
"system definition facility</cite>, for information on\n"
"<code>asdf:*central-registry*</code>.</p>\n"
"<h3><a name=\"FOOT14\" href=\"#DOCF14\">(14)</a></h3>\n"
"<p>See <code>mini-eval</code> in <samp>libraries.lisp</samp> for\n"
"the source of this definition.  As is always the case with a Lisp\n"
"<code>eval</code>, itâs easier to understand the Lisp definition than the\n"
"english.</p>\n"
"<h3><a name=\"FOOT15\" href=\"#DOCF15\">(15)</a></h3>\n"
"<p>Namely, <acronym>CMUCL</acronym>.  See\n"
"<code>use-foreign-library</code> in <samp>libraries.lisp</samp> for details."
"</p>\n"
"</div>\n"
"<hr>"
msgstr ""
"<h3><a name=\"FOOT1\" href=\"#DOCF1\">(1)</a></h3>\n"
"<p>Следует признать, что это сложная проблема, и мы рекомендуем вам оставить "
"этот текст,\n"
"пока вы не ознакомитесь с принципами работы <acronym>CFFI</acronym>.</p>\n"
"<h3><a name=\"FOOT2\" href=\"#DOCF2\">(2)</a></h3>\n"
"<p>Это не относится к структурам, чье содержимое должно быть частью "
"интерфайся\n"
"публичной библиотеки. В этих случаях всегда предпочтительнее чисто "
"структурное\n"
"определение Lisp. Фактически, многие предпочитают оставаться в  Lisp и в "
"любом\n"
"случае нарушать инекпсуляцию, возлагая бремя правильного определения "
"интерфейса\n"
"библиотеки на саму библиотеку.</p>\n"
"<h3><a name=\"FOOT3\" href=\"#DOCF3\">(3)</a></h3>\n"
"<p>В частности,\n"
"<acronym>UFFI</acronym>, более старая <acronym>FFI</acronym>, которая "
"использует несколько\n"
"иной подход по сравнению с  <acronym>CFFI</acronym>.  Я считаю что в наши "
"дни (December\n"
"2005) <acronym>CFFI</acronym> более мобильна и активно развивается, хотя и "
"на настолько \n"
"зрела.  Похоже, что в свободном сообществе <small>UNIX</small> Common Lisp "
"существует \n"
"консенсус в отношении того, что <acronym>CFFI</acronym> предпочтительнее для "
"новых разработок,\n"
"хотя испольование <acronym>UFFI</acronym>, вероятно, будет продолжаться "
"довольно долго, поскольку\n"
"многие проекты уже используют его.  <acronym>CFFI</acronym> включает пакет "
"<code>UFFI-COMPAT</code> \n"
"для полной совместимости с  <acronym>UFFI</acronym>.</p>\n"
"<h3><a name=\"FOOT4\" href=\"#DOCF4\">(4)</a></h3>\n"
"<p>This isnât entirely true; some Lisps\n"
"donât support <code>foreign-funcall</code>, so <code>defcfun</code> is "
"implemented\n"
"without it.  <code>defcfun</code> may also perform optimizations that\n"
"<code>foreign-funcall</code> cannot.</p>\n"
"<h3><a name=\"FOOT5\" href=\"#DOCF5\">(5)</a></h3>\n"
"<p>Another possibility is to allow the caller to\n"
"specify the desired C type of the third argument.  This is essentially\n"
"what happens in a call to the function written in C.</p>\n"
"<h3><a name=\"FOOT6\" href=\"#DOCF6\">(6)</a></h3>\n"
"<p>See <a href=\"http://www.gnu.org/software/libc/manual/html_mono/http://"
"www.gnu.org/software/libc/manual/html_mono/libc.html#Other-Kinds-of-Streams"
"\">Other Kinds of Streams</a> in <cite>GNU C Library\n"
"Reference</cite>, for a <acronym>GNU</acronym>-only way to extend the "
"<code>FILE*</code>\n"
"type.  You could use this to convert Lisp streams to the needed C\n"
"data.  This would be quite involved and far outside the scope of this\n"
"tutorial.</p>\n"
"<h3><a name=\"FOOT7\" href=\"#DOCF7\">(7)</a></h3>\n"
"<p>â<i>But I thought Lisp was supposed to protect\n"
"me from all that buggy C crap!</i>â  Before asking a question like that,\n"
"remember that you are a stranger in a foreign land, whose residents\n"
"have a completely different set of values.</p>\n"
"<h3><a name=\"FOOT8\" href=\"#DOCF8\">(8)</a></h3>\n"
"<p>There are advantages and\n"
"disadvantages to each approach; I chose to <code>(setf\n"
"symbol-function)</code> earlier because it entailed generating fewer magic\n"
"function names.</p>\n"
"<h3><a name=\"FOOT9\" href=\"#DOCF9\">(9)</a></h3>\n"
"<p>Unfortunately, we canât protect against\n"
"<em>all</em> non-local exits, such as <code>return</code>s and <code>throw</"
"code>s,\n"
"because <code>unwind-protect</code> cannot be used to âshort-circuitâ a\n"
"non-local exit in Common Lisp, due to proposal <code>minimal</code> in\n"
"<a href=\"http://www.lisp.org/HyperSpec/Issues/iss152-writeup.html"
"\"><acronym>ANSI</acronym> issue <small>EXIT-EXTENT</small></a>.  "
"Furthermore, binding an\n"
"<code>error</code> handler prevents higher-up code from invoking restarts\n"
"that may be provided under the callbackâs dynamic context.  Such is\n"
"the way of compromise.</p>\n"
"<h3><a name=\"FOOT10\" href=\"#DOCF10\">(10)</a></h3>\n"
"<p>It might be better to return\n"
"<code>(values)</code> than <code>:curle-ok</code> in real code, but this is "
"good\n"
"for illustration.</p>\n"
"<h3><a name=\"FOOT11\" href=\"#DOCF11\">(11)</a></h3>\n"
"<p>The\n"
"definition of <em>memory</em> includes the <acronym>CPU</acronym> registers."
"</p>\n"
"<h3><a name=\"FOOT12\" href=\"#DOCF12\">(12)</a></h3>\n"
"<p>Windows programmers may chafe at adding a\n"
"<small>UNIX</small>-specific clause to <code>define-foreign-library</code>.  "
"Instead,\n"
"ask why the Windows solution to library incompatibility is âinclude\n"
"your own version of every library you use with every programâ.</p>\n"
"<h3><a name=\"FOOT13\" href=\"#DOCF13\">(13)</a></h3>\n"
"<p>See <a href=\"https://common-lisp.net/project/cffi/manual/asdf.html#Using-"
"asdf-to-load-systems\">Using asdf to load systems</a> in <cite>asdf: another "
"system definition facility</cite>, for information on\n"
"<code>asdf:*central-registry*</code>.</p>\n"
"<h3><a name=\"FOOT14\" href=\"#DOCF14\">(14)</a></h3>\n"
"<p>See <code>mini-eval</code> in <samp>libraries.lisp</samp> for\n"
"the source of this definition.  As is always the case with a Lisp\n"
"<code>eval</code>, itâs easier to understand the Lisp definition than the\n"
"english.</p>\n"
"<h3><a name=\"FOOT15\" href=\"#DOCF15\">(15)</a></h3>\n"
"<p>Namely, <acronym>CMUCL</acronym>.  See\n"
"<code>use-foreign-library</code> in <samp>libraries.lisp</samp> for details."
"</p>\n"
"</div>\n"
"<hr>"

#: in/CFFI_User_Manual.htm:8929
msgid "</body></html>"
msgstr ""
